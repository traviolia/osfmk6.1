%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 19 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 1 /Symbol FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
7 0 /Courier-BoldOblique FMFONTDEFINE
8 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 505.58 47.33 T
1 18 Q
(NORMA IPC V) 200.32 564 T
(ersion T) 321.57 564 T
(wo:) 383.71 564 T
( Ar) 210.14 540 T
(chitectur) 235.29 540 T
(e and Design) 303.9 540 T
0 12 Q
(Open Software Foundation) 241.04 490 T
(Research Institute) 262.87 476 T
(One Cambridge Center) 250.38 462 T
(Cambridge, MA 02142) 250.2 448 T
(\050617\051 621-7340) 268.53 430 T
(norma-ipc@osf.or) 259.12 416 T
(g) 346.89 416 T
1 F
(Abstract) 144 366 T
0 F
(. The Research Institute proposes a new architecture and) 188.63 366 T
(design for the remote IPC facility integral to the Mach microkernel.) 144 352 T
(Incorporating lessons learned from the original implementation of) 144 338 T
2 10 Q
(NORMA IPC) 144 324 T
0 12 Q
(, the second version has many goals, including enhanced) 197.97 324 T
(robustness at all levels and much higher performance levels. This is a) 144 310 T
-0.19 (working document, which we update as the design evolves. The design) 144 296 P
(will be used as a reference for the implementation and, where neces-) 144 282 T
(sary) 144 268 T
(, will be altered to re\337ect any changes that subsequently emer) 163.2 268 T
(ge.) 458.43 268 T
0 10 Q
(1) 472.75 272.8 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
-0.24 (1) 90 93.33 P
0 10 Q
-0.29 (This research was supported in part by the Defense Advanced Research Projects Agency \050DARP) 95.76 89.33 P
-0.29 (A\051 and the) 478.2 89.33 P
(Air Force Material Command \050AFMC\051.) 90 77.33 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "i" 2
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(i) 537.22 47.33 T
3 24 Q
-0.48 (T) 225.88 704 S
-0.48 (able of Contents) 236.53 704 S
0 12 Q
(CHAPTER 1) 72 664 T
1 F
(Intr) 153 664 T
(oduction) 173.44 664 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 218.88 664 T
(1) 534 664 T
(1.1) 153 650 T
(Prerequisites) 180 650 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242.87 650 T
(1) 534 650 T
(1.2) 153 636 T
(Purpose Of NORMA IPC) 180 636 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 636 T
(1) 534 636 T
(1.3) 153 622 T
(Deficiencies Of NORMA IPC Version One) 180 622 T
(. . . . . . . . . . . . . . . . . . . . . . . .) 389.79 622 T
(1) 534 622 T
(1.3.1) 180 608 T
(Performance) 216 608 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 278.85 608 T
(2) 534 608 T
(1.3.2) 180 594 T
(Robustness) 216 594 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.85 594 T
(2) 534 594 T
(1.3.3) 180 580 T
(Functionality) 216 580 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 580 T
(2) 534 580 T
(1.4) 153 566 T
(Design Goals For NORMA IPC Version Two) 180 566 T
(. . . . . . . . . . . . . . . . . . . . . .) 401.78 566 T
(3) 534 566 T
(1.4.1) 180 552 T
(Performance) 216 552 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 278.85 552 T
(3) 534 552 T
(1.4.2) 180 538 T
(Robustness) 216 538 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.85 538 T
(3) 534 538 T
(1.4.3) 180 524 T
(Functionality) 216 524 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 524 T
(4) 534 524 T
(1.5) 153 510 T
(Deferred Goals) 180 510 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 254.86 510 T
(5) 534 510 T
(1.5.1) 180 496 T
(64-bit and 32-bit Interoperability) 216 496 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 374.79 496 T
(5) 534 496 T
(1.5.2) 180 482 T
(Differing Page Sizes) 216 482 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 482 T
(5) 534 482 T
(1.5.3) 180 468 T
(Asynchronous VM Faults) 216 468 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 341.81 468 T
(5) 534 468 T
(1.5.4) 180 454 T
(Untrusted Pagers) 216 454 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 454 T
(5) 534 454 T
(1.5.5) 180 440 T
(Fault Tolerance) 216 440 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 440 T
(5) 534 440 T
(1.5.6) 180 426 T
(Membership Services) 216 426 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 320.82 426 T
(5) 534 426 T
(1.6) 153 412 T
(Related Documents) 180 412 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 412 T
(6) 534 412 T
(1.7) 153 398 T
(Terminology) 180 398 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242.87 398 T
(6) 534 398 T
(1.8) 153 384 T
(Roadmap) 180 384 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 384 T
(7) 534 384 T
(CHAPTER 2) 72 348 T
1 F
(Data T) 153 348 T
(ype De\336nitions) 187.76 348 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 348 T
(8) 534 348 T
(2.1) 153 334 T
(node_name) 180 334 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.87 334 T
(8) 534 334 T
(2.2) 153 320 T
(port_id) 180 320 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 215.88 320 T
(8) 534 320 T
(2.3) 153 306 T
(uid_t) 180 306 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 206.89 306 T
(8) 534 306 T
(2.4) 153 292 T
(handle_t) 180 292 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 221.88 292 T
(9) 534 292 T
(2.5) 153 278 T
(kmsg) 180 278 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 206.89 278 T
(9) 534 278 T
(2.6) 153 264 T
(meta_kmsg) 180 264 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.87 264 T
(9) 534 264 T
(2.7) 153 250 T
(port) 180 250 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.89 250 T
(10) 528.01 250 T
(2.7.1) 180 236 T
(No More Senders) 216 236 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 236 T
(11) 528.01 236 T
(2.7.2) 180 222 T
(Locking) 216 222 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.86 222 T
(11) 528.01 222 T
(2.8) 153 208 T
(dipc_port) 180 208 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 208 T
(11) 528.01 208 T
(2.9) 153 194 T
(xmm_ipc_port) 180 194 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 251.86 194 T
(12) 528.01 194 T
(2.10) 153 180 T
(thread) 180 180 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.88 180 T
(12) 528.01 180 T
(CHAPTER 3) 72 144 T
1 F
(Message Delivery & Flow Contr) 153 144 T
(ol) 317.32 144 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 326.82 144 T
(13) 528.01 144 T
(3.1) 153 130 T
(Semantics) 180 130 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 230.87 130 T
(13) 528.01 130 T
(3.1.1) 180 116 T
(Ordering) 216 116 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 260.86 116 T
(13) 528.01 116 T
(3.1.2) 180 102 T
(Queue Limits) 216 102 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 102 T
(16) 528.01 102 T
(3.2) 153 88 T
(Flow Control) 180 88 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 245.87 88 T
(16) 528.01 88 T
FMENDPAGE
%%EndPage: "i" 3
%%Page: "ii" 3
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(ii) 534.44 47.33 T
0 12 Q
(3.2.1) 180 712 T
(Transport Flow Control) 216 712 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 332.82 712 T
(17) 528.01 712 T
(3.2.2) 180 698 T
(Mach Message Flow) 216 698 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 698 T
(17) 528.01 698 T
(3.3) 153 684 T
(Resource Consumption) 180 684 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 684 T
(19) 528.01 684 T
(CHAPTER 4) 72 648 T
1 F
(Message Repr) 153 648 T
(esentation) 225.06 648 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 278.85 648 T
(20) 528.01 648 T
(4.1) 153 634 T
(Network Port Name) 180 634 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 278.85 634 T
(21) 528.01 634 T
(4.1.1) 180 620 T
(UID) 216 620 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.87 620 T
(21) 528.01 620 T
(4.1.2) 180 606 T
(dipc_port_name_table) 216 606 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 323.82 606 T
(22) 528.01 606 T
(4.1.3) 180 592 T
(Converting a Port Right\325s Name to a UID) 216 592 T
( . . . . . . . . . . . . . . . . . .) 416.77 592 T
(26) 528.01 592 T
(4.1.4) 180 578 T
(Converting A Send Right To Network Format) 216 578 T
(. . . . . . . . . . . . . . .) 437.76 578 T
(26) 528.01 578 T
(4.1.5) 180 564 T
(Converting A Send-Once Right To Network Format) 216 564 T
(. . . . . . . . . .) 467.74 564 T
(26) 528.01 564 T
(4.1.6) 180 550 T
(Converting A Receive Right To Network Format) 216 550 T
( . . . . . . . . . . . .) 452.75 550 T
(27) 528.01 550 T
(4.2) 153 536 T
(Converting a Kmsg\325s Port Rights to Network Format) 180 536 T
(. . . . . . . . . . . . . . .) 437.76 536 T
(27) 528.01 536 T
(4.2.1) 180 522 T
(Converting Ports In The Message Header) 216 522 T
( . . . . . . . . . . . . . . . . . .) 416.77 522 T
(28) 528.01 522 T
(4.2.2) 180 508 T
(Converting An Inline Port) 216 508 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 341.81 508 T
(28) 528.01 508 T
(4.2.3) 180 494 T
(Converting An Inline Port Array) 216 494 T
( . . . . . . . . . . . . . . . . . . . . . . . . .) 374.79 494 T
(28) 528.01 494 T
(4.2.4) 180 480 T
(Converting An Out-of-Line Port Array) 216 480 T
( . . . . . . . . . . . . . . . . . . . .) 404.78 480 T
(28) 528.01 480 T
(4.3) 153 466 T
(Out-of-Line Memory) 180 466 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 466 T
(29) 528.01 466 T
(4.3.1) 180 452 T
(Analysis of Copy-On-Write Semantics) 216 452 T
( . . . . . . . . . . . . . . . . . . . .) 404.78 452 T
(29) 528.01 452 T
(4.3.2) 180 438 T
(OOL Representation) 216 438 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 438 T
(30) 528.01 438 T
(4.4) 153 424 T
(Receiving a Network Format Message) 180 424 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.8 424 T
(30) 528.01 424 T
(4.4.1) 180 410 T
(Converting A UID To A Port Right Name) 216 410 T
(. . . . . . . . . . . . . . . . . .) 419.77 410 T
(31) 528.01 410 T
(4.4.2) 180 396 T
(Converting A Network Format Kmsg\325s Port Rights) 216 396 T
( . . . . . . . . . .) 464.74 396 T
(31) 528.01 396 T
(4.4.3) 180 382 T
(Receiving Out-of-Line Memory) 216 382 T
(. . . . . . . . . . . . . . . . . . . . . . . . . .) 371.8 382 T
(32) 528.01 382 T
(CHAPTER 5) 72 346 T
1 F
(Message T) 153 346 T
(ransmission) 206.41 346 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 346 T
(33) 528.01 346 T
(5.1) 153 332 T
(Overview) 180 332 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 332 T
(33) 528.01 332 T
(5.2) 153 318 T
(Message Transfer Details) 180 318 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 318 T
(34) 528.01 318 T
(5.2.1) 180 304 T
(Deliver Upcall) 216 304 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 287.84 304 T
(34) 528.01 304 T
(5.2.2) 180 290 T
(Dequeuing a Meta-Kmsg) 216 290 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.81 290 T
(35) 528.01 290 T
(5.3) 153 276 T
(Short kmsg transfer) 180 276 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 276 T
(36) 528.01 276 T
(5.4) 153 262 T
(Direct Message Delivery at Interrupt Level) 180 262 T
(. . . . . . . . . . . . . . . . . . . . . . .) 389.79 262 T
(36) 528.01 262 T
(5.4.1) 180 248 T
(*) 216 248 T
3 F
(deliver) 222 248 T
0 F
( Interrupt Pseudo Code) 255.3 248 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.8 248 T
(36) 528.01 248 T
(5.4.2) 180 234 T
(Interrupt Delivery) 216 234 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 234 T
(37) 528.01 234 T
(5.5) 153 220 T
(Enqueue Failures) 180 220 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.86 220 T
(37) 528.01 220 T
(5.6) 153 206 T
(Port Queue Full) 180 206 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.86 206 T
(37) 528.01 206 T
(5.7) 153 192 T
(Resource Shortages) 180 192 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 192 T
(39) 528.01 192 T
(5.7.1) 180 178 T
(Sender Response to Resource Shortage) 216 178 T
( . . . . . . . . . . . . . . . . . . . .) 404.78 178 T
(40) 528.01 178 T
(5.8) 153 164 T
(Transmitting Complex Messages) 180 164 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.81 164 T
(41) 528.01 164 T
(5.8.1) 180 150 T
(Large inline kmsg) 216 150 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 150 T
(41) 528.01 150 T
(5.8.2) 180 136 T
(Additional Kmsg Contents) 216 136 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 344.81 136 T
(42) 528.01 136 T
(5.8.3) 180 122 T
(Out of Line Data) 216 122 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 122 T
(42) 528.01 122 T
(5.9) 153 108 T
(Out of Line Port Arrays) 180 108 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 108 T
(45) 528.01 108 T
(5.10) 153 94 T
(Maintaining Message Ordering for Kernel Ports) 180 94 T
( . . . . . . . . . . . . . . . . . . .) 410.77 94 T
(45) 528.01 94 T
(5.10.1) 180 80 T
(Sending Thread Context \322Stealing\323) 216 80 T
( . . . . . . . . . . . . . . . . . . . . . . .) 386.79 80 T
(45) 528.01 80 T
FMENDPAGE
%%EndPage: "ii" 4
%%Page: "iii" 4
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(iii) 531.66 47.33 T
0 12 Q
(5.10.2) 180 712 T
(Kernel Threads Generating Order-Dependent Messages) 216 712 T
(. . . . . . .) 485.73 712 T
(46) 528.01 712 T
(5.11) 153 698 T
(Aborted Message Send) 180 698 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 698 T
(48) 528.01 698 T
(CHAPTER 6) 72 662 T
1 F
(Distributed Port Right Management) 153 662 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 341.81 662 T
(49) 528.01 662 T
(6.1) 153 648 T
(Design Overview) 180 648 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 648 T
(49) 528.01 648 T
(6.2) 153 634 T
(No More Senders Interface Change) 180 634 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 350.81 634 T
(49) 528.01 634 T
(6.3) 153 620 T
(Send Rights With No More Senders: Transits) 180 620 T
( . . . . . . . . . . . . . . . . . . . . .) 398.78 620 T
(50) 528.01 620 T
(6.3.1) 180 606 T
(Send Right Copyin) 216 606 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 308.83 606 T
(51) 528.01 606 T
(6.3.2) 180 592 T
(Send Right Copyout) 216 592 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 314.83 592 T
(52) 528.01 592 T
(6.4) 153 578 T
(Send Rights Without No More Senders) 180 578 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.8 578 T
(52) 528.01 578 T
(6.5) 153 564 T
(Send Once Rights) 180 564 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 564 T
(52) 528.01 564 T
(6.6) 153 550 T
(Dead Name Notifications) 180 550 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 550 T
(52) 528.01 550 T
(6.7) 153 536 T
(Receive Right Migration) 180 536 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 536 T
(53) 528.01 536 T
(6.7.1) 180 522 T
(State Transfer) 216 522 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 522 T
(53) 528.01 522 T
(6.7.2) 180 508 T
(Detailed State Transfer Sequence:) 216 508 T
( . . . . . . . . . . . . . . . . . . . . . . . .) 380.79 508 T
(55) 528.01 508 T
(6.7.3) 180 494 T
(Sidebar on Port Queue Limit) 216 494 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 356.8 494 T
(56) 528.01 494 T
(6.7.4) 180 480 T
(Effects on other operations) 216 480 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 347.81 480 T
(57) 528.01 480 T
(6.7.5) 180 466 T
(State Cleanup) 216 466 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 466 T
(57) 528.01 466 T
(6.8) 153 452 T
(Port Data Structure Impact and Interface Changes) 180 452 T
(. . . . . . . . . . . . . . . . . .) 419.77 452 T
(58) 528.01 452 T
(6.9) 153 438 T
(Distributed Port Management Background and Goals) 180 438 T
(. . . . . . . . . . . . . . .) 437.76 438 T
(58) 528.01 438 T
(6.9.1) 180 424 T
(Transits -- Rationale and Justification) 216 424 T
( . . . . . . . . . . . . . . . . . . . . .) 398.78 424 T
(59) 528.01 424 T
(CHAPTER 7) 72 388 T
1 F
(Fault T) 153 388 T
(olerance) 190.22 388 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.87 388 T
(61) 528.01 388 T
(7.1) 153 374 T
( Fault Isolation / Management) 180 374 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 326.82 374 T
(61) 528.01 374 T
(7.2) 153 360 T
(Fault Isolation Goals for V2) 180 360 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 360 T
(61) 528.01 360 T
(7.3) 153 346 T
(Behavior of Ordinary Messages) 180 346 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 335.82 346 T
(61) 528.01 346 T
(7.4) 153 332 T
(Message Flush Bit) 180 332 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 332 T
(61) 528.01 332 T
(7.4.1) 180 318 T
(NORMA behavior for flush) 216 318 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 350.81 318 T
(61) 528.01 318 T
(7.4.2) 180 304 T
(Transport behavior for flush) 216 304 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 353.81 304 T
(61) 528.01 304 T
(CHAPTER 8) 72 268 T
1 F
(Membership Services) 153 268 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.86 268 T
(62) 528.01 268 T
(CHAPTER 9) 72 232 T
1 F
(Memory Pinning) 153 232 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242.87 232 T
(63) 528.01 232 T
(9.1) 153 218 T
(Data Structures) 180 218 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 254.86 218 T
(64) 528.01 218 T
(9.2) 153 204 T
(Locking) 180 204 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 221.88 204 T
(64) 528.01 204 T
(9.3) 153 190 T
(Algorithms) 180 190 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.87 190 T
(65) 528.01 190 T
(9.4) 153 176 T
(Interfaces) 180 176 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 176 T
(66) 528.01 176 T
(9.5) 153 162 T
(Comparison with Wiring) 180 162 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 162 T
(67) 528.01 162 T
(9.6) 153 148 T
(Use of Memory Pinning by NORMA) 180 148 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 359.8 148 T
(67) 528.01 148 T
(CHAPTER 10) 72 112 T
1 F
(Interactions W) 153 112 T
(ith Other Mach Subsystems) 229.73 112 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . .) 374.79 112 T
(69) 528.01 112 T
(10.1) 153 98 T
(External Memory Management Interface) 180 98 T
(. . . . . . . . . . . . . . . . . . . . . . . . .) 377.79 98 T
(69) 528.01 98 T
(10.2) 153 84 T
(Device Operations) 180 84 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 84 T
(69) 528.01 84 T
FMENDPAGE
%%EndPage: "iii" 5
%%Page: "iv" 5
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(iv) 532.22 47.33 T
0 12 Q
(10.2.1) 180 712 T
(Device Queueing) 216 712 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 712 T
(69) 528.01 712 T
(10.2.2) 180 698 T
(Input Overload) 216 698 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290.84 698 T
(70) 528.01 698 T
(10.3) 153 684 T
(XMM) 180 684 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.88 684 T
(70) 528.01 684 T
(10.3.1) 180 670 T
(Pageable XMM Pages) 216 670 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 323.82 670 T
(70) 528.01 670 T
(10.3.2) 180 656 T
(Paging Flow Control) 216 656 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 656 T
(71) 528.01 656 T
(10.4) 153 642 T
(Asynchronous Virtual Memory Faults) 180 642 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.8 642 T
(73) 528.01 642 T
(10.5) 153 628 T
(Server Dependencies) 180 628 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 628 T
(73) 528.01 628 T
(CHAPTER 1) 72 592 T
(1) 135.19 592 T
1 F
(Mach Interface Changes) 153 592 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 592 T
(74) 528.01 592 T
(11.1) 153 578 T
(Message Queue Behavior) 180 578 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 578 T
(74) 528.01 578 T
(11.2) 153 564 T
(No More Senders) 180 564 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 564 T
(75) 528.01 564 T
(11.3) 153 550 T
(Send Notifications) 180 550 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 550 T
(75) 528.01 550 T
(11.4) 153 536 T
(Port Death) 180 536 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.87 536 T
(75) 528.01 536 T
(11.5) 153 522 T
(Copy-On-Write Semantics) 180 522 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 308.83 522 T
(76) 528.01 522 T
(11.6) 153 508 T
(Message Transmission and Reception) 180 508 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 362.8 508 T
(76) 528.01 508 T
(11.6.1) 180 494 T
(Transmission) 216 494 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 494 T
(76) 528.01 494 T
(11.6.2) 180 480 T
(Reception) 216 480 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 480 T
(77) 528.01 480 T
(11.7) 153 466 T
(Device Operations) 180 466 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 466 T
(77) 528.01 466 T
(11.8) 153 452 T
(Pagers) 180 452 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.88 452 T
(77) 528.01 452 T
(11.9) 153 438 T
(Interesting Failure Modes) 180 438 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 438 T
(78) 528.01 438 T
(11.10) 153 424 T
(Mach Interface Changes) 180 424 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 424 T
(78) 528.01 424 T
(11.10.1) 180 410 T
(Device Operations) 216 410 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 410 T
(78) 528.01 410 T
(11.10.2) 180 396 T
(mach_msg) 216 396 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 396 T
(79) 528.01 396 T
(11.10.3) 180 382 T
(mach_port_allocate) 216 382 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 311.83 382 T
(81) 528.01 382 T
(11.10.4) 180 368 T
(mach_port_allocate_full) 216 368 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 335.82 368 T
(81) 528.01 368 T
(11.10.5) 180 354 T
(mach_port_request_notification) 216 354 T
(. . . . . . . . . . . . . . . . . . . . . . . . . .) 371.8 354 T
(81) 528.01 354 T
(11.10.6) 180 340 T
(mach_port_status) 216 340 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 340 T
(81) 528.01 340 T
(11.11) 153 326 T
(NORMA Interface Changes) 180 326 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 314.83 326 T
(81) 528.01 326 T
(11.11.1) 180 312 T
(Node Naming) 216 312 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 312 T
(81) 528.01 312 T
(11.12) 153 298 T
(MIG) 180 298 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.89 298 T
(82) 528.01 298 T
(11.13) 153 284 T
(Kernel Internals) 180 284 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.86 284 T
(82) 528.01 284 T
(11.13.1) 180 270 T
(New Page Pinning facility) 216 270 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 344.81 270 T
(82) 528.01 270 T
(11.13.2) 180 256 T
(Stealing Context) 216 256 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 256 T
(83) 528.01 256 T
(11.13.3) 180 242 T
(Abolished Internal NORMA Interfaces) 216 242 T
( . . . . . . . . . . . . . . . . . . . .) 404.78 242 T
(83) 528.01 242 T
(11.13.4) 180 228 T
(Internal XMM Interfaces) 216 228 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.81 228 T
(83) 528.01 228 T
(CHAPTER 12) 72 192 T
1 F
(Comparison W) 153 192 T
(ith V) 231.08 192 T
(ersion One) 255.63 192 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 311.83 192 T
(84) 528.01 192 T
(12.1) 153 178 T
(Correctness) 180 178 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.87 178 T
(84) 528.01 178 T
(12.1.1) 180 164 T
(Message Ordering) 216 164 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 164 T
(84) 528.01 164 T
(12.2) 153 150 T
(Robustness) 180 150 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.87 150 T
(84) 528.01 150 T
(12.2.1) 180 136 T
(Message Ordering Violations) 216 136 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 359.8 136 T
(84) 528.01 136 T
(12.2.2) 180 122 T
(Virtual Memory Exhaustion) 216 122 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 353.81 122 T
(84) 528.01 122 T
(12.2.3) 180 108 T
(Many-to-One Message Overload) 216 108 T
( . . . . . . . . . . . . . . . . . . . . . . . . .) 374.79 108 T
(84) 528.01 108 T
(12.2.4) 180 94 T
(One-to-One Message Overload) 216 94 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.8 94 T
(84) 528.01 94 T
(12.2.5) 180 80 T
(Paging Flow Control Analysis) 216 80 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 362.8 80 T
(84) 528.01 80 T
FMENDPAGE
%%EndPage: "iv" 6
%%Page: "v" 6
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(v) 535 47.33 T
0 12 Q
(12.3) 153 712 T
(Port Right Management) 180 712 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 712 T
(85) 528.01 712 T
(12.4) 153 698 T
(Performance) 180 698 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242.87 698 T
(86) 528.01 698 T
(12.5) 153 684 T
(Important Implementation Details) 180 684 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 344.81 684 T
(86) 528.01 684 T
(CHAPTER 13) 72 648 T
1 F
(Implementation Issues) 153 648 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 648 T
(87) 528.01 648 T
(13.1) 153 634 T
(Implementation Process) 180 634 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 634 T
(87) 528.01 634 T
(13.2) 153 620 T
(Internal Reorganization) 180 620 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 620 T
(87) 528.01 620 T
(13.3) 153 606 T
(Platform) 180 606 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 224.88 606 T
(87) 528.01 606 T
(13.4) 153 592 T
(Robustness Testing) 180 592 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 592 T
(87) 528.01 592 T
(13.4.1) 180 578 T
(In-Kernel Unit Tests) 216 578 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 578 T
(87) 528.01 578 T
(13.4.2) 180 564 T
(Lightweight Performance Tests) 216 564 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.8 564 T
(88) 528.01 564 T
(13.4.3) 180 550 T
(Functional Tests) 216 550 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 550 T
(88) 528.01 550 T
(13.4.4) 180 536 T
(Regression Tests) 216 536 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 299.83 536 T
(88) 528.01 536 T
(13.4.5) 180 522 T
(Stress Tests) 216 522 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 522 T
(88) 528.01 522 T
(13.4.6) 180 508 T
(Performance Characterization) 216 508 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 359.8 508 T
(88) 528.01 508 T
(13.5) 153 494 T
(Dependencies) 180 494 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 248.86 494 T
(88) 528.01 494 T
(APPENDIX A) 72 458 T
1 F
(DIPC KKT Summary) 153 458 T
0 F
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 458 T
(90) 528.01 458 T
(A.1) 153 444 T
(Remote Procedure Calls) 180 444 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 444 T
(90) 528.01 444 T
(A.1.1) 180 430 T
(WAKEUP_SENDER) 216 430 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 320.82 430 T
(90) 528.01 430 T
(A.1.2) 180 416 T
(PORT_PROBE) 216 416 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 416 T
(90) 528.01 416 T
(A.1.3) 180 402 T
(ACQUIRE_TRANSITS) 216 402 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 332.82 402 T
(90) 528.01 402 T
(A.1.4) 180 388 T
(YIELD_TRANSITS) 216 388 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.83 388 T
(90) 528.01 388 T
(A.1.5) 180 374 T
(SEND_META_KMSG) 216 374 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 329.82 374 T
(90) 528.01 374 T
(A.1.6) 180 360 T
(MIGRATE_STATE) 216 360 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 314.83 360 T
(90) 528.01 360 T
(A.1.7) 180 346 T
(DN_REGISTER) 216 346 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 346 T
(90) 528.01 346 T
(A.1.8) 180 332 T
(DN_NOTIFY) 216 332 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 332 T
(90) 528.01 332 T
(A.1.9) 180 318 T
(UNBLOCK_PORT) 216 318 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 311.83 318 T
(90) 528.01 318 T
(A.1.10) 180 304 T
(REQUEST_CALLBACK) 216 304 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 341.81 304 T
(91) 528.01 304 T
(A.1.11) 180 290 T
(UNBLOCK_NODE) 216 290 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 314.83 290 T
(91) 528.01 290 T
(A.1.12) 180 276 T
(GET_SPECIAL_PORT) 216 276 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 332.82 276 T
(91) 528.01 276 T
(A.1.13) 180 262 T
(ALIVE_NOTIFY) 216 262 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.83 262 T
(91) 528.01 262 T
(A.1.14) 180 248 T
(BEGIN_RECV_MIGRATE) 216 248 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 353.81 248 T
(91) 528.01 248 T
(A.1.15) 180 234 T
(TEST_SYNC) 216 234 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 234 T
(91) 528.01 234 T
(A.1.16) 180 220 T
(TEST_INTR_RPC) 216 220 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 308.83 220 T
(91) 528.01 220 T
(A.1.17) 180 206 T
(TEST_THREAD_RPC) 216 206 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 329.82 206 T
(91) 528.01 206 T
(A.2) 153 192 T
(Transport Upcalls) 180 192 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 266.85 192 T
(91) 528.01 192 T
(A.2.1) 180 178 T
(*deliver) 216 178 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.86 178 T
(91) 528.01 178 T
(APPENDIX B) 72 142 T
1 F
(DIPC Thr) 153 142 T
(eads) 205.09 142 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 142 T
(92) 528.01 142 T
(B.1) 153 128 T
(dipc_message_delivery) 180 128 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 293.84 128 T
(92) 528.01 128 T
(B.2) 153 114 T
(Transport Thread) 180 114 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.86 114 T
(92) 528.01 114 T
(B.3) 153 100 T
(Kserver Thread) 180 100 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.86 100 T
(92) 528.01 100 T
FMENDPAGE
%%EndPage: "v" 7
%%Page: "vi" 7
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(vi) 532.22 47.33 T
0 12 Q
(APPENDIX C) 72 712 T
1 F
(KKT Interface Listing) 153 712 T
0 F
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.85 712 T
(93) 528.01 712 T
FMENDPAGE
%%EndPage: "vi" 8
%%Page: "vii" 8
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(vii) 529.45 47.33 T
3 24 Q
-0.48 (List of Figur) 239.4 704 S
-0.48 (es) 353.58 704 S
0 12 Q
(Figure 1:) 72 604 T
(Queue Full Node Interaction Diagram) 180 604 T
(.......................................................) 362.8 604 T
(39) 528.01 604 T
(Figure 2:) 72 590 T
(Resource Shortage Diagram) 180 590 T
(......................................................................) 317.83 590 T
(40) 528.01 590 T
(Figure 3:) 72 576 T
(msg_progress State Transitions) 180 576 T
(.................................................................) 332.82 576 T
(43) 528.01 576 T
(Figure 4:) 72 562 T
(Layout of OOL Transmission with trailing page status) 180 562 T
(.............................) 440.76 562 T
(44) 528.01 562 T
(Figure 5:) 72 548 T
(Migrating port state transition diagram) 180 548 T
(.....................................................) 368.8 548 T
(55) 528.01 548 T
FMENDPAGE
%%EndPage: "vii" 9
%%Page: "1" 9
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(1) 535 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 1) 72 704 S
0 24 Q
-0.48 (Introduction) 180 704 S
1 14 Q
(1.1 Pr) 72 580.67 T
(er) 107.5 580.67 T
(equisites) 119.67 580.67 T
0 12 Q
(W) 90 561 T
(e assume that the reader is familiar with the existing Mach 3.0 microkernel, and especially) 100.36 561 T
(the) 72 547 T
2 10 Q
(VM) 89.65 547 T
0 12 Q
(,) 101.65 547 T
2 10 Q
(XMM) 107.64 547 T
0 12 Q
(,) 125.64 547 T
2 10 Q
(IPC) 131.63 547 T
0 12 Q
(, and) 149.62 547 T
2 10 Q
(NORMA IPC Version One) 175.93 547 T
0 12 Q
( subsystems. This document does not review fun-) 301.87 547 T
-0.02 (damental Mach concepts or commonly-known internals. Refer to section 1.6 for a list of compan-) 72 533 P
(ion documents necessary or helpful for reading alongside this one. It may also be helpful to refer) 72 519 T
(to the current source code base \050NORMA13, NORMA14, or later\051.) 72 505 T
1 14 Q
(1.2 Purpose Of NORMA IPC) 72 475.67 T
0 12 Q
-0.22 (The) 90 456 P
2 10 Q
-0.43 (NORMA IPC) 111.43 456 P
0 12 Q
-0.22 ( subsystem exists to extend Mach IPC semantics seamlessly across a cooperat-) 164.97 456 P
(ing computing domain. A) 72 442 T
2 10 Q
(NORMA) 198.27 442 T
0 12 Q
( domain contains independent nodes interconnected via a com-) 228.25 442 T
(munications medium. \050The) 72 428 T
2 10 Q
(NORMA) 204.59 428 T
0 12 Q
( acronym stands for NO Remote Memory Access.\051) 234.57 428 T
(Unmodi\336ed Mach functions on uniprocessor and tightly-coupled shared-memory architec-) 90 410 T
-0.11 (tures, with a single kernel running on top of a single machine abstraction. By contrast, in a) 72 396 P
2 10 Q
-0.22 (NORMA) 507.13 396 P
0 12 Q
-0.25 (domain multiple kernels, each executing on top of an independent machine abstraction, cooperate) 72 382 P
(to provide the illusion of a single Mach IPC space.) 72 368 T
(By virtue of providing a single IPC space, the existing Mach abstractions -- such as tasks,) 90 350 T
(threads, memory objects, hosts and processor sets -- may be controlled transparently by applica-) 72 336 T
(tions running on any node within the domain.) 72 322 T
(The Mach eXternal Memory Management \050) 90 304 T
2 10 Q
(XMM) 300.16 304 T
0 12 Q
(\051 subsystem uses) 318.15 304 T
2 10 Q
(NORMA IPC) 401.77 304 T
0 12 Q
( to provide fully) 455.74 304 T
-0.41 (coherent shared memory between nodes. Thus, tasks running on separate nodes may transparently) 72 290 P
(share memory objects for reading and writing.) 72 276 T
(Higher) 90 258 T
(-level software, such as OSF/1 AD, may then provide the abstraction of a single) 123.07 258 T
-0.32 (machine image spanning all cooperating nodes. T) 72 244 P
-0.32 (asks \050or even UNIX processes\051 may be spawned) 307.42 244 P
-0.15 (on any or all nodes, with or without load-levelling. Some systems may even choose to implement) 72 230 P
(transparent task migration.) 72 216 T
(Because Mach is a communication-oriented microkernel, the local and remote IPC sub-) 90 198 T
(systems are crucial to the performance and robustness of the system as a whole.) 72 184 T
1 14 Q
(1.3 De\336ciencies Of NORMA IPC V) 72 154.67 T
(ersion One) 279.79 154.67 T
0 12 Q
(T) 90 135 T
(oday\325) 96.49 135 T
(s system, although available in a reasonably robust commercial implementation, suf-) 123.14 135 T
-0.43 (fers several drawbacks. First and foremost,) 72 121 P
2 10 Q
-0.86 (NORMA IPC) 278.59 121 P
0 12 Q
-0.43 ( was developed as a prototype and has been) 331.7 121 P
(asked to provide levels of robustness and performance never originally envisioned. As a proto-) 72 107 T
(type,) 72 93 T
2 10 Q
(NORMA IPC) 98.65 93 T
0 12 Q
( successfully demonstrated the viability of extending Mach semantics across) 152.62 93 T
(cooperating nodes.) 72 79 T
FMENDPAGE
%%EndPage: "1" 10
%%Page: "2" 10
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(2) 535 47.33 T
1 14 Q
(1.3.1 Performance) 72 710.67 T
0 12 Q
(Performance suf) 90 691 T
(fers from limitations on message transmission and protocol implementation.) 168.71 691 T
(The underlying communications protocol assumes an unreliable transport and thus implements a) 72 677 T
(stop-and-wait protocol to guarantee reliable data transfer) 72 663 T
(.) 343.78 663 T
2 10 Q
(NORMA) 349.78 663 T
0 12 Q
( allows only one message at a) 379.76 663 T
-0.27 (time to be sent between nodes, although messages destined for separate ports have no inter) 72 649 P
-0.27 (-depen-) 503.37 649 P
-0.39 (dencies. Even within a message, the sender transmits one piece at a time and waits for the receiver) 72 635 P
(to acknowledge it. There is no provision for transmitting lar) 72 621 T
(ge amounts of data at once.) 358.93 621 T
0 10 Q
(1) 490.16 625.8 T
0 12 Q
( This) 495.16 621 T
-0.42 (excessive handshaking throttles throughput even on unreliable media and is completely redundant) 72 607 P
(when layering) 72 593 T
2 10 Q
(NORMA IPC) 143.28 593 T
0 12 Q
( on a reliable transport.) 197.25 593 T
2 10 Q
(NORMA IPC) 90 575 T
0 12 Q
( does not degrade gracefully under load. The mechanisms controlling load are) 143.97 575 T
(primitive and ill-suited to good performance under light or heavy load.) 72 561 T
1 14 Q
(1.3.2 Robustness) 72 531.67 T
0 12 Q
-0.25 (In general,) 90 512 P
2 10 Q
-0.5 (NORMA IPC) 143.78 512 P
0 12 Q
-0.25 ( suf) 197.25 512 P
-0.25 (fers from message overload scenarios. Message storms directed at a) 214.44 512 P
-0.05 (single node cause many problems. Enough \336xes have been applied to the current implementation) 72 498 P
(that many storms are avoidable or survivable but this area remains a weak spot.) 72 484 T
(The) 90 466 T
2 10 Q
(NORMA IPC) 111.65 466 T
0 12 Q
( subsystem must examine the types of messages it carries to determine) 165.62 466 T
(whether some require special treatment, say for pageout handling. This layering violation intro-) 72 452 T
-0.47 (duces irritating dependencies between) 72 438 P
2 10 Q
-0.93 (NORMA) 255.99 438 P
0 12 Q
-0.47 ( and the rest of the Mach kernel, leading to long-term) 285.97 438 P
(maintenance problems.) 72 424 T
-0.25 (Finally) 90 406 P
-0.25 (, suf) 123.21 406 P
-0.25 (\336cient emer) 143.4 406 P
-0.25 (gency work has been done on the current implementation that it is frag-) 199.89 406 P
(ile and dif) 72 392 T
(\336cult to maintain.) 120.42 392 T
1 14 Q
(1.3.3 Functionality) 72 362.67 T
0 12 Q
(The following goals were not originally tar) 90 343 T
(geted by) 296.31 343 T
2 10 Q
(NORMA IPC) 340.28 343 T
0 12 Q
(:) 394.25 343 T
(SMP support) 108 325 T
2 10 Q
(NORMA IPC) 216 325 T
0 12 Q
( is a uniprocessor) 269.97 325 T
(-only subsystem. One implementation) 353.34 325 T
(has been done that makes) 216 311 T
2 10 Q
(NORMA IPC) 341.57 311 T
0 12 Q
( multiprocessor safe, but the) 395.54 311 T
-0.26 (subsystem itself remains essentially single-threaded. There is today) 216 297 P
(no version of) 216 283 T
2 10 Q
(NORMA IPC) 282.29 283 T
0 12 Q
( that is ef) 336.26 283 T
(\336cient on a tightly-coupled,) 380.35 283 T
(shared-memory \050SMP\051 multiprocessor) 216 269 T
(.) 399.88 269 T
(Preemption) 108 251 T
2 10 Q
(NORMA IPC) 216 251 T
0 12 Q
( is not preemptive.) 269.97 251 T
(Fault tolerance) 108 233 T
2 10 Q
(NORMA IPC) 216 233 T
0 12 Q
( cannot survive the voluntary or involuntary removal of) 269.97 233 T
(any nodes from a domain. For that matter) 216 219 T
(, there is no practical pro-) 414.72 219 T
(vision for dynamically adding new \050or reactivated\051 nodes to a) 216 205 T
(domain.) 216 191 T
(Scalability) 108 173 T
(The subsystem allocates most of its data structures statically) 216 173 T
(, con-) 504.37 173 T
(\336gured for the maximum domain size ever expected. In a domain) 216 159 T
(consisting of thousands or tens of thousands of nodes,) 216 145 T
2 10 Q
(NORMA IPC) 477.84 145 T
0 12 Q
(consumes too much memory to be generally practical.) 216 131 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 93.33 T
0 10 Q
(One vendor has implemented a bulk data transport optimization in V) 96 89.33 T
(ersion One but other message trans-) 369.71 89.33 T
(mission limitations within) 90 77.33 T
2 F
(NORMA IPC) 196.91 77.33 T
0 F
( still prevent high utilization of available hardware bandwidth.) 250.88 77.33 T
FMENDPAGE
%%EndPage: "2" 11
%%Page: "3" 11
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(3) 535 47.33 T
0 12 Q
(The) 90 712 T
2 10 Q
(NORMA) 111.65 712 T
0 12 Q
( subsystem was never originally designed to handle any of these functional goals.) 141.63 712 T
(While support for any or all of these needs could be retro\336tted, the result would be of very poor) 72 698 T
(quality) 72 684 T
(.) 104.54 684 T
1 14 Q
(1.4 Design Goals For NORMA IPC V) 72 654.67 T
(ersion T) 294.18 654.67 T
(wo) 342.51 654.67 T
0 12 Q
(The Open Software Foundation Research Institute has committed to a complete redesign and) 90 635 T
(reimplementation of) 72 621 T
2 10 Q
(NORMA IPC) 172.6 621 T
0 12 Q
( to provide a new subsystem capable of meeting the following) 226.57 621 T
(requirements.) 72 607 T
1 14 Q
(1.4.1 Performance) 72 577.67 T
0 12 Q
(In architecting this system, we have focussed directly on the requirements of high perfor-) 90 558 T
-0.42 (mance multicomputers \050such as the Intel Paragon\051. While we believe the resulting design will be a) 72 544 P
(reasonable \336t to slower networks, we have made some design decisions that favor more sophisti-) 72 530 T
(cated hardware that is often not to be found on slower speed networks.) 72 516 T
0 10 Q
(2) 410.74 520.8 T
0 12 Q
( This design will de\336ne a) 415.74 516 T
(transport interface suitable for implementing ef) 72 502 T
(\336cient transport software in a variety of settings.) 298.61 502 T
(Our performance goals include:) 72 488 T
(\245 T) 90 470 T
(ake advantage of high-speed interconnects and software transports) 103.68 470 T
(\245 T) 90 452 T
(ake advantage of reliable interconnects) 103.68 452 T
(\245 Minimize RPC traf) 90 434 T
(\336c) 188.93 434 T
(\245 Full end-to-end \337ow control) 90 416 T
(\245 A) 90 398 T
(void use of timeouts) 104.97 398 T
(Sustained high performance may only be achieved with smooth, end-to-end message \337ow) 90 380 T
(control; otherwise, the system will repeatedly fall into message storms and load conditions that) 72 366 T
(cause poor performance.) 72 352 T
(W) 90 334 T
(e avoid designing) 100.36 334 T
2 10 Q
(NORMA IPC) 187.97 334 T
0 12 Q
( with any dependency on timeout-based algorithms because) 241.94 334 T
(experience has shown that timeout-based algorithms tend to scale poorly in lar) 72 320 T
(ge con\336gurations.) 448.52 320 T
1 14 Q
(1.4.2 Robustness) 72 290.67 T
0 12 Q
(A more robust version of) 90 271 T
2 10 Q
(NORMA IPC) 213.58 271 T
0 12 Q
( depends on a new architecture for the subsystem.) 267.55 271 T
(Responsibility for data movement must be separated from responsibility for extending the Mach) 72 257 T
-0.18 (IPC abstractions between nodes. The interactions between V) 72 243 P
-0.18 (irtual Memory and IPC must be com-) 361.17 243 P
-0.29 (pletely mapped out to avoid the problems inherent in V) 72 229 P
-0.29 (ersion One. Memory consumption must be) 333.54 229 P
(considered as an integral part of the design to avoid memory exhaustion problems and to permit) 72 215 T
(the support of lar) 72 201 T
(ge domains.) 154.06 201 T
1 14 Q
(1.4.2.1 Layering) 72 171.67 T
0 12 Q
(W) 90 152 T
(e will separate the semantics and implementation of the software transport from the) 100.36 152 T
2 10 Q
(NORMA) 503.74 152 T
(IPC) 72 138 T
0 12 Q
( layer) 89.99 138 T
(. The) 116.3 138 T
2 10 Q
(NORMA IPC) 143.95 138 T
0 12 Q
( layer is responsible for extending the Mach IPC abstractions across) 197.92 138 T
(nodes, including port right management and message ordering. The) 72 124 T
2 10 Q
(NORMA IPC) 398.77 124 T
0 12 Q
( layer uses a dis-) 452.74 124 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(2) 90 93.33 T
0 10 Q
(For example, the buf) 96 89.33 T
(fer management design is a good \336t for low-latency) 179.09 89.33 T
(, high-throughput interconnects) 384.96 89.33 T
(but when running over Ethernet mandates a copy operation to put incoming data in the right place.) 90 77.33 T
FMENDPAGE
%%EndPage: "3" 12
%%Page: "4" 12
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(4) 535 47.33 T
0 12 Q
-0.09 (tributed port right management scheme, known as the \322principal/proxy\323 mechanism, a.k.a. \322prox-) 72 712 P
(ies\323. This scheme minimizes inter) 72 698 T
(-node communication.) 234.65 698 T
(The software transport layer has responsibility for carrying bytes from one node to another) 90 680 T
(.) 524.68 680 T
(The transport is fully \337ow-controlled. The transport is opaque to) 72 666 T
2 10 Q
(NORMA) 384.13 666 T
0 12 Q
(: only well-de\336ned inter-) 414.11 666 T
(faces will be used to communicate between the two layers.) 72 652 T
1 14 Q
(1.4.2.2 V) 72 622.67 T
(irtual Memory Integration) 123.56 622.67 T
0 12 Q
(The close coupling between virtual memory and interprocess communication caused unantic-) 90 603 T
(ipated problems in) 72 589 T
2 10 Q
(NORMA IPC Version One) 164.28 589 T
0 12 Q
(, particularly with respect to pageout. In V) 290.21 589 T
(ersion) 492.39 589 T
(T) 72 575 T
(wo, resolving VM integration and pageout problems are primary design goals.) 78.49 575 T
1 14 Q
(1.4.2.3 Memory Consumption) 72 545.67 T
0 12 Q
(Memory consumption will be limited by transferring a message only when the receiver is) 90 526 T
(ready to accept it. In V) 72 512 T
(ersion One, an unsolicited message could force a receiving node to over-) 180.58 512 T
(commit resources. In V) 72 498 T
(ersion T) 183.25 498 T
(wo, memory consumption will generally be pushed back onto the) 222.05 498 T
(sending node, so memory consumption and failure modes will be identical to uniprocessor Mach.) 72 484 T
1 14 Q
(1.4.3 Functionality) 72 454.67 T
2 10 Q
(NORMA IPC Version Two) 90 435 T
0 12 Q
( will include additional functionality beyond that provided by V) 215.93 435 T
(er-) 521.41 435 T
(sion One.) 72 421 T
1 14 Q
(1.4.3.1 Ef\336cient Unipr) 72 391.67 T
(ocessor Support) 203.51 391.67 T
2 10 Q
(NORMA IPC) 90 372 T
0 12 Q
( must provide ef) 143.97 372 T
(\336cient, multiplexed channels between nodes, capable of support-) 222.04 372 T
-0.08 (ing simultaneous transmission of independent messages. Message setup and teardown must be as) 72 358 P
(simple and ef) 72 344 T
(\336cient as possible, and should avoid the introduction of delayed operations imple-) 136.4 344 T
-0.23 (mented via auxiliary threads. For instance, when in thread context it should be possible to destroy) 72 330 P
(a message and free up all associated resources without requiring the use of yet another thread.) 72 316 T
-0.45 (If necessary) 90 298 P
-0.45 (, it should be possible to build a uniprocessor) 146.38 298 P
-0.45 (-only version of the) 359.45 298 P
2 10 Q
-0.89 (NORMA) 454.93 298 P
0 12 Q
-0.45 ( subsystem) 484.92 298 P
(that eliminates all SMP overhead.) 72 284 T
1 14 Q
(1.4.3.2 Ef\336cient SMP Support) 72 254.67 T
0 12 Q
(The design and implementation of V) 90 235 T
(ersion T) 264.89 235 T
(wo should permit ef) 303.69 235 T
(\336cient operation on shared-) 399.74 235 T
-0.18 (memory multiprocessors including up to 20-30 processors. Locking should be designed to reduce) 72 221 P
(contention.) 72 207 T
(W) 90 189 T
(e assume that all underlying SMP hardware supports atomic access to individual cache) 100.36 189 T
(lines, with a cache line width of at least 32 bits. In other words, it should be possible to read a) 72 175 T
2 10 Q
(long) 72 161 T
0 12 Q
(or smaller quantity while that location is being written, without taking a lock; the reader) 101.98 161 T
(must obtain the old value or the new one but never a result consisting partly of the old value and) 72 147 T
(partly of the new one.) 72 133 T
1 14 Q
(1.4.3.3 Scalability) 72 103.67 T
0 12 Q
-0.06 (The new) 90 84 P
2 10 Q
-0.12 (NORMA IPC) 134.5 84 P
0 12 Q
-0.06 ( must support domains of tens of thousands of nodes, assuming that each) 188.35 84 P
FMENDPAGE
%%EndPage: "4" 13
%%Page: "5" 13
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(5) 535 47.33 T
0 12 Q
(node in the domain has suf) 72 712 T
(\336cient memory to allocate the data structures necessary for communi-) 200.7 712 T
(cating with all current senders and receivers.) 72 698 T
-0.22 (All data structures representing sending and receiving nodes will be allocated dynamically) 90 680 P
-0.22 (, so) 520.79 680 P
(that) 72 666 T
2 10 Q
(NORMA IPC) 92.99 666 T
0 12 Q
( generally does not need to be con\336gured for a speci\336c domain size.) 146.96 666 T
1 14 Q
(1.4.3.4 Multiple T) 72 636.67 T
(ransports) 177.08 636.67 T
2 10 Q
-0.42 (NORMA IPC) 90 617 P
0 12 Q
-0.21 ( supports one software transport interface. That transport may select various lower) 143.55 617 P
-0.21 (-) 536.01 617 P
(level software transports and/or physical media for its connections but none of the details show) 72 603 T
(through to) 72 589 T
2 10 Q
(NORMA) 124.64 589 T
0 12 Q
(. Routing and forwarding issues, if any) 154.62 589 T
(, are entirely in the province of the trans-) 340.39 589 T
(port.) 72 575 T
1 14 Q
(1.5 Deferr) 72 545.67 T
(ed Goals) 132.35 545.67 T
(1.5.1 64-bit and 32-bit Inter) 72 515.67 T
(operability) 236.55 515.67 T
0 12 Q
-0.19 (This phase of the) 90 496 P
2 10 Q
-0.37 (NORMA IPC) 174.52 496 P
0 12 Q
-0.19 ( rewrite project does not generally consider the need to interoper-) 228.12 496 P
(ate within a domain between nodes with dif) 72 482 T
(ferent native word sizes.) 281.31 482 T
1 14 Q
(1.5.2 Differing Page Sizes) 72 452.67 T
0 12 Q
-0.12 (This phase of the) 90 433 P
2 10 Q
-0.24 (NORMA IPC) 174.8 433 P
0 12 Q
-0.12 ( rewrite project does not consider the need to interoperate within) 228.54 433 P
(a domain between nodes with dif) 72 419 T
(fering VM page sizes.) 230.67 419 T
1 14 Q
(1.5.3 Asynchr) 72 389.67 T
(onous VM Faults) 153.76 389.67 T
0 12 Q
(This phase of the) 90 370 T
2 10 Q
(NORMA IPC) 175.27 370 T
0 12 Q
( rewrite project does not include enhancing the VM system to) 229.24 370 T
-0.25 (permit the asynchronous initiation of fault handling. However) 72 356 P
-0.25 (, this feature, as described in \322Asyn-) 366.94 356 P
(chronous V) 72 342 T
(irtual Memory Faults\323 on page) 126.91 342 T
(73, is highly desirable.) 277.81 342 T
1 14 Q
(1.5.4 Untrusted Pagers) 72 312.67 T
0 12 Q
(This phase of the) 90 293 T
2 10 Q
(NORMA IPC) 175.27 293 T
0 12 Q
( rewrite project does not guarantee to support untrusted pagers.) 229.24 293 T
(Although we intend to support untrusted pagers, time may not permit resolving every open issue) 72 279 T
(associated with this problem. In particular) 72 265 T
(, supporting untrusted pagers requires implementing) 273.38 265 T
(asynchronous VM fault handling \050see section 1.5.3\051.) 72 251 T
1 14 Q
(1.5.5 Fault T) 72 221.67 T
(olerance) 146.9 221.67 T
0 12 Q
-0.2 (This draft of the design contains a placeholder) 90 202 P
-0.2 (, Chapter 7, for issues relating to fault tolerance) 310.29 202 P
(and/or fault isolation. However) 72 188 T
(, the \336rst phase of the) 221.41 188 T
2 10 Q
(NORMA IPC) 327.67 188 T
0 12 Q
( rewrite does not consider these) 381.65 188 T
(issues in detail.) 72 174 T
1 14 Q
(1.5.6 Membership Services) 72 144.67 T
0 12 Q
(Determining membership in a cluster is a critical service. However) 90 125 T
(, the \336rst phase of the) 410.61 125 T
2 10 Q
(NORMA IPC) 72 111 T
0 12 Q
( rewrite does not consider these issues in detail. A placeholder \050Chapter 8\051 has been) 125.97 111 T
(left for this portion of the design.) 72 97 T
FMENDPAGE
%%EndPage: "5" 14
%%Page: "6" 14
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(6) 535 47.33 T
1 14 Q
(1.6 Related Documents) 72 710.67 T
0 12 Q
-0.47 (T) 90 691 P
-0.47 (wo documents are essential reading along with this one. One document describes the original) 96.49 691 P
-0.08 (set of requirements imposed on the) 72 677 P
2 10 Q
-0.17 (NORMA IPC) 242.72 677 P
0 12 Q
-0.08 ( rewrite project. The other document describes the) 296.52 677 P
-0.21 (transport interface \050KKT\051 de\336ned for remote procedure calls and bulk data transport between two) 72 663 P
(cooperating kernels.) 72 649 T
2 10 Q
(NORMA IPC) 172.25 649 T
0 12 Q
( relies on the KKT interfaces.) 226.22 649 T
3 F
(NORMA IPC V) 90 631 T
(ersion T) 162.62 631 T
(wo: Requir) 201.38 631 T
(ements) 254.57 631 T
0 F
(. Alan Langerman, editor) 287.88 631 T
(, Open Software Founda-) 408.3 631 T
(tion Research Institute. August, 1993.) 72 617 T
3 F
(Mach Kernel to Kernel T) 90 599 T
(ransport Interface) 209.93 599 T
0 F
(. Open Software Foundation Research Institute.) 297.55 599 T
(January) 72 585 T
(, 1994.) 108.52 585 T
-0.4 (The reader may also \336nd one or more of the following documents useful for understanding the) 90 567 P
(origins and purposes of) 72 553 T
2 10 Q
(NORMA IPC) 187.26 553 T
0 12 Q
(.) 241.23 553 T
3 F
-0.47 (NORMA IPC: A T) 90 535 P
-0.47 (ask-to-T) 175.09 535 P
-0.47 (ask Communication System for Multicomputer Systems) 213.96 535 P
0 F
-0.47 (. Bill Bryant,) 475.77 535 P
(Open Software Foundation Research Institute. September) 72 521 T
(, 1993.) 347.99 521 T
3 F
(A Fast Mach Network IPC Implementation) 90 503 T
0 F
(. Joe Barrera III, Mach II Symposium, Usenix) 296.2 503 T
(Association. November 1991.) 72 489 T
3 F
(Memory Exhaustion V) 90 471 T
(ia Reliable NORMA IPC T) 196.37 471 T
(ransport) 324.3 471 T
0 F
(. Alan Langerman, Open Software) 365.62 471 T
(Foundation Research Institute. February 1993.) 72 457 T
3 F
(A Fast and General Implementation of Mach IPC in a Network) 90 439 T
0 F
(. Hilarie Orman, Mach III) 393.14 439 T
(Symposium, USENIX Association. April 1993.) 72 425 T
3 F
(UNIX File Access and Caching in a Multicomputer Envir) 90 407 T
(onment) 365.38 407 T
0 F
(. Paul Roy) 400.69 407 T
(, Mach III Sympo-) 450.22 407 T
(sium, USENIX Association. April 1993.) 72 393 T
(Dejan\325) 90 375 T
(s task migration papers.) 121.97 375 T
1 14 Q
(1.7 T) 72 345.67 T
(erminology) 101.03 345.67 T
0 12 Q
(Interconnect) 90 326 T
(The hardware medium connecting all nodes in a) 216 326 T
2 10 Q
(NORMA) 449.82 326 T
0 12 Q
( domain.) 479.81 326 T
(Examples include Ethernet and the Intel Paragon mesh.) 216 312 T
(KKT) 90 294 T
(Kernel to Kernel T) 216 294 T
(ransport. The software layer responsible for) 306.5 294 T
(implementing remote procedure call and bulk data transport) 216 280 T
(between cooperating kernels.) 216 266 T
2 10 Q
(NORMA) 90 248 T
0 12 Q
( or) 119.98 248 T
2 10 Q
(NORMA IPC) 135.97 248 T
0 12 Q
(The layer\050s\051 of software responsible for implementing Mach IPC) 216 248 T
(abstractions across a multicomputer or cluster domain. This layer) 216 234 T
(sits between the transport and local Mach IPC.) 216 220 T
2 10 Q
(NORMA IPC Version One) 90 202 T
0 12 Q
(Also, V1 or V) 216 202 T
(ersion One. The \336rst implementation of) 282.62 202 T
2 10 Q
(NORMA IPC) 475.5 202 T
0 12 Q
(.) 529.47 202 T
2 10 Q
-0.77 (NORMA IPC Version Two) 90 184 P
0 12 Q
-0.38 ( Also, V2 or V) 213.62 184 P
-0.38 (ersion T) 281.7 184 P
-0.38 (wo. The design and \050coming\051 implementation) 320.12 184 P
(of) 216 170 T
2 10 Q
(NORMA IPC) 228.99 170 T
0 12 Q
(analyzed in this document.) 288.96 170 T
(Origin node) 90 152 T
(The node on which a receive right is created.) 216 152 T
(Principal port) 90 134 T
(A receive right in) 216 134 T
2 10 Q
(NORMA IPC) 303.26 134 T
0 12 Q
(.) 357.23 134 T
(Proxy port) 90 116 T
(A place holder for a non-local port. The proxy may represent a) 216 116 T
(migrated send or receive right.) 216 102 T
(Queue limit breaking) 90 84 T
(When a message is enqueued on a message queue even though the) 216 84 T
55.8 364.2 64.8 385.22 C
4 14 Q
0 X
0 K
(\321) 55.8 373.22 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 15
%%Page: "7" 15
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(7) 535 47.33 T
0 12 Q
(message queue already has messages enqueued up to its queue) 216 712 T
(limit, the new message \322breaks the queue limit\323.) 216 698 T
(Residence node) 90 680 T
-0.4 (The node on which a receive right currently resides. This node need) 216 680 P
(not be the same as the receive right\325) 216 666 T
(s origin node.) 388.2 666 T
(T) 90 648 T
(ransport) 96.91 648 T
(The layer\050s\051 of software and/or hardware responsible for low-level) 216 648 T
(communications between cooperating kernels. The transport) 216 634 T
(de\336nes RPC and bulk data transport abstractions. See KKT) 216 620 T
(.) 499.26 620 T
4 14 Q
(\321) 90 602 T
0 12 Q
-0.22 (This symbol denotes a paragraph, section or chapter visibly in need) 216 602 P
-0.51 (of additional text or changes to existing text. As the design becomes) 216 588 P
(more concrete, these symbols will refer to smaller portions of text) 216 574 T
(\050e.g., paragraphs or sub-sections rather than chapters\051.) 216 560 T
1 14 Q
(1.8 Roadmap) 72 530.67 T
0 12 Q
(Overview of design document.) 90 511 T
(Y) 90 493 T
(ou may \336nd that, throughout this document, concepts and data structures are used before) 97.46 493 T
(they are de\336ned. W) 72 479 T
(e ask for your patience: please read through the entire document before com-) 164.96 479 T
(menting on areas that would otherwise appear incomprehensible. Y) 72 465 T
(our thoughts on how we can) 394.23 465 T
(improve the or) 72 451 T
(ganization and presentation of this tome are most welcome.) 142.4 451 T
55.8 519.87 64.8 540.89 C
4 14 Q
0 X
0 K
(\321) 55.8 528.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 16
%%Page: "8" 16
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(8) 535 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 2) 72 704 S
0 24 Q
-0.48 (Data T) 180 704 S
-0.48 (ype De\336nitions) 241.38 704 S
0 12 Q
(In this chapter) 90 582 T
(, we summarize the changed and new data structures and data types introduced) 158.13 582 T
-0.22 (by) 72 568 P
2 10 Q
-0.45 (DIPC) 86.77 568 P
0 12 Q
-0.22 (. W) 110.75 568 P
-0.22 (e indicate changes to already-existing data structures by marking the changed \336elds in) 126.89 568 P
(bold face.) 72 554 T
1 14 Q
(2.1 node_name) 72 524.67 T
0 12 Q
(A node name is transport-independent and de\336ned to be of a \336xed length across a) 90 505 T
2 10 Q
(NORMA) 484.04 505 T
0 12 Q
(domain. W) 72 491 T
(e de\336ne a type,) 124.34 491 T
2 10 Q
(node_name) 199.95 491 T
0 12 Q
(, that) 253.92 491 T
2 10 Q
(NORMA) 280.9 491 T
0 12 Q
( uses to contain a node name. This name is) 310.89 491 T
(opaque to) 72 477 T
2 10 Q
(NORMA) 121.96 477 T
0 12 Q
(. The) 151.95 477 T
2 10 Q
(node_name) 179.59 477 T
0 12 Q
( is not used to directly index arrays or otherwise require pre-) 233.56 477 T
(allocation of data structures.) 72 463 T
2 10 Q
(typedef unsigned int) 90 438.33 T
(node_name;) 252 438.33 T
(/* at least 32 bits */) 360 438.33 T
0 12 Q
(The transport is responsible for converting a) 90 409 T
2 10 Q
(node_name) 305.51 409 T
0 12 Q
(, if necessary) 359.48 409 T
(, to whatever transport-) 421.64 409 T
-0.07 (dependent naming information is required. In practice, we de\336ne the) 72 395 P
2 10 Q
-0.14 (node_name) 403.04 395 P
0 12 Q
-0.07 ( as a 32-bit quan-) 457.01 395 P
(tity) 72 381 T
(, allowing over 4 billion nodes in a single) 87.22 381 T
2 10 Q
(NORMA) 289.11 381 T
0 12 Q
( domain. If more routing information is) 319.09 381 T
(required, the transport can use a) 72 367 T
2 10 Q
(node_name) 228.2 367 T
0 12 Q
( as an index, hint or address to \336nd the additional) 282.17 367 T
(information.) 72 353 T
(A) 90 335 T
2 10 Q
(node_name) 101.66 335 T
0 12 Q
( is unique; two dif) 155.63 335 T
(ferent) 242.7 335 T
2 10 Q
(node_name) 273.67 335 T
0 12 Q
( values may not refer to the same node.) 327.64 335 T
(Thus, NORMA may compare two) 72 321 T
2 10 Q
(node_name) 238.55 321 T
0 12 Q
( values for equality) 292.52 321 T
(.) 384.01 321 T
1 14 Q
(2.2 port_id) 72 291.67 T
0 12 Q
(A port identi\336er is a 32-bit quantity that uniquely identi\336es a port created on a given node. A) 90 272 T
2 10 Q
(port_id) 72 258 T
0 12 Q
( by itself is not suf) 113.98 258 T
(\336cient to uniquely identify a port within a) 202.72 258 T
2 10 Q
(NORMA) 405.93 258 T
0 12 Q
( domain.) 435.92 258 T
2 10 Q
(typedef unsigned int) 90 233.33 T
(port_id;) 252 233.33 T
(/* at least 32 bits */) 360 233.33 T
0 12 Q
(However) 90 216 T
(, in conjunction with a) 133.48 216 T
2 10 Q
(node_name) 244.08 216 T
0 12 Q
(, a) 298.05 216 T
2 10 Q
(port_id) 312.37 216 T
0 12 Q
( speci\336es enough information to) 354.35 216 T
-0.35 (uniquely identify a port \050see 2.3\051. W) 72 202 P
-0.35 (e assume that a node always allocates a unique, non-repeating) 243.45 202 P
2 10 Q
(port_id) 72 188 T
0 12 Q
( for each instance of a port. In practice, we are not concerned with the problem of) 113.98 188 T
2 10 Q
(port_id) 72 174 T
0 12 Q
( rollover) 113.98 174 T
(. For details, consult section 4.1, \322Network Port Name\323, on page) 154.29 174 T
(21.) 466.74 174 T
1 14 Q
(2.3 uid_t) 72 144.67 T
0 12 Q
-0.41 (The UID is the network-wide name for a port. It is a 64-bit quantity consisting of a) 90 125 P
2 10 Q
-0.82 (node_name) 483.44 125 P
0 12 Q
(and a) 72 111 T
2 10 Q
(port_id) 100.64 111 T
0 12 Q
(.) 142.62 111 T
2 10 Q
(typedef struct uid {) 90 86.33 T
FMENDPAGE
%%EndPage: "8" 17
%%Page: "9" 17
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(9) 535 47.33 T
2 F
(node_name) 144 713.33 T
(origin;) 252 713.33 T
(/* node that constructed it */) 360 713.33 T
(port_id) 144 701.33 T
(identif) 252 701.33 T
(ier;) 293.98 701.33 T
(/* unique node-relative id */) 360 701.33 T
(} uid_t;) 90 689.33 T
0 12 Q
-0.13 ( A UID is constructed for a port when an associated right \336rst becomes accessible to a remote) 90 654 P
(node. The UID never changes, even when a receive right migrates from one node to another) 72 640 T
(.) 512.64 640 T
(Therefore, it is possible that the) 72 626 T
2 10 Q
(node_name) 226.9 626 T
0 12 Q
( of a receive right\325) 280.86 626 T
(s UID does not match the) 368.79 626 T
2 10 Q
(node_-) 494.04 626 T
(name) 72 612 T
0 12 Q
( of the right\325) 95.99 612 T
(s residence node.) 155.62 612 T
(All UIDs generated by all nodes in the same) 90 594 T
2 10 Q
(NORMA) 305.51 594 T
0 12 Q
( domain have the same size and format.) 335.49 594 T
1 14 Q
(2.4 handle_t) 72 564.67 T
0 12 Q
(The) 90 545 T
2 10 Q
(handle_t) 111.65 545 T
0 12 Q
( is a 32-bit, opaque identi\336er used by the transport to identify an endpoint.) 159.62 545 T
1 14 Q
(2.5 kmsg) 72 515.67 T
0 12 Q
(The) 90 496 T
2 10 Q
(kmsg) 111.65 496 T
0 12 Q
( data structure is de\336ned as follows:) 135.63 496 T
2 10 Q
(typedef struct ipc_kmsg {) 90 465.33 T
(struct ipc_kmsg) 144 453.33 T
(*ikm_next, *ikm_prev;) 252 453.33 T
(vm_size_t) 144 441.33 T
(ikm_size;) 252 441.33 T
(mach_msg_header_t) 144 429.33 T
(ikm_header;) 252 429.33 T
(} *ipc_kmsg_t;) 90 417.33 T
0 12 Q
(The kmsg is de\336ned in this way because the header may be followed by an arbitrary amount) 90 388 T
(of inline message data. Unlike the kmsg de\336ned by V) 72 374 T
(ersion One, this de\336nition is precisely the) 327.83 374 T
(same as that of the non-) 72 360 T
2 10 Q
(NORMA) 186.25 360 T
0 12 Q
( kmsg.) 216.23 360 T
(However) 90 342 T
(, note that we have eliminated kernel support for send noti\336cations in this project.) 133.48 342 T
-0.24 (The send noti\336cation feature has been removed from the Mach speci\336cation, and DIPC is simpler) 72 328 P
(to implement without supporting this feature. Thus,) 72 314 T
2 10 Q
(ipc_marequest_t) 322.19 314 T
0 12 Q
( structure present in the) 412.14 314 T
2 10 Q
(kmsg) 72 300 T
0 12 Q
( in earlier versions of Mach has been eliminated. For details, consult section 1) 95.99 300 T
(1.10.2.3,) 469.62 300 T
(\322MACH_SEND_NOTIFY\323, on page) 72 286 T
(79.) 252.54 286 T
1 14 Q
(2.6 meta_kmsg) 72 256.67 T
0 12 Q
-0.31 (The purpose of the) 90 237 P
2 10 Q
-0.63 (meta_kmsg) 182 237 P
0 12 Q
-0.31 ( is to provide a placeholder for a remote) 235.97 237 P
2 10 Q
-0.63 (kmsg) 427.98 237 P
0 12 Q
-0.31 ( in a port message) 451.97 237 P
(queue. The receiving node will not obtain the real) 72 223 T
2 10 Q
(kmsg) 313.82 223 T
0 12 Q
( until the receiving thread is ready to pro-) 337.81 223 T
(cess it.) 72 209 T
0 10 Q
(1) 104.65 213.8 T
0 12 Q
( Thus, the) 109.64 209 T
2 10 Q
(meta_kmsg) 160.28 209 T
0 12 Q
( contains the necessary information to retrieve a message from a) 214.25 209 T
-0.19 (remote node. However) 72 195 P
-0.19 (, because a port\325) 180.71 195 P
-0.19 (s message queue may contain a mixture of) 258.08 195 P
2 10 Q
-0.38 (meta_kmsg) 463.09 195 P
0 12 Q
-0.19 ( and) 517.06 195 P
2 10 Q
(kmsg) 72 181 T
0 12 Q
( entries, a) 95.99 181 T
2 10 Q
(meta_kmsg) 145.28 181 T
0 12 Q
( must also cleanly overlay a) 199.25 181 T
2 10 Q
(kmsg) 335.82 181 T
0 12 Q
(. The) 359.81 181 T
2 10 Q
(meta_kmsg) 387.45 181 T
0 12 Q
( de\336nition is:) 441.42 181 T
2 10 Q
(typedef struct meta_kmsg {) 90 156.33 T
(struct ipc_kmsg) 144 144.33 T
(*ikm_next, *ikm_prev; /* matches kmsg def */) 252 144.33 T
(vm_size_t) 144 132.33 T
(ikm_size;) 252 132.33 T
(/* matches kmsg def) 360 132.33 T
(inition */) 473.94 132.33 T
72 108 540 123 C
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 105.33 T
0 10 Q
(Logically) 96 101.33 T
(, the receiving NORMA request the real) 133.66 101.33 T
2 F
(kmsg) 296.31 101.33 T
0 F
( in the context of the receiving thread. However) 320.29 101.33 T
(,) 511.13 101.33 T
(the transport may have already buf) 90 89.33 T
(fered the) 228.87 89.33 T
2 F
(kmsg) 266.61 89.33 T
0 F
( on the sender or the receiver) 290.6 89.33 T
(, waiting for the receiver to) 406.21 89.33 T
(request the bytes comprising the) 90 77.33 T
2 F
(kmsg) 221.86 77.33 T
0 F
(.) 245.84 77.33 T
FMENDPAGE
%%EndPage: "9" 18
%%Page: "10" 18
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(10) 530.01 47.33 T
2 F
(mach_msg_bits_t) 144 713.33 T
(msgh_bits;) 252 713.33 T
(/* f) 360 713.33 T
(irst ikm_header f) 383.99 713.33 T
(ield */) 485.93 713.33 T
(handle_t) 144 701.33 T
(ikm_handle;) 252 701.33 T
(/* overlays msgh_size f) 360 701.33 T
(ield */) 497.92 701.33 T
(ipc_port_t) 144 689.33 T
(dest_port;) 252 689.33 T
(/* ... msgh_remote_port */) 360 689.33 T
(} *meta_kmsg_t;) 90 677.33 T
0 12 Q
(W) 90 648 T
(e de\336ne a new bit in the) 100.36 648 T
2 10 Q
(mach_msg_bits_t) 217.95 648 T
0 12 Q
( structure, MACH_MSGH_BITS_MET) 307.9 648 T
(A_K-) 497.82 648 T
(MSG, to distinguish between a) 72 634 T
2 10 Q
(meta_kmsg) 223.25 634 T
0 12 Q
( and the real thing. The de\336nition of unused message) 277.22 634 T
(bits changes accordingly) 72 620 T
(.) 189.8 620 T
(The) 90 602 T
2 10 Q
(ikm_size) 111.65 602 T
0 12 Q
( and) 159.62 602 T
2 10 Q
(ikm_handle) 182.94 602 T
0 12 Q
( \336elds in the) 242.9 602 T
2 10 Q
(meta_kmsg) 304.87 602 T
0 12 Q
( comprise the necessary information) 358.84 602 T
(for retrieving the remote message. The) 72 588 T
2 10 Q
(ikm_size) 260.85 588 T
0 12 Q
( describes the size of the inline) 308.82 588 T
2 10 Q
(kmsg) 459.71 588 T
0 12 Q
( and the) 483.7 588 T
2 10 Q
(ikm_handle) 72 574 T
0 12 Q
( is the transport handle needed to identify the remote data. Once the inline) 131.97 574 T
2 10 Q
(kmsg) 490.04 574 T
0 12 Q
( has) 514.03 574 T
(been obtained, the receiver may walk the inline portion of the message to bring over any remain-) 72 560 T
(ing out-of-line data.) 72 546 T
(The destination port pointer is necessary for two reasons. First, it is necessary for various) 90 528 T
-0.21 (pieces of IPC code to examine a) 72 514 P
2 10 Q
-0.42 (kmsg) 228.06 514 P
0 12 Q
-0.21 (\325) 252.05 514 P
-0.21 (s destination port. For example, moving a port out of a port) 255.38 514 P
(set requires extracting from the port set message queue all) 72 500 T
2 10 Q
(kmsgs) 353.79 500 T
0 12 Q
( \050and now) 383.77 500 T
2 10 Q
(meta_kmsgs\051) 434.73 500 T
0 12 Q
(that) 506.69 500 T
(were bound for the port.) 72 486 T
(Second, the destination port\325) 90 468 T
(s UID is not passed over the wire in the) 227.25 468 T
2 10 Q
(kmsg) 419.78 468 T
0 12 Q
( itself. The UID) 443.77 468 T
(must somehow be retained until the) 72 454 T
2 10 Q
(kmsg) 245.89 454 T
0 12 Q
( arrives and the port pointer can then be stuf) 269.88 454 T
(fed into the) 481.17 454 T
2 10 Q
(kmsg) 72 440 T
0 12 Q
( header) 95.99 440 T
(, where it belongs.) 130.47 440 T
1 14 Q
(2.7 port) 72 410.67 T
0 12 Q
(The port data structure de\336nition dif) 90 391 T
(fers by the addition of pointers to) 264 391 T
2 10 Q
(DIPC) 426.89 391 T
0 12 Q
(- and) 450.88 391 T
2 10 Q
(XMM) 478.19 391 T
0 12 Q
(-speci\336c) 496.18 391 T
(data structures. A bit must also be stolen from the port\325) 72 377 T
(s) 336.17 377 T
2 10 Q
(ipc_object) 343.83 377 T
0 12 Q
(, as described below) 403.8 377 T
(. Lock-) 500.27 377 T
(ing rules change slightly for some of the existing port \336elds.) 72 363 T
2 10 Q
(typedef struct ipc_port {) 90 332.33 T
1 12 Q
(struct ipc_object) 144 320.33 T
(ip_object;) 305.97 320.33 T
5 10 Q
([...]) 144 296.33 T
2 F
(struct ipc_pset) 144 284.33 T
(*ip_pset;) 305.97 284.33 T
(mach_port_seqno_t) 144 272.33 T
(ip_seqno;) 305.97 272.33 T
(/* locked by message queue */) 365.93 272.33 T
5 F
([...]) 144 260.33 T
2 F
(struct ipc_mqueue) 144 248.33 T
(ip_messages;) 305.97 248.33 T
(struct ipc_thread_queue) 144 236.33 T
(ip_blocked;) 305.97 236.33 T
1 12 Q
(#if) 90 223 T
(DIPC) 144 223 T
(struct dipc_port) 144 209 T
(*ip_dipc;) 305.97 209 T
(/* DIPC-speci\336c data */) 360 209 T
(#endif) 90 195 T
(#if) 90 181 T
(NORMA_VM) 144 181 T
(xmm_ipc_port) 144 167 T
(*ip_xmm; /* XMM-speci\336c data */) 305.97 167 T
(#endif) 90 153 T
2 10 Q
(} *ipc_port_t;) 90 140.33 T
2 8 Q
(2) 173.95 144.33 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(2) 90 93.33 T
0 10 Q
(The) 96 89.33 T
2 F
(ipc_port_t) 114.04 89.33 T
0 F
( is now considerably smaller than in the earlier) 174 89.33 T
2 F
(NORMA IPC Version One) 363.59 89.33 T
0 F
( imple-) 489.52 89.33 T
(mentation..) 90 77.33 T
FMENDPAGE
%%EndPage: "10" 19
%%Page: "11" 19
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(11) 530.01 47.33 T
1 14 Q
(2.7.1 No Mor) 72 710.67 T
(e Senders) 150.24 710.67 T
0 12 Q
(W) 90 691 T
(e de\336ne two \337avors of port where before only one existed. One \337avor of port supports all) 100.36 691 T
(semantics) 72 677 T
3 F
(including) 122.3 677 T
0 F
( No More Senders \050NMS\051 detection. The second \337avor of port supports all) 167.61 677 T
(semantics) 72 663 T
3 F
(except) 122.3 663 T
0 F
(NMS detection. The second \337avor does not track send and send-once rights) 155.93 663 T
(throughout the network, thus signi\336cantly reducing the messaging and maintenance cost of port) 72 649 T
-0.12 (migration. Distinguishing between the two \337avors is done by stealing a bit in each port\325) 72 635 P
-0.12 (s) 490.47 635 P
2 10 Q
-0.23 (ipc_ob-) 498.02 635 P
(ject) 72 621 T
0 12 Q
(\325) 95.99 621 T
(s bit\336eld.) 99.32 621 T
1 14 Q
(2.7.2 Locking) 72 591.67 T
0 12 Q
(Basic port and mqueue data structure locking remains unmodi\336ed. The port lock serializes) 90 572 T
-0.33 (access to all of the port\325) 72 558 P
-0.33 (s ordinary \336elds as well as to \336elds in the) 184.62 558 P
2 10 Q
-0.65 (dipc_port) 382.57 558 P
0 12 Q
-0.33 ( extension. However) 436.54 558 P
-0.33 (,) 534.33 558 P
2 10 Q
(DIPC) 72 544 T
0 12 Q
( permits access to a port and message queue from interrupt level in the following restricted) 95.99 544 T
(way) 72 530 T
(.) 91.2 530 T
-0.09 (Interrupt-level) 90 512 P
2 10 Q
-0.19 (DIPC) 162.18 512 P
0 12 Q
-0.09 ( operations take place at a higher priority than TLB shootdowns; hence, a) 186.16 512 P
(TLB shootdown cannot pre-empt interrupt-level) 72 498 T
2 10 Q
(DIPC) 306.17 498 T
0 12 Q
( operations. Furthermore, interrupt-level) 330.16 498 T
2 10 Q
(DIPC) 72 484 T
0 12 Q
( operations may pre-empt thread-context) 95.99 484 T
2 10 Q
(IPC) 294.17 484 T
0 12 Q
( and) 312.16 484 T
2 10 Q
(DIPC) 335.47 484 T
0 12 Q
( operations. Therefore, blindly) 359.46 484 T
(attempting to acquire a port or mqueue lock from interrupt level is out of the question.) 72 470 T
(On the other hand,) 90 452 T
2 10 Q
(DIPC) 182.26 452 T
0 12 Q
( may) 206.25 452 T
3 F
(try) 232.9 452 T
0 F
(to acquire a port or mqueue lock. If the lock is successfully) 249.22 452 T
(acquired, threads obey the locking protocol and stay away from the data structure) 72 438 T
3 F
(.) 462.7 438 T
0 F
(Simultaneous) 468.69 438 T
(instances of interrupt level) 72 424 T
2 10 Q
(DIPC) 202.57 424 T
0 12 Q
( activity obey the modi\336ed protocol and avoid the data structure) 226.56 424 T
(because their lock acquisition attempts fail. Deadlock is avoided. \050See Section 5.4 for a case) 72 410 T
(where interrupt-level port locking is useful.\051) 72 396 T
1 14 Q
(2.8 dipc_port) 72 366.67 T
0 12 Q
(This structure contains the information necessary to extend a local port for remote operations.) 90 347 T
1 F
(typedef struct dipc_port {) 90 321 T
(union {) 144 307 T
(struct {) 171 293 T
(unsigned int) 198 279 T
(dipus_pr) 305.97 279 T
(oxy:1,) 351.74 279 T
(/* port is pr) 414 279 T
(oxy? */) 474.09 279 T
(dipus_special:1,) 305.97 265 T
(/* special lookup */) 414 265 T
(dipus_forward:1,) 305.97 251 T
(/* migrated r) 414 251 T
(ecv right */) 481.07 251 T
(dipus_ms_block:1,) 305.97 237 T
(/* wait for op to end */) 414 237 T
(dipus_ms_convert:1;) 305.97 223 T
(/* msgs in net format */) 414 223 T
(} dip_us;) 171 209 T
(unsigned int) 171 195 T
(dipu_\337ag_bits;) 305.97 195 T
(} dip_u;) 144 181 T
(uid_t) 144 167 T
(dip_uid;) 305.97 167 T
(/* network name */) 414 167 T
(node_name) 144 153 T
(dip_dest_node;) 305.97 153 T
(/* pr) 386.93 153 T
(oxy: r) 411.04 153 T
(esidence node */) 441.13 153 T
(long) 144 139 T
(dip_transit;) 305.97 139 T
(long) 144 125 T
(dip_r) 305.97 125 T
(emote_sorights;) 333.74 125 T
(/*) 144 111 T
( * The following \336elds ar) 144 97 T
(e used by the port hash table. They) 270.06 97 T
( * may only be used under spl.) 144 83 T
FMENDPAGE
%%EndPage: "11" 20
%%Page: "12" 20
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(12) 530.01 47.33 T
1 12 Q
( */) 144 712 T
(ipc_port_t) 144 698 T
(dip_hash) 305.97 698 T
(_next;) 352.63 698 T
(unsigned int) 144 684 T
(dip_r) 305.97 684 T
(ef_count;) 333.74 684 T
(} dipc_port;) 90 670 T
0 F
(This structure is generally governed by the port lock of its parent port structure. Once allo-) 90 638 T
(cated, it is not destroyed until the entire port is freed.) 72 624 T
1 14 Q
(2.9 xmm_ipc_port) 72 594.67 T
0 12 Q
(The following structure contains the information necessary to extend a local port for remote) 90 575 T
2 10 Q
(XMM) 72 561 T
0 12 Q
( operations.) 89.99 561 T
0 10 Q
(3) 145.95 565.8 T
1 12 Q
(typedef struct xmm_ipc_port {) 90 529 T
(long) 144 515 T
(xip_object_r) 305.97 515 T
(efs;) 370.37 515 T
(struct ipc_port) 144 501 T
(*xip_object;) 305.97 501 T
(}) 90 487 T
0 F
(This structure is only allocated when a port represents an object managed by) 90 451 T
2 10 Q
(XMM) 460.06 451 T
0 12 Q
(. This struc-) 478.05 451 T
(ture remains allocated until the entire port is freed.) 72 437 T
1 14 Q
(2.10 thr) 72 407.67 T
(ead) 118.39 407.67 T
0 12 Q
(The thread structure changes slightly if we choose to support the current RPC abort semantic) 90 388 T
(resulting in non-volatile memory) 72 374 T
(. Locking rules for accessing the thread\325) 229.46 374 T
(s IPC-related data struc-) 421.64 374 T
(tures -- the ith_next, ith_prev) 72 360 T
(, ith_state, msize, kmsg, and ith_seqno -- change.) 211.46 360 T
2 10 Q
(struct thread {) 90 335.33 T
5 F
([...]) 144 323.33 T
2 F
(/* IPC data structures */) 144 311.33 T
(struct thread) 144 299.33 T
(*ith_next, *ith_prev;) 305.97 299.33 T
(mach_msg_return_t) 144 287.33 T
(ith_state;) 305.97 287.33 T
(union {) 144 275.33 T
(mach_msg_size_t) 198 263.33 T
(msize;) 305.97 263.33 T
(/* max size for recvd msg */) 360 263.33 T
(struct ipc_kmsg) 198 251.33 T
(*kmsg;) 305.97 251.33 T
(/* received message */) 360 251.33 T
(} data;) 144 239.33 T
(mach_port_seqno_t) 144 227.33 T
(ith_seqno;) 305.97 227.33 T
(/* seqno of recvd message */) 371.93 227.33 T
(struct ipc_kmsg_queue {) 144 203.33 T
(struct ipc_kmsg) 198 191.33 T
(*ikmq_base;) 305.97 191.33 T
(} ith_messages;) 144 179.33 T
5 F
([...]) 144 167.33 T
2 F
(};) 90 155.33 T
0 12 Q
(TBD.) 90 126 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(3) 90 93.33 T
0 10 Q
(If the) 96 89.33 T
2 F
(xmm_ipc_port) 119.86 89.33 T
0 F
(does not expand, it may be preferable to include these \336elds directly in the port) 197.82 89.33 T
(structure to save space.) 90 77.33 T
55.8 396.87 64.8 417.89 C
4 14 Q
0 X
0 K
(\321) 55.8 405.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "12" 21
%%Page: "13" 21
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(13) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 3) 72 704 S
0 24 Q
-0.48 (Message Delivery & Flow Control) 180 704 S
1 14 Q
(3.1 Semantics) 72 580.67 T
0 12 Q
(For) 90 561 T
2 10 Q
(NORMA IPC) 109.66 561 T
0 12 Q
( to succeed, the following cases must be handled correctly) 163.63 561 T
(, some with great) 441.97 561 T
(ef) 72 547 T
(\336ciency:) 81.1 547 T
(M1.  Simple, small inline messages.) 90 529 T
(M2.  Pageout messages containing one or a cluster of pages.) 90 511 T
(M3.  Simple, small inline messages with an interesting \322chunk\323 of OOL data, e.g., disk I/O) 90 493 T
(requests of 256K-1M.) 104.4 479 T
(M4.  Small inline messages containing a very small number of send and/or receive rights.) 90 461 T
(M5.  Arbitrarily complex messages with arbitrarily lar) 90 443 T
(ge inline data, any combination of) 350.27 443 T
(inline and/or OOL send and receive rights, and any amount of OOL data.) 104.4 429 T
-0.33 (Of course, cases M1 - M4 are subsets of case M5. W) 90 411 P
-0.33 (e have accumulated enough experience to) 338.84 411 P
-0.27 (recognize that cases M1 - M4 are interesting scenarios that are very common in an OSF/1 AD sys-) 72 397 P
(tem. Cases M1 - M4 should be handled as ef) 72 383 T
(\336ciently as possible.) 285.64 383 T
1 14 Q
(3.1.1 Ordering) 72 353.67 T
0 12 Q
-0.14 (In all cases,) 90 334 P
2 10 Q
-0.27 (NORMA IPC) 148.88 334 P
0 12 Q
-0.14 ( must obey Mach IPC message ordering semantics. Mach de\336nes mes-) 202.58 334 P
-0.43 (sage ordering only from a single sending thread to a single port; messages from the thread must be) 72 320 P
(received on the port in the same order in which they were sent. T) 72 306 T
(oday) 382.92 306 T
(,) 405.45 306 T
2 10 Q
(NORMA IPC) 411.45 306 T
0 12 Q
( V) 465.42 306 T
(ersion One) 475.75 306 T
(actively alters message order in certain very unusual cases. This behavior is highly undesirable) 72 292 T
(and so V) 72 278 T
(ersion T) 113.31 278 T
(wo should completely preserve message ordering. It is important to note that) 152.1 278 T
-0.21 (Mach IPC makes no guarantee about message ordering with respect to messages originating from) 72 264 P
(dif) 72 250 T
(ferent threads, or with respect to messages sent by the same thread to dif) 85.11 250 T
(ferent ports.) 432.63 250 T
(After a message has been enqueued, further serialization is the responsibility of the receiver) 90 232 T
(.) 529.65 232 T
(Assuming serialization is required, for user) 72 218 T
(-level applications maintaining serialization depends) 278.95 218 T
(on whether the application is multi-threaded. A single-threaded application maintains serializa-) 72 204 T
(tion trivially) 72 190 T
(, as each message will be received in order and only one message at a time will be) 130.86 190 T
(handled.) 72 176 T
(A multi-threaded receiver must work harder to maintain serialization. Threads may be pre-) 90 158 T
(empted at any time, so it is trivially possible for a message received \322later\323 to out-race one) 72 144 T
(received \322earlier) 72 130 T
(.\323 Mach provides a solution for this problem: at the time a message is received,) 150.92 130 T
(the receiver may obtain its unique sequence number) 72 116 T
(. This sequence number can be used by the) 320.82 116 T
(receiver to maintain ordering.) 72 102 T
-0.24 (When receiving messages in the kernel, message ordering is more complex. On a single node,) 90 84 P
FMENDPAGE
%%EndPage: "13" 22
%%Page: "14" 22
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(14) 530.01 47.33 T
0 12 Q
(a user thread requesting a kernel operation has its context \322stolen\323 by the kernel -- the requested) 72 712 T
(operation is carried out using the user thread context rather than a separate kernel context. The) 72 698 T
(result is that, as an implementation artifact, it is impossible for a user thread to generate a second) 72 684 T
(request of the kernel before the \336rst one has completed execution. Hence, trivially) 72 670 T
(, a user thread) 464.92 670 T
(has no way to cause a message ordering problem when sending messages to the kernel.) 72 656 T
-0.13 (A problem arises in the distributed IPC case because there is no way for the receiving node to) 90 638 P
(obtain the sending thread\325) 72 624 T
(s context. The receiver must use a special context, a kserver thread, to) 196.25 624 T
(carry out the sending thread\325) 72 610 T
(s request. Further) 209.23 610 T
(, strict Mach semantics imply that the sending) 292.36 610 T
-0.35 (thread may be released to continue its processing as soon as its message has been enqueued on the) 72 596 P
(receiving port\325) 72 582 T
(s message queue. Thus, in the distributed case, it is now possible for a sending) 142.28 582 T
-0.25 (thread to generate a second request to a kernel before the \336rst request has \336nished executing. This) 72 568 P
(case gives rise to the possibility that two requests generated in order on the sender may be deliv-) 72 554 T
-0.19 (ered in order to the receiver) 72 540 P
-0.19 (\325) 204.37 540 P
-0.19 (s message queue by the IPC subsystem and then handled out of order) 207.7 540 P
(by the kserver threads.) 72 526 T
(If the kernel were implemented to the same rigorous standard demanded of multi-threaded) 90 508 T
(user code, the kernel would maintain ordering anyway after receiving its messages. Unfortu-) 72 494 T
-0.28 (nately) 72 480 P
-0.28 (, in at least one major instance -- XMM -- the kernel does not maintain ordering after receiv-) 100.53 480 P
(ing the messages. The kernel has inherited the old assumption that there is a user context being) 72 466 T
(stolen and has never been recoded to eliminate this assumption.) 72 452 T
(One example of this message ordering problem arises when a VM object is terminated. If the) 90 434 T
-0.24 (object contains modi\336ed pages, they must be returned to the pager) 72 420 P
-0.24 (. Thus, a sequence of memory_-) 387.01 420 P
(object_data_return messages is generated, followed by a \336nal memory_object_terminate mes-) 72 406 T
(sage. The terminate message must be the last message on the port. When the tar) 72 392 T
(get of these) 454.17 392 T
-0.3 (operations is the vnode pager) 72 378 P
-0.3 (, serialization is maintained trivially because our implementations of) 210.89 378 P
-0.07 (the vnode pager bind a memory object to a port set managed by a single thread. A multi-threaded) 72 364 P
(vnode pager would have to use sequence numbers to guarantee that all memory_object_data_re-) 72 350 T
(turn operations were processed before processing the memory_object_terminate message. The) 72 336 T
(default pager services requests in the same way) 72 322 T
(.) 298.7 322 T
(In a DIPC system, with a memory object managed by XMM, a memory_object_data_return) 90 304 T
(followed by a memory_object_terminate will be delivered in order to the receiving port, then) 72 290 T
(picked up by the kernel\325) 72 276 T
(s kserver threads. On an MP) 187.92 276 T
(, kserver threads on separate processors may) 322.48 276 T
-0.36 (race, allowing the memory_object_terminate to be serviced before a memory_object_data_return.) 72 262 P
(On a uniprocessor) 72 248 T
(, the thread that received the last memory_object_data_return might block,) 158.78 248 T
-0.4 (allowing a new kserver thread to pick up and service the memory_object_terminate before the last) 72 234 P
(memory_object_data_return completes.) 72 220 T
(In V) 90 202 T
(ersion One, the message ordering problem was addressed as follows. When a kserver) 110.32 202 T
(thread picks up an incoming message, it marks the associated destination port \050a kernel port, of) 72 188 T
(course\051 as busy) 72 174 T
(. The port remains busy until the kserver thread \336nishes executing the request) 145.16 174 T
(speci\336ed by the incoming message. Other kserver threads are not allowed to pick up subsequent) 72 160 T
(messages destined for the same port until the port is no longer busy) 72 146 T
(.) 394.35 146 T
-0.03 (Ordering for messages sent to the port is maintained in higher) 90 128 P
-0.03 (-level kernel code because only) 385.94 128 P
-0.11 (one message at a time will ever be received and handled from the port. Ef) 72 114 P
-0.11 (fectively) 423.64 114 P
-0.11 (, the kernel has) 464.83 114 P
(been single-threaded with respect to messages received on a single kernel port. \050However) 72 100 T
(, note) 500.84 100 T
(that kserver threads may simultaneously handle separate messages received on separate kserver) 72 86 T
FMENDPAGE
%%EndPage: "14" 23
%%Page: "15" 23
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(15) 530.01 47.33 T
0 12 Q
(ports.\051) 72 712 T
(W) 90 694 T
(e will discuss three possible solutions to this problem.) 100.36 694 T
(A. Use NORMA V) 90 676 T
(ersion One solution. This is our fallback position. It is highly undesirable) 181.27 676 T
(because it severely limits the amount of otherwise-natural parallelism available on kernel-man-) 72 662 T
(aged objects. On the other hand, it\325) 72 648 T
(s easy to implement.) 239.88 648 T
(B. Fix higher) 90 630 T
(-level kernel code to maintain the same message ordering constraints mandated) 153.4 630 T
-0.05 (of multi-threaded user) 72 616 P
-0.05 (-level code. While there is no question that kernel code should be designed) 178.24 616 P
(and implemented with at least the same degree of rigor expected of user code, we are not sure) 72 602 T
(what subsystems besides XMM may be af) 72 588 T
(fected. Although we think the kernel code outside) 274.32 588 T
-0.39 (XMM is likely to be free of this problem, we can\325) 72 574 P
-0.39 (t be sure without \336rst examining all places in the) 307.38 574 P
(kernel that receive messages.) 72 560 T
(For XMM in particular) 90 542 T
(, one solution we have imagined -- an \322operations cache\323 that buf) 200.45 542 T
(fers) 514.65 542 T
-0.47 (incoming message requests to guarantee message ordering -- could break message \337ow control. In) 72 528 P
(the cache we have imagined, when a kserver thread receives a message and drops into XMM,) 72 514 T
-0.02 (XMM immediately enters the requested operation into the operations cache. If the operation is in) 72 500 P
(sequence, it may be carried out immediately) 72 486 T
(. Otherwise, the operation is left in the cache and the) 283.4 486 T
(kserver thread is allowed to return for more message processing.) 72 472 T
(It\325) 90 454 T
(s easy to imagine a scenario where a kserver thread is executing a critical XMM message,) 100.66 454 T
-0.33 (preventing the cache from releasing further messages for execution. Other kserver threads receive) 72 440 P
(incoming XMM messages, check them into the cache, and are then forced to give up, returning) 72 426 T
(for more messages. Thus, there is an unregulated message \337ow control from the receiving port) 72 412 T
(into the operations cache.) 72 398 T
(C. \322Steal\323 calling thread context. Emulate the single-node behavior wherein the kernel) 90 380 T
(\322steals\323 the calling thread context when receiving a message bound for the kernel. User threads) 72 366 T
-0.44 (and certain kernel threads block when sending a message to a kernel port. Rather than wait just for) 72 352 P
(their messages to be enqueued, these threads are forced to wait until their messages have been) 72 338 T
(received and processed by the receiving node\325) 72 324 T
(s kserver threads. Thus, these threads are made) 293.15 324 T
(incapable of generating out-of-order messages. In ef) 72 310 T
(fect, we extend the implicit single-node mes-) 322.57 310 T
(sage ordering assumption to a NORMA domain. This blocking service is provided by DIPC for) 72 296 T
(the use of higher) 72 282 T
(-level code. All user) 152.03 282 T
(-level threads would use this service, and so would certain) 249.05 282 T
(kernel threads.) 72 268 T
(For user threads this model succeeds because, in) 90 250 T
(the local case, the thread context is stolen) 325.49 250 T
-0.37 (and the requested) 72 236 P
-0.37 (operation is carried out immediately) 157.82 236 P
-0.37 (, thus preventing the) 329.45 236 P
-0.37 (thread from ever being) 428.91 236 P
(in the position of generating two) 72 222 T
(messages to be serviced at the same time. This case covers) 231.24 222 T
(all) 515.68 222 T
(non-XMM and non-asynchronous kernel code, as well; much) 72 208 T
(\050most?\051 functionality in the kernel) 369.45 208 T
(is executed in the context) 72 194 T
(of a user thread.) 196.91 194 T
-0.02 (On a case by case analysis, we will determine which kernel) 90 176 P
-0.02 (threads need to employ the DIPC) 377.56 176 P
(context \322stealing\323 facility) 72 162 T
(. By applying this facility only to kernel threads that generate messages) 194.46 162 T
-0.47 (whose order is important, we remove some of the parallelism limitations imposed by the NORMA) 72 148 P
(V) 72 134 T
(ersion One solution of serializing all messages to a kernel port.) 79.33 134 T
-0.35 (In summary) 90 116 P
-0.35 (, to solve the receive-side kernel message ordering problem, we will extend across) 146.5 116 P
(NORMA the notion of stealing the sender) 72 102 T
(\325) 273.64 102 T
(s thread context. The implementation is fairly simple) 276.98 102 T
(and clean and the performance impact is acceptable. Considerable parallelism is maintained but) 72 88 T
FMENDPAGE
%%EndPage: "15" 24
%%Page: "16" 24
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(16) 530.01 47.33 T
0 12 Q
(this solution avoids the need for solving this problem directly in each piece of af) 72 712 T
(fected kernel) 457.53 712 T
(code.) 72 698 T
1 14 Q
(3.1.2 Queue Limits) 72 668.67 T
0 12 Q
(Mach IPC also de\336nes a port queue limit semantic: every port has a queue limit, N, beyond) 90 649 T
(which sending threads should block rather than enqueue their messages. This queue limit is not) 72 635 T
-0.47 (always enforced. Internally) 72 621 P
-0.47 (, the kernel may set a \337ag, MACH_SEND_AL) 201.17 621 P
-0.47 (W) 421.19 621 P
-0.47 (A) 431.18 621 P
-0.47 (YS, on a message, in) 438.74 621 P
(which case the kernel ignores the tar) 72 607 T
(get port\325) 246.97 607 T
(s queue limit when enqueuing the message. In this) 287.28 607 T
-0.2 (instance, we say that the message breaks the queue limit. The following special cases do not obey) 72 593 P
(queue limit semantics:) 72 579 T
(Q1. Asynchronous, kernel-generated messages \050particularly pageout and XMM\051.) 90 561 T
(Q2. Kernel-generated messages using a stolen user thread context \050examples include pagein) 90 543 T
(and some noti\336cations\051.) 104.4 529 T
(Q3. Kernel-generated replies to messages tar) 90 511 T
(geted at the kernel \050e.g., Mach system calls that) 304.93 511 T
(use messages instead of traps\051. These replies originate in the context of a user thread.) 104.4 497 T
(Q4. Noti\336cations:) 90 479 T
(\245 dead name) 104.4 461 T
(\245 message accepted) 104.4 443 T
(\245 no more senders) 104.4 425 T
(\245 port deleted) 104.4 407 T
(\245 port destroyed) 104.4 389 T
(\245 send once) 104.4 371 T
(\245 send timeout) 104.4 353 T
(Messages generated in these cases are enqueued on the tar) 90 335 T
(get port\325) 369.21 335 T
(s message queue without) 409.52 335 T
(regard to the current queue limit. In pathological pageout cases, we have observed 1500 or more) 72 321 T
(pageout messages, each including a page of OOL data, queued to a local pager port. However) 72 307 T
(, in) 521.15 307 T
(the local case, Mach is able to page out pages from pageable zones, double-page pageouts pend-) 72 293 T
-0.06 (ing for an external pager) 72 279 P
-0.06 (, and otherwise take actions that alleviate the ef) 189.16 279 P
-0.06 (fects of essentially unlim-) 415.94 279 P
(ited message queue size. W) 72 265 T
(e point out, however) 203.27 265 T
(, that there is no mechanism that guarantees that) 301.39 265 T
(local Mach IPC won\325) 72 251 T
(t encounter fatal resource exhaustion.) 174.71 251 T
(All other Mach IPC semantics must be preserved, as well. W) 90 233 T
(e call out the above issues) 381.5 233 T
(because they have proven particularly troublesome in the past.) 72 219 T
1 14 Q
(3.2 Flow Contr) 72 189.67 T
(ol) 161.52 189.67 T
0 12 Q
(Many words have been written about \337ow control in a) 90 170 T
2 10 Q
(NORMA) 353.15 170 T
0 12 Q
( domain. Flow control can\325) 383.13 170 T
(t be) 513.16 170 T
(treated as an exclusively transport-to-transport issue. Another mechanism must exist involving) 72 156 T
-0.1 (higher) 72 142 P
-0.1 (-level constructs. Flow control could be implemented with strict CSP synchronization, hav-) 102.4 142 P
(ing the transport block the calling thread until the receiving thread is ready to accept data. Unfor-) 72 128 T
(tunately) 72 114 T
(, it is not easy to restructure Mach IPC to obey strict sender/receiver synchronization. A) 109.86 114 T
(mechanism on top of the transport is necessary to implement \337ow control.) 72 100 T
FMENDPAGE
%%EndPage: "16" 25
%%Page: "17" 25
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(17) 530.01 47.33 T
1 14 Q
(3.2.1 T) 72 710.67 T
(ransport Flow Contr) 111.78 710.67 T
(ol) 235.89 710.67 T
0 12 Q
(The transport is fully \337ow controlled and optimized for) 90 691 T
(sending data between nodes. Associ-) 358.16 691 T
(ated with the transport) 72 677 T
(is a limited resource the kernel can use to further limit) 182.59 677 T
(the amount of data) 445.4 677 T
(sent to a node.) 72 663 T
(The transport is initialized with a number of handles, which) 90 645 T
(are assigned to be \324send\325 or) 379.47 645 T
-0.33 (\324receive\325 handles. This can) 72 631 P
-0.33 (be visualized as a pool of connection endpoints associated) 202.89 631 P
-0.33 (with a class) 482.04 631 P
-0.14 (of service \050a channel\051. In normal operation, a) 72 617 P
-0.14 (kernel would designate a smaller number of receive) 290.01 617 P
-0.42 (handles) 72 603 P
-0.42 (than send handles. When a thread wants to send data to a remote) 111.22 603 P
-0.42 (node, a send handle must) 418.18 603 P
-0.03 (be obtained from the transport. If) 72 589 P
-0.03 (a handle is unavailable, the operation may block \050at the caller) 234.06 589 P
-0.03 (\325) 529.03 589 P
-0.03 (s) 532.36 589 P
(option\051 until one becomes) 72 575 T
(available. This limits the number of send operations that can) 199.92 575 T
(be in) 492.73 575 T
(progress at a time on a channel.) 72 561 T
(When a message is sent to a remote node, the receiving) 90 543 T
(transport must allocate a receive han-) 358.46 543 T
(dle to establish a) 72 529 T
(connection. Currently) 155.28 529 T
(, the transport determines the) 259.1 529 T
(exact algorithm for waiting) 401.66 529 T
(for the handle to become) 72 515 T
(available, but regardless, only a \336nite number of receivers) 194.24 515 T
(will service) 475.69 515 T
(requests on a channel at any given time.) 72 501 T
-0.42 (This provides a \336rst order \337ow control mechanism between) 90 483 P
-0.42 (nodes. If all of the receive handles) 375.05 483 P
(are waiting for slow) 72 469 T
(threads to accept the kmsg and transfer the data, no further) 171.26 469 T
(requests can be) 455.69 469 T
(made to the node on that channel until the) 72 455 T
(channel is released back to the transport.) 276.2 455 T
1 14 Q
(3.2.2 Mach Message Flow) 72 425.67 T
0 12 Q
-0.04 (In this section, we analyze the progress of messages between nodes in an abstract sense, with-) 90 406 P
-0.07 (out concerning ourselves in great detail with the contents of those messages. In the following sec-) 72 392 P
(tion, we analyze the details of message data transfer for cases M1 - M5.) 72 378 T
(Attempting to apply strict sender/receiver synchronization to Mach IPC causes problems in) 90 360 T
-0.19 (the pageout path; for all asynchronous kernel messages where the kernel thread is not expected to) 72 346 P
(block; and for user operations that trigger an IPC as a side-ef) 72 332 T
(fect \050e.g., noti\336cations\051, which may) 363.9 332 T
(introduce unanticipated dependencies \050deadlocks\051 in server and client code. See cases Q1 - Q4) 72 318 T
(\050section 3.1.2\051. Although a CSP-like model would make \337ow control very easy) 72 304 T
(, a Mach imple-) 450.98 304 T
-0.02 (mentation would require solutions for all the issues we just listed. Possibly all of these issues can) 72 290 P
(be overcome, but we suspect this is a very lar) 72 276 T
(ge tar pit.) 289.62 276 T
(Extending the port queue limit semantic to include mandatory queue limits for cases Q1 - Q4) 90 258 T
(has the same problems as strict sender/receiver synchronization.) 72 244 T
0 (Our solution relies on distributed port queues to convert the distributed problems of cases Q1) 90 226 P
(- Q4 into local problems. Thus, the semantic and resource issues associated with these cases will) 72 212 T
(be no worse in the distributed case than they are in the local case. At the same time, a receiving) 72 198 T
(node will be able to prevent resource exhaustion when tar) 72 184 T
(geted by many sending nodes.) 348.57 184 T
-0.02 (Assume for now that the messages under discussion are simple and well-behaved. In general,) 90 166 P
(when sending a message a sender attempts to enqueue its message on the receiver) 72 152 T
(\325) 464.47 152 T
(s message) 467.81 152 T
(queue, directly) 72 138 T
(. The receive right, or principal, has the same queues of pending messages and) 142.5 138 T
(blocked senders found in local IPC. The sender hands the message to the transport, which con-) 72 124 T
(veys it to the receiving node, where the receiving transport hands the message up to) 72 110 T
2 10 Q
(NORMA) 476.37 110 T
0 12 Q
(. The) 506.35 110 T
(sender blocks until the message has been enqueued on the principal\325) 72 96 T
(s message queue. If the prin-) 399.1 96 T
(cipal\325) 72 82 T
(s queue limit is exceeded, the sending thread remains blocked until the principal\325) 98.65 82 T
(s queue) 486.72 82 T
FMENDPAGE
%%EndPage: "17" 26
%%Page: "18" 26
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(18) 530.01 47.33 T
0 12 Q
(drains and the message is \336nally permitted to be enqueued. By \322drains\323, we mean that one or) 72 712 T
-0.19 (more receiving threads remove one or more messages from the queue, thereby permitting an addi-) 72 698 P
(tional message to be enqueued on the principal\325) 72 684 T
(s message queue. \050The mechanism whereby the) 300.17 684 T
(sender remains blocked and retransmits the message or is awakened is an important detail that) 72 670 T
(will be examined later) 72 656 T
(.\051 W) 178.26 656 T
(e understand this model fairly well: it is directly analogous to the way) 198.61 656 T
(in which messages are enqueued for local Mach IPC.) 72 642 T
(However) 90 624 T
(, this simple model is not robust when dealing with queue limit-breaking messages.) 133.48 624 T
(As we have already explained, blocking the sending thread is undesirable in these cases. How-) 72 610 T
(ever) 72 596 T
(, pushing the message onto the principal\325) 92.16 596 T
(s queue gives rise to the resource exhaustion prob-) 288.37 596 T
-0.46 (lems made infamous by) 72 582 P
2 10 Q
-0.92 (NORMA IPC) 187.43 582 P
0 12 Q
-0.46 ( V) 240.48 582 P
-0.46 (ersion One. When a queue limit-breaking message \050one with) 250.35 582 P
(MACH_SEND_AL) 72 568 T
(W) 166.39 568 T
(A) 176.38 568 T
(YS enabled\051 encounters a principal with backlogged messages, we de\336ne) 183.93 568 T
(the correct behavior to be this: the message is enqueued on the local proxy port and the sender is) 72 554 T
-0.28 (permitted to continue. When a queue limit-breaking message encounters a proxy with any queued) 72 540 P
-0.21 (messages, the message is enqueued on the proxy regardless of the state of the principal\325) 72 526 P
-0.21 (s message) 489.12 526 P
(queue. When an ordinary) 72 512 T
(, queue limit-respecting message encounters a proxy with a non-zero) 192.45 512 T
(message queue, the message\325) 72 498 T
(s sender blocks until the queue drains. The principal is always) 211.89 498 T
(responsible for remembering that a blocked proxy exists with pending messages, and then for) 72 484 T
(requesting those messages from the sender when resources become available. Queue limits are) 72 470 T
(enforced as described in the following table.) 72 456 T
(These rules push message queue limit problems back to the sending node, reducing the dis-) 90 320 T
(tributed problem to a local problem. Message ordering is preserved as follows:) 72 306 T
(\245 Local IPC remains unchanged, hence ordering for messages sent from a thread to a co-) 90 288 T
(located port works trivially) 97.2 274 T
(.) 226.67 274 T
-0.36 (\245 No interactions between local and remote threads enqueueing messages matter) 90 256 P
-0.36 (, as Mach IPC) 470.49 256 P
(does not guarantee message ordering between threads.) 97.2 242 T
-0.23 (\245 Remote IPC permits MACH_SEND_AL) 90 224 P
-0.23 (W) 291.6 224 P
-0.23 (A) 301.59 224 P
-0.23 (YS messages to be enqueued immediately) 309.14 224 P
-0.23 (, as in) 509.39 224 P
(the local IPC case. Message ordering between MACH_SEND_AL) 97.2 210 T
(W) 415.41 210 T
(A) 425.4 210 T
(YS messages gener-) 432.95 210 T
(ated by the same thread is maintained by the proxy message queue.) 97.2 196 T
(\245 Ordinary) 90 178 T
(, !MACH_SEND_AL) 139.71 178 T
(W) 244.09 178 T
(A) 254.08 178 T
(YS, messages generated by remote IPC obey Mach mes-) 261.64 178 T
-0.32 (sage ordering because the sending threads are blocked until their messages can be enqueued.) 97.2 164 P
(There is no way for a sending thread to generate a second message until the \336rst one is) 97.2 150 T
(enqueued.) 97.2 136 T
-0.47 (\245 A thread can\325) 90 118 P
-0.47 (t possibly violate message ordering by generating a !MACH_SEND_AL) 160.83 118 P
-0.47 (W) 504.6 118 P
-0.47 (A) 514.59 118 P
-0.47 (YS) 522.15 118 P
(message followed by a MACH_SEND_AL) 97.2 104 T
(W) 304.17 104 T
(A) 314.16 104 T
(YS message, because the thread blocks until) 321.72 104 T
(the \336rst message is enqueued.) 97.2 90 T
(MACH_SEND_AL) 206.37 424 T
(W) 300.76 424 T
(A) 310.75 424 T
(YS) 318.3 424 T
(!MACH_SEND_AL) 348.37 424 T
(W) 446.75 424 T
(A) 456.74 424 T
(YS) 464.3 424 T
(Local IPC) 132 400 T
(Ignore Limit; Always) 204 400 T
(Enqueue Message) 204 386 T
(Obey Limit;) 348 400 T
(Block Sender) 348 386 T
(Remote IPC) 132 364 T
(Obey Remote Limit; But) 204 364 T
(Enqueue Message Locally) 204 350 T
(Obey Remote Limit;) 348 364 T
(Block Sender) 348 350 T
126 439.75 126 342.25 2 L
V
0.5 H
0 Z
N
198 440.25 198 341.75 2 L
V
N
342 440.25 342 341.75 2 L
V
N
486 439.75 486 342.25 2 L
V
N
125.75 440 486.25 440 2 L
V
N
126.25 415.25 485.75 415.25 2 L
V
N
126.25 412.75 485.75 412.75 2 L
V
N
125.75 378 486.25 378 2 L
V
N
125.75 342 486.25 342 2 L
V
N
FMENDPAGE
%%EndPage: "18" 27
%%Page: "19" 27
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(19) 530.01 47.33 T
0 12 Q
-0.14 (\245 A thread can\325) 90 712 P
-0.14 (t possibly violate message ordering by generating a MACH_SEND_AL) 161.83 712 P
-0.14 (W) 504.27 712 P
-0.14 (A) 514.26 712 P
-0.14 (YS) 521.81 712 P
(message followed by a !MACH_SEND_AL) 97.2 698 T
(W) 308.16 698 T
(A) 318.15 698 T
(YS message because the \336rst message is) 325.71 698 T
-0.44 (immediately enqueued and the thread blocks attempting to send the second message until the) 97.2 684 P
(queue drains.) 97.2 670 T
(Besides message ordering, additional bene\336ts derive from this model, as follows. Cases Q2 -) 90 652 T
(Q4 behave from the standpoint of threads as if the IPC were local. Thus, Mach semantics are) 72 638 T
(maintained and resource exhaustion issues reduce to those issues already present in the local IPC) 72 624 T
(case. Unlike V) 72 610 T
(ersion One, \337ow control applies for these messages when sent between nodes, and) 141.61 610 T
(they do not arrive at the receiver faster than the receiver can consume them. V) 72 596 T
(ersion T) 446.01 596 T
(wo will be) 484.81 596 T
(as robust in the distributed case as in the local case when confronted with all cases Q2 - Q4.) 72 582 T
(Port queue limits also become trivial to enforce; if the message would exceed a queue limit,) 90 564 T
-0.18 (and the message being sent is subject to queue limit enforcement, the sender is blocked instead of) 72 550 P
(being permitted to continue.) 72 536 T
1 14 Q
(3.3 Resour) 72 506.67 T
(ce Consumption) 135.48 506.67 T
0 12 Q
(Distributing port message queues, in conjunction with the use of a) 90 487 T
2 10 Q
(meta_kmsg) 410.46 487 T
0 12 Q
( in place of a) 464.43 487 T
2 10 Q
(kmsg) 72 473 T
0 12 Q
(, suf) 95.99 473 T
(\336ces to prevents a node from being overwhelmed with messages originating remotely) 116.42 473 T
(.) 526.36 473 T
(Many messages sent to the same port will back up on the senders\325 nodes, while many messages) 72 459 T
(distributed across many ports will only cause the receiver to consume) 72 445 T
2 10 Q
(meta_kmsg) 408.76 445 T
0 12 Q
( structures.) 462.73 445 T
(Because a) 72 431 T
2 10 Q
(meta_kmsg) 123.28 431 T
0 12 Q
( is small relative to a) 177.25 431 T
2 10 Q
(kmsg) 279.86 431 T
0 12 Q
(, we do not regard) 303.85 431 T
2 10 Q
(meta_kmsg) 393.77 431 T
0 12 Q
( consumption as a) 447.74 431 T
(problem in practice. In addition, the number of) 72 417 T
2 10 Q
(meta_kmsg) 299.84 417 T
0 12 Q
( structures on the node will be limited) 353.81 417 T
(to a maximum number established at boot time. Nonetheless, Mach IPC semantics are main-) 72 403 T
-0.26 (tained, because message ordering is preserved and the sender is decoupled from the receiver) 72 389 P
-0.26 (. \050See) 510.22 389 P
(Chapter 7 for a discussion of the impact of this messaging model on fault tolerant systems.\051) 72 375 T
55.8 495.87 64.8 516.89 C
4 14 Q
0 X
0 K
(\321) 55.8 504.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "19" 28
%%Page: "20" 28
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(20) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 4) 72 704 S
0 24 Q
-0.48 (Message Representation) 180 704 S
0 12 Q
-0.38 (A) 90 582 P
2 10 Q
-0.76 (kmsg) 101.28 582 P
0 12 Q
-0.38 ( has two possible representations: local format and network format. The local format is) 125.27 582 P
(the way in which a Mach message is represented when communicated between two tasks on the) 72 568 T
-0.18 (same node. This format is constructed by the kernel when transferring a message from user) 72 554 P
-0.18 (-mode) 506.54 554 P
(into kernel-mode. When sent of) 72 540 T
(f-node, a local message must eventually be converted into net-) 224 540 T
(work format before transmission. The entities represented in local and network format are:) 72 526 T
(\245 inline data) 90 508 T
(\245 inline port rights \050message header as well as message body\051) 90 490 T
(\245 out-of-line port rights) 90 472 T
(\245 out-of-line memory) 90 454 T
(At message copyin time, local Mach IPC copies the entire inline kmsg from user space into a) 90 436 T
(\050wired\051 kernel buf) 72 422 T
(fer) 159.04 422 T
(. If the message is simple, the algorithm terminates. Otherwise, Mach scans) 171.69 422 T
(the message and converts user references to ports and OOL memory into an internal representa-) 72 408 T
(tion. A port name is converted into a pointer to a port, an) 72 394 T
2 10 Q
(ipc_port_t) 348.15 394 T
0 12 Q
(. An out-of-line memory) 408.11 394 T
(pointer is converted into a pointer to a) 72 380 T
2 10 Q
(vm_map_copy_t) 257.87 380 T
0 12 Q
(, which in turn describes the OOL region.) 335.83 380 T
(W) 72 366 T
(ith the exception of the local and remote ports in the message header) 82.84 366 T
(, the contents of the mes-) 411.45 366 T
(sage remain untouched after the copyin process completes until the message is received.) 72 352 T
(At message copyout time, local Mach IPC reverses the process, translating internal port and) 90 334 T
-0.47 (VM pointers back into user port names and pointers to OOL memory) 72 320 P
-0.47 (. T) 398.2 320 P
-0.47 (ranslation is performed for) 410.63 320 P
(ports in the message header as well as any ports and OOL memory pointers in the message body) 72 306 T
(.) 533.89 306 T
-0.37 (The local IPC copyin path is an appropriate place for converting a message to network format.) 90 288 P
(A message bound for a remote node can be detected easily) 72 274 T
(. All of the necessary information is) 352.32 274 T
(already present, and some economies may be realized by converting the message immediately) 72 260 T
-0.33 (rather than \336rst representing it in local format and later converting it to network format. There can) 72 246 P
(be a race when the message is bound for a remote port that migrates to the local node while the) 72 232 T
(message is being sent, but this race is thought to be rare. It makes no sense to optimize for this) 72 218 T
-0.17 (case. By immediately converting the message, the burden of allocating the resources necessary to) 72 204 P
(send the message is placed directly on the sender) 72 190 T
(. The sender blocks if required resources aren\325) 306.49 190 T
(t) 528.74 190 T
(available.) 72 176 T
(The local IPC copyout path is an appropriate place for converting a message from network) 90 158 T
(format while copying it out to the user) 72 144 T
(. Local format can be avoided.) 255.56 144 T
(By recognizing network-format messages in the copyin and copyout paths, the burden of) 90 126 T
-0.14 (translating messages is placed directly on the senders and receivers of) 72 112 P
2 10 Q
-0.28 (DIPC) 408.52 112 P
0 12 Q
-0.14 ( messages. These enti-) 432.51 112 P
(ties are precisely those that should assume this burden; alternatives such as performing the trans-) 72 98 T
-0.2 (lation in the bowels of) 72 84 P
2 10 Q
-0.41 (DIPC) 181.26 84 P
0 12 Q
-0.2 ( are less desirable because the burden may be shifted from sender and) 205.24 84 P
FMENDPAGE
%%EndPage: "20" 29
%%Page: "21" 29
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(21) 530.01 47.33 T
0 12 Q
(receiver to asynchronous) 72 712 T
2 10 Q
(DIPC) 194.9 712 T
0 12 Q
( threads.) 218.88 712 T
(A fully-converted, network-format) 90 694 T
2 10 Q
(kmsg) 259.86 694 T
0 12 Q
( has the MACH_MSG_NETWORK bit set in its) 283.85 694 T
(header) 72 680 T
(.) 103.3 680 T
1 14 Q
(4.1 Network Port Name) 72 650.67 T
(4.1.1 UID) 72 620.67 T
0 12 Q
(W) 90 601 T
(e retain the existing notion of a) 100.36 601 T
2 10 Q
(DIPC) 252.6 601 T
0 12 Q
( UID as a port identi\336er) 276.58 601 T
(, because a UID provides a) 390.35 601 T
(location-independent way of identifying a port in a) 72 587 T
2 10 Q
(DIPC) 319.16 587 T
0 12 Q
( domain. The existing design of cram-) 343.15 587 T
-0.08 (ming a node number and a unique identi\336er into 32 bits does not have suf) 72 573 P
-0.08 (\336cient bits available for) 423.74 573 P
(future expansion. Thus, we expand the UID to 64 bits, consisting of a 32-bit node identi\336er) 72 559 T
(\050) 72 545 T
2 10 Q
(node_name) 75.99 545 T
0 12 Q
(\051 concatenated with a 32-bit port identi\336er \050) 129.96 545 T
2 10 Q
(port_id) 339.48 545 T
0 12 Q
(\051. \050See section 2.3, \322uid_t\323, on) 381.45 545 T
(page) 72 531 T
(8.\051) 97.64 531 T
-0.2 (When a port is \336rst used by) 90 513 P
2 10 Q
-0.4 (DIPC) 223.52 513 P
0 12 Q
-0.2 (, a) 247.51 513 P
2 10 Q
-0.4 (dipc_port_t) 261.43 513 P
0 12 Q
-0.2 ( is created and assigned to it, optionally con-) 327.4 513 P
(taining a new UID. This UID follows a receive right and all of its send and send-once rights as) 72 499 T
(they migrate throughout the) 72 485 T
2 10 Q
(DIPC) 208.58 485 T
0 12 Q
( domain. Because rights may migrate, to send a message to a) 232.57 485 T
(receive right it is necessary to specify a destination node \050also a) 72 471 T
2 10 Q
(node_name) 380.43 471 T
0 12 Q
(\051 along with a UID.) 434.4 471 T
(Thus, a proxy port contains the UID matching its principal port and a destination) 72 457 T
2 10 Q
(node_name) 462.74 457 T
0 12 Q
(specifying the principal\325) 72 443 T
(s residence node. \050See section 2.8, \322dipc_port\323, on page) 188.59 443 T
(1) 459.38 443 T
(1.\051 A principal) 464.93 443 T
(port need only contain its UID.) 72 429 T
(A UID is assigned to a port for several reasons. Once a UID has been assigned to a port, it) 90 411 T
(remains associated with the port until the port is destroyed.) 72 397 T
1 14 Q
(4.1.1.1 Cr) 72 367.67 T
(eating a dipc_port_t) 130.04 367.67 T
1 11 Q
(1) 250.53 373.27 T
0 12 Q
(Port initialization has two interesting races. In the \336rst, threads on separate processors within) 90 348 T
(the same node may be racing to enter a port into DIPC. For example, this can happen when both) 72 334 T
(threads are trying to migrate dif) 72 320 T
(ferent send rights to the same port. Conceivably) 224 320 T
(, the \336rst thread) 453.07 320 T
(begins initializing the dipc_port extension. The second thread must be forced to synchronize in) 72 306 T
(some way so that the initialization) 72 292 T
3 F
(completes) 239.24 292 T
0 F
( before the second thread is permitted to continue.) 287.2 292 T
(W) 72 278 T
(e solve this race by mandating that, when entering a port into DIPC, the caller must create a) 82.36 278 T
2 10 Q
-0.48 (dipc_port_t) 72 264 P
0 12 Q
-0.24 (, then) 137.96 264 P
3 F
-0.24 (completely) 167.13 264 P
0 F
-0.24 ( initialize it. The caller) 219.09 264 P
-0.24 (\325) 327.51 264 P
-0.24 (s last action must be to grab the port\325) 330.84 264 P
-0.24 (s lock,) 506.16 264 P
(re-check whether the port has been entered into DIPC and, if not, atomically assign the port\325) 72 250 T
(s) 514.68 250 T
(pointer to the) 72 236 T
2 10 Q
(dipc_port) 138.96 236 T
0 12 Q
( structure. The port lock ultimately serializes the initialization race but) 192.93 236 T
(can\325) 72 222 T
(t be held across) 92.43 222 T
2 10 Q
(dipc_port) 169.7 222 T
0 12 Q
( structure initialization. Thus, whenever a port\325) 223.67 222 T
(s) 448.85 222 T
2 10 Q
(dipc_port) 456.51 222 T
0 12 Q
(pointer is non-NULL, it always points to an entirely valid structure.) 72 208 T
(The other interesting case is a race between a local thread entering a port into DIPC and a) 90 190 T
(DIPC thread carrying out a lookup operation for a special port. There are two possible lookup) 72 176 T
(subcases:) 72 162 T
(\245 kernel special port) 90 144 T
(\245 user special port) 90 126 T
(The kernel special port subcase isn\325) 90 108 T
(t a problem because the kernel initializes its special ports) 261.31 108 T
72 84 540 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 81.33 T
0 10 Q
(This section probably belongs elsewhere -- but where?) 96 77.33 T
FMENDPAGE
%%EndPage: "21" 30
%%Page: "22" 30
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(22) 530.01 47.33 T
0 12 Q
(before messages can be received from remote nodes.) 72 712 T
(The user special port subcase is also not a problem. In this instance, the user port is com-) 90 694 T
-0.2 (pletely initialized before ever being entered into the special ports table. Thus, it is not available to) 72 680 P
(a remote inquiry until its state is stable.) 72 666 T
(The only problem, then, is the MP race calling dipc_port_init.) 90 648 T
1 14 Q
(4.1.1.2) 72 618.67 T
(Receive Right UID Assignment) 113.98 618.67 T
0 12 Q
(When creating a send or send-once right from a receive right, to be sent to another node, the) 90 599 T
(port representing the receive right) 72 585 T
(-- the principal -- is assigned a UID so that messages originat-) 237.53 585 T
(ing from a remote send or send-once right may be directed to the principal.) 72 571 T
(When moving a receive right for the \336rst time from its origin node to a new residence node,) 90 553 T
-0.41 (the port is assigned a UID that will follow the receive right forever more. The migration algorithm) 72 539 P
(will eventually leave behind on the origin node a proxy forwarding port, which will retain the) 72 525 T
(UID. \050See section 6.7, \322Receive Right Migration\323, on page) 72 511 T
(53.\051) 358.13 511 T
1 14 Q
(4.1.1.3 Send Right UID Assignment) 72 481.67 T
0 12 Q
-0.44 (A send right inherits its UID from the creating send or receive right. The UID is retained in the) 90 462 P
(proxy port. This UID is sent along with every message so that the receiver may identify the port) 72 448 T
(for which the message is bound.) 72 434 T
1 14 Q
(4.1.1.4 Send-Once Right UID Assignment) 72 404.67 T
0 12 Q
-0.29 (A send-once right inherits its UID from the creating send or receive right. The UID is retained) 90 385 P
-0.16 (in the proxy port. This UID is sent along with every message so that the receiver may identify the) 72 371 P
(port for which the message is bound.) 72 357 T
1 14 Q
(4.1.2 dipc_port_name_table) 72 327.67 T
0 12 Q
(When a port is known, its UID is easy to determine: the UID is stored in the port structure.) 90 308 T
(However) 72 294 T
(, determining the port given a UID requires a lookup table. T) 115.48 294 T
(o store the relationship) 406.76 294 T
(between a) 72 280 T
2 10 Q
(DIPC) 123.28 280 T
0 12 Q
( UID and a port, we de\336ne the) 147.27 280 T
2 10 Q
(dipc_port_name_table) 295.48 280 T
0 12 Q
(. This table consists of) 415.42 280 T
(lists of) 72 266 T
2 10 Q
(ipc_port_t) 107.32 266 T
0 12 Q
( structures, with fast lookup based on UID value. Ports and their associated) 167.29 266 T
(UIDs are entered into the table for several reasons.) 72 252 T
(\245 A principal, of course, must have its UID installed in the) 90 234 T
2 10 Q
(dipc_port_name_table) 372.01 234 T
0 12 Q
( so that) 491.95 234 T
(incoming messages may be delivered.) 72 220 T
-0.31 (\245 A send right proxy must also have its UID installed in the table. A second send right arriving) 90 202 P
(on the same node may then be coalesced with the existing right. Coalescing must be done so that) 72 188 T
-0.15 (all send rights to the same receive right will have the same name. This is accomplished simply by) 72 174 P
(looking up the UID to \336nd the port data structure that already represents the \336rst send right.) 72 160 T
-0.01 (\245 A proxy representing a send-once right need not be entered in the) 90 142 P
2 10 Q
-0.03 (dipc_port_name_table) 414.08 142 P
0 12 Q
-0.01 (.) 534.02 142 P
-0.34 (Send-once rights do not require coalescing. Eliminating send-once rights from the table optimizes) 72 128 P
(the use of send-once rights \050a very common case\051 and substantially reduces the table\325) 72 114 T
(s memory) 480.69 114 T
(requirements.) 72 100 T
0 10 Q
(2) 137.62 104.8 T
0 12 Q
(The) 90 82 T
2 10 Q
(dipc_port_name_table) 111.65 82 T
0 12 Q
( is or) 231.58 82 T
(ganized as a hash table for fast lookup by UID value. The) 255.35 82 T
FMENDPAGE
%%EndPage: "22" 31
%%Page: "23" 31
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(23) 530.01 47.33 T
0 12 Q
-0.34 (table will be or) 72 712 P
-0.34 (ganized as an array of buckets containing linked lists of UIDs that hash to the same) 143.05 712 P
(bucket.) 72 698 T
(The) 90 680 T
2 10 Q
(dipc_port) 111.65 680 T
0 12 Q
( structure contains a reference count used during UID lookup operations.) 165.62 680 T
-0.29 (Because a lookup may happen from interrupt context, it is not possible to directly take a reference) 72 666 P
(on the port itself at that time. The port lock guarding the port\325) 72 652 T
(s reference count may only be) 367.48 652 T
(acquired in thread context. The dip_ref_count \322extends\323 the port reference count for interrupt-) 72 638 T
(level operations.) 72 624 T
(A port must be removed from the port name table before its) 90 606 T
2 10 Q
(dipc_port) 379.12 606 T
0 12 Q
( structure or the port) 433.1 606 T
(itself is destroyed.) 72 592 T
(W) 90 574 T
(e de\336ne the following operations on the) 100.36 574 T
2 10 Q
(DIPC) 293.9 574 T
0 12 Q
( UID table and UIDs: create, install, retrieve,) 317.89 574 T
-0.44 (compare and destroy) 72 560 P
-0.44 (. Before detailing these operations, we \336rst analyze the locking constraints on) 170.25 560 P
(the use of the) 72 546 T
2 10 Q
(dipc_port_name_table) 139.28 546 T
0 12 Q
(.) 259.22 546 T
1 14 Q
(4.1.2.1 T) 72 516.67 T
(able Locking) 122.02 516.67 T
0 12 Q
(The table is locked by a global lock, the) 90 497 T
2 10 Q
(dipc_port_name_table_lock) 284.53 497 T
0 12 Q
(. This lock must) 434.45 497 T
(always be acquired at) 72 483 T
6 10 Q
(splkkt) 178.57 483 T
0 12 Q
(. If lock contention proves to be a problem, the global table lock) 214.55 483 T
(may be split into per) 72 469 T
(-hash chain locks.) 170.37 469 T
-0.07 (The port lock may be held while acquiring the) 90 451 P
2 10 Q
-0.14 (dipc_port_name_table_lock) 314.22 451 P
0 12 Q
-0.07 (. However) 464.14 451 P
-0.07 (, it is) 513.54 451 P
(not possible to \336rst acquire the table lock and then a port lock, because port locks may not be) 72 437 T
(acquired at elevated spl.) 72 423 T
(The table lock governs the contents of the) 90 405 T
2 10 Q
(dipc_port_name_table) 293.85 405 T
0 12 Q
(, the) 413.79 405 T
2 10 Q
(dip_hash_next) 437.44 405 T
0 12 Q
( and) 515.39 405 T
2 10 Q
(dip_ref_count) 72 391 T
0 12 Q
( \336elds in the) 149.96 391 T
2 10 Q
(dipc_port) 211.93 391 T
0 12 Q
( structure, and the UID allocation variables.) 265.9 391 T
1 14 Q
(4.1.2.2 dipc_uid_allocate) 72 361.67 T
0 12 Q
-0.01 (A UID is created when a receive right \336rst enters) 90 342 P
2 10 Q
-0.03 (DIPC) 328.33 342 P
0 12 Q
-0.01 (. Necessarily) 352.32 342 P
-0.01 (, this allocation is relative) 413.48 342 P
(to the current node. An entry in the) 72 328 T
2 10 Q
(dipc_port_name_table) 243.54 328 T
0 12 Q
( is created.) 363.48 328 T
2 10 Q
(dipc_return_t) 144 297.33 T
(dipc_uid_allocate\050) 144 285.33 T
(ipc_port_t) 252 273.33 T
(port\051;) 360 273.33 T
0 12 Q
(Context:) 72 244 T
3 F
(Thr) 252 244 T
(ead) 268.89 244 T
0 F
(Side ef) 72 208 T
(fects:) 105.43 208 T
(- Port\325) 252 208 T
(s) 282.32 208 T
2 10 Q
(dip_uid) 289.98 208 T
0 12 Q
( is set) 331.96 208 T
(- Port is entered into port table) 252 194 T
(Return values:) 72 176 T
(DIPC_SUCCESS) 108 158 T
(operation completed successfully) 252 158 T
(DIPC_DUPLICA) 108 140 T
(TE) 191.95 140 T
(entry already exists in table) 252 140 T
72 120 540 135 C
81 133 225 133 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
-0.09 (2) 90 117.33 P
0 10 Q
-0.11 (Unfortunately) 95.91 113.33 P
-0.11 (, an attempt to send a message using a send-once right that encounters a queue full condition) 151.33 113.33 P
-0.16 (on the remote node must enter the send-once right into the UID table for wakeup processing. The implemen-) 90 101.33 P
(tors may decide whether all rights, including send-once rights, will be entered in the UID table for conve-) 90 89.33 T
(nience. Alternately) 90 77.33 T
(, the send-once right UID could be entered into the table at blocked senders time.) 165.4 77.33 T
FMENDPAGE
%%EndPage: "23" 32
%%Page: "24" 32
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(24) 530.01 47.33 T
0 12 Q
(This routine does not block; therefore, the caller may hold simple locks across this call. This) 90 712 T
(routine raises processor priority to) 72 698 T
6 10 Q
(splkkt) 239.55 698 T
0 12 Q
( and acquires the table lock.) 275.53 698 T
(Depending on how callers serialize, it is possible for two threads to race entering a UID for a) 90 680 T
(port. One thread may discover that a UID has been installed. This thread will receive the DIPC_-) 72 666 T
(DUPLICA) 72 652 T
(TE error status, and should then use the UID installed in the port.) 122.64 652 T
1 14 Q
(4.1.2.3 dipc_uid_install) 72 622.67 T
0 12 Q
(On occasion, it is necessary to add an explicit UID to the current node\325) 90 603 T
(s UID table. This case) 429.75 603 T
(arises when migrating send and receive rights.) 72 589 T
2 10 Q
(dipc_return_t) 144 558.33 T
(dipc_uid_install\050) 144 546.33 T
(ipc_port_t) 198 534.33 T
(port,) 305.97 534.33 T
(uid_t) 198 522.33 T
(uid\051;) 305.97 522.33 T
0 12 Q
(Context:) 72 487 T
3 F
(Thr) 252 487 T
(ead) 268.89 487 T
0 F
(Side ef) 72 469 T
(fects:) 105.43 469 T
(- Port\325) 252 469 T
(s d) 282.32 469 T
2 10 Q
(ip_uid) 295.98 469 T
0 12 Q
( is set) 331.96 469 T
(- Port is entered into port table) 252 455 T
(Return values:) 72 437 T
(DIPC_SUCCESS) 108 419 T
(operation completed successfully) 252 419 T
(DIPC_DUPLICA) 108 401 T
(TE) 191.95 401 T
(entry already exists in table) 252 401 T
(This routine does not block; therefore, the caller may hold simple locks across this call. This) 90 383 T
(routine raises processor priority to) 72 369 T
6 10 Q
(splkkt) 239.55 369 T
0 12 Q
( and acquires the table lock.) 275.53 369 T
(See section 4.1.2.2 for a discussion of DIPC_DUPLICA) 90 351 T
(TE.) 358.5 351 T
1 14 Q
(4.1.2.4 dipc_uid_lookup) 72 321.67 T
0 12 Q
(Retrieve the port based on the UID. Return with a DIPC reference on the) 90 302 T
2 10 Q
(port) 442.73 302 T
0 12 Q
(. The port data) 466.71 302 T
-0.23 (structure is guaranteed to remain available subsequently) 72 288 P
-0.23 (, although the port itself may still become) 338.97 288 P
(dead.) 72 274 T
2 10 Q
(dipc_return_t) 144 249.33 T
(dipc_uid_lookup\050) 144 237.33 T
(dipc_uid) 198 225.33 T
(uid,) 305.97 225.33 T
(ipc_port_t) 198 213.33 T
(*port\051) 305.97 213.33 T
0 12 Q
(Context:) 72 184 T
3 F
(Thr) 252 184 T
(ead or Interrupt) 268.89 184 T
0 F
(Side ef) 72 166 T
(fects:) 105.43 166 T
(-) 252 166 T
2 10 Q
(dip_ref_count) 258.99 166 T
0 12 Q
( is increased by one) 336.95 166 T
(Return values:) 72 148 T
(DIPC_SUCCESS) 108 130 T
(operation completed successfully) 252 130 T
(DIPC_NO_UID) 108 112 T
(no such entry in the table) 252 112 T
(When successful, this operation returns with a pointer to the UID\325) 90 94 T
(s port. However) 406.11 94 T
(, the port) 482.57 94 T
(reference count remains unaltered; only the increased) 72 80 T
2 10 Q
(dip_ref_count) 331.44 80 T
0 12 Q
( prevents the port from) 409.4 80 T
FMENDPAGE
%%EndPage: "24" 33
%%Page: "25" 33
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(25) 530.01 47.33 T
0 12 Q
(being deallocated. Use) 72 712 T
6 10 Q
(dipc_uid_port_reference) 183.91 712 T
0 12 Q
( to adjust the port and) 321.83 712 T
2 10 Q
(dip_ref_count) 429.1 712 T
0 12 Q
( refer-) 507.06 712 T
(ence counts.) 72 698 T
-0.44 (If this function returns DIPC_NO_UID, no such port exists any longer on this node. The caller) 90 680 P
(may infer that the port is dead or dying.) 72 666 T
(The reference acquired by this routine may only be disposed in thread context, as it may be) 90 648 T
(necessary to deallocate the port.) 72 634 T
(This routine raises processor priority to) 90 616 T
6 10 Q
(splkkt) 281.87 616 T
0 12 Q
( and acquires the table lock.) 317.85 616 T
1 14 Q
(4.1.2.5 dipc_uid_port_r) 72 586.67 T
(efer) 211.68 586.67 T
(ence) 234.73 586.67 T
0 12 Q
(After \336nding a port by its UID, the lookup routine leaves a reference on the port\325) 90 567 T
(s) 477.71 567 T
2 10 Q
(dip_ref_-) 485.38 567 T
(count) 72 553 T
0 12 Q
(. As soon as possible, this count should be adjusted, so that the reference exists in terms of) 101.98 553 T
(the port\325) 72 539 T
(s primary reference count. This function decrements the DIPC reference count and incre-) 112.31 539 T
(ments the port\325) 72 525 T
(s reference count.) 143.96 525 T
2 10 Q
(dipc_return_t) 144 500.33 T
(dipc_uid_port_reference\050) 144 488.33 T
(ipc_port_t) 198 476.33 T
(port\051;) 305.97 476.33 T
0 12 Q
(Context:) 72 441 T
3 F
(Thr) 252 441 T
(ead) 268.89 441 T
0 F
(Side ef) 72 423 T
(fects:) 105.43 423 T
(- Port reference count is increased by one) 252 423 T
(-) 252 405 T
2 10 Q
(dip_ref_count) 258.99 405 T
0 12 Q
( is decreased by one) 336.95 405 T
(Return values:) 72 387 T
(DIPC_SUCCESS) 108 369 T
(operation completed successfully) 252 369 T
(This routine does the following:) 90 351 T
(1.  Acquire port lock) 108 333 T
(2.  Increase port reference count) 108 315 T
(3.  Raise priority to) 108 297 T
6 10 Q
(splkkt) 203.95 297 T
0 12 Q
( and acquire table lock) 239.93 297 T
(4.  Decrement) 108 279 T
2 10 Q
(dip_ref_count.) 178.6 279 T
0 12 Q
(5.  Release table lock and lower priority) 108 261 T
(6.  Release port lock) 108 243 T
(The port is guaranteed to exist with a reference count of at least one when this routine com-) 90 225 T
(pletes. However) 72 211 T
(, there is no way to avoid races with port destruction; therefore, a caller of this) 149.45 211 T
(routine should check whether the port is alive before continuing.) 72 197 T
1 14 Q
(4.1.2.6 dipc_uid_r) 72 167.67 T
(emove) 179.04 167.67 T
0 12 Q
(Remove a port from the port name table. This function prevents further access to a port from) 90 148 T
(remote nodes, and so should be called only during port destruction. Note that the port itself, as) 72 134 T
-0.33 (well as the) 72 120 P
2 10 Q
-0.67 (dipc_port) 125.29 120 P
0 12 Q
-0.33 ( extension, may not be destroyed until both the port reference count and the) 179.26 120 P
2 10 Q
(dip_ref_count) 72 106 T
0 12 Q
( have fallen to zero.) 149.96 106 T
2 10 Q
(dipc_return_t) 90 75.33 T
FMENDPAGE
%%EndPage: "25" 34
%%Page: "26" 34
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(26) 530.01 47.33 T
2 F
(dipc_uid_remove\050) 90 713.33 T
(ipc_port_t) 144 701.33 T
(port\051;) 252 701.33 T
0 12 Q
(Context:) 72 672 T
3 F
(Thr) 252 672 T
(ead) 268.89 672 T
0 F
(Side ef) 72 654 T
(fects:) 105.43 654 T
(- The port is removed from the port name table) 252 654 T
(Return values:) 72 636 T
(DIPC_SUCCESS) 108 618 T
(The operation completed successfully) 252 618 T
1 14 Q
(4.1.3 Converting a Port Right\325) 72 588.67 T
(s Name to a UID) 252.59 588.67 T
0 12 Q
(A port right\325) 90 569 T
(s name is converted to a UID by \336rst translating the port right\325) 149.97 569 T
(s name into a) 449.11 569 T
(pointer to the associated port structure and then looking up or creating the port\325) 72 555 T
(s UID. The result-) 452.07 555 T
(ing UID is inserted into the message in place of the original port right name. When preparing a) 72 541 T
(port name to be sent of) 72 527 T
(f-node, additional activities may be required, such as maintaining transit) 182.04 527 T
(count information for no more senders ports. These cases break down as follows:) 72 513 T
(\245 Converting a send right) 90 495 T
(\245 Converting a send-once right) 90 477 T
(\245 Converting a receive right) 90 459 T
1 14 Q
(4.1.4 Converting A Send Right T) 72 429.67 T
(o Network Format) 266.23 429.67 T
0 12 Q
(In general, when converting a send right, the port\325) 90 410 T
(s name in the message is replaced with its) 329.82 410 T
-0.05 (UID. The send right may already be a proxy for a remote receive right, in which case we take the) 72 396 P
(following steps:) 72 382 T
(1.  For a port tagged for no more senders detection, update transit counts.) 108 364 T
(\050May require obtaining more transits.\051 Decrease the local send right) 122.4 350 T
(count by one.) 122.4 336 T
(2.  The port already has a UID assigned, which is used to replace the send) 108 318 T
(right\325) 122.4 304 T
(s name in the message.) 148.39 304 T
(3.  If this is the last send right on this node, clean up any left-over data) 108 286 T
(structures.) 122.4 272 T
(Alternately) 90 254 T
(, the send right may be associated with a local receive right:) 143.18 254 T
(1.  If the port is marked for NMS detection, update transit counts; also,) 108 236 T
(reduce local send right count by one.) 122.4 222 T
(2.  If the receive right has never before been exported to a remote node,) 108 204 T
(assign a new UID to the port.) 122.4 190 T
(3.  Use the port\325) 108 172 T
(s UID to replace the send right\325) 184.95 172 T
(s name in the message.) 335.5 172 T
1 14 Q
(4.1.5 Converting A Send-Once Right T) 72 142.67 T
(o Network Format) 301.98 142.67 T
0 12 Q
-0.35 (In general, when converting a send-once right, the port\325) 90 123 P
-0.35 (s name in the message is replaced with) 353.63 123 P
-0.33 (its UID.) 72 109 P
0 10 Q
-0.28 (3) 110.31 113.8 P
0 12 Q
-0.33 ( As with converting a send right, two cases arise. In the \336rst instance, the send-once right) 115.31 109 P
(may already be a proxy:) 72 95 T
(1.  A UID already exists for this port, which is used to replace the send-) 108 77 T
FMENDPAGE
%%EndPage: "26" 35
%%Page: "27" 35
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(27) 530.01 47.33 T
0 12 Q
(once right\325) 122.4 712 T
(s name in the message; decrease the local send once right) 174.03 712 T
(count by one.) 122.4 698 T
(2.  If the port has no other uses, it may be removed.) 108 680 T
(In the second instance, the send-once right refers to a local receive right:) 90 662 T
(1.  For a port tagged with NMS detection, reduce local send once right) 108 644 T
(count by one and increase count of remote send once rights by one.) 122.4 630 T
-0.17 (2.  If the port has never before been exported, assign a new UID to the port.) 108 612 P
(3.  Use the port\325) 108 594 T
(s UID to replace the send-once right\325) 184.95 594 T
(s name in the mes-) 362.14 594 T
(sage.) 122.4 580 T
1 14 Q
(4.1.6 Converting A Receive Right T) 72 550.67 T
(o Network Format) 282.51 550.67 T
0 12 Q
(Preparing a receive right for remote transmission is a more complex activity than preparing) 90 531 T
(either a send or a send-once right. In this case, it is also necessary to convert to network format) 72 517 T
(any messages queued on the migrating receive right.) 72 503 T
(1.  If the port has never before been exported, assign it a UID.) 108 485 T
-0.04 (2.  W) 108 467 P
-0.04 (alk the local message queue, converting messages to network format.) 133.28 467 P
-0.09 (This process is recursive: a message may contain ports that in turn have) 122.4 453 P
(more queued messages. W) 122.4 439 T
(e don\325) 249.34 439 T
(t expect a recursive walk to be a prob-) 279.43 439 T
(lem in the ordinary case. If absolutely necessary) 122.4 425 T
(, it is possible to code) 352.77 425 T
(this walk in a non-recursive fashion.) 122.4 411 T
(3.  Port becomes \322remote\323 and is marked as \322in-transit\323.) 108 393 T
(4.  Use the port\325) 108 375 T
(s UID to replace the receive right\325) 184.95 375 T
(s name in the message.) 348.14 375 T
(W) 122.4 361 T
(ith untyped IPC, there is suf) 133.24 361 T
(\336cient space between the type descriptor) 267.62 361 T
(\050which has a 32-bit \336eld at the end that can be used\051 and the port name) 122.4 347 T
(\050itself 32 bits\051 to contain the uid_t.) 122.4 333 T
(5.  Side-ef) 108 315 T
(fect: because the port appears to be remote, messages received) 157.41 315 T
-0.5 (on the port between copyin time and actual migration time will be stored) 122.4 301 P
(in network format.) 122.4 287 T
(Thus, during the later phases of receive right migration, all messages involved will already) 90 269 T
(have been converted to network format.) 72 255 T
1 14 Q
(4.2 Converting a Kmsg\325) 72 225.67 T
(s Port Rights to Network Format) 213.73 225.67 T
0 12 Q
-0.14 (On a machine architecture where the size of a UID -- 64 bits -- is less than or equal to the size) 90 206 P
-0.11 (of a port name, conversion should be done in place. The ports in the kmsg header) 72 192 P
-0.11 (, the ports in the) 459.93 192 P
(message body and any out-of-line ports are converted from a port name to a) 72 178 T
2 10 Q
(DIPC) 439.05 178 T
0 12 Q
( UID by \336rst) 463.03 178 T
(looking up the local port and then extracting or constructing the UID. Because the UID is small) 72 164 T
(enough relative to the port name, the port name may be overwritten with the UID.) 72 150 T
-0.03 (Because the size of a UID -- 64 bits -- exceeds the size of a port name /) 90 132 P
2 10 Q
-0.06 (ipc_port_t) 433.82 132 P
0 12 Q
-0.03 ( on some) 493.79 132 P
(architectures, we consider at length the problem of representing ports as UIDs in network-format) 72 118 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(3) 90 93.33 T
0 10 Q
(Consider optimizing send-once right handling for the common RPC case. For instance, DIPC might main-) 96 89.33 T
(tain a cache of ports that only require adding a UID to represent a single send-once right.) 90 77.33 T
55.8 74.98 64.8 96 C
4 14 Q
0 X
0 K
(\321) 55.8 84 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "27" 36
%%Page: "28" 36
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(28) 530.01 47.33 T
0 12 Q
(kmsgs. W) 72 712 T
(e begin by considering the problem of when to convert a port name or ipc_port_t into a) 119.01 712 T
(UID.) 72 698 T
(In an outbound message, ports may be found in the following places:) 90 680 T
(\245 Kmsg header) 90 662 T
(\245 Kmsg body) 90 644 T
(\245 Out-of-line port array) 90 626 T
(These observations apply to send, send-once and receive rights.) 90 608 T
1 14 Q
(4.2.1 Converting Ports In The Message Header) 72 578.67 T
0 12 Q
-0.12 (A Mach message header contains two ports,) 90 559 P
2 10 Q
-0.25 (msgh_local_port) 303.64 559 P
0 12 Q
-0.12 ( and) 393.59 559 P
2 10 Q
-0.25 (msgh_remote_port) 416.65 559 P
0 12 Q
-0.12 (. The) 512.6 559 P
(remote port is always present -- at send time, it is the name of the destination port. The optional) 72 545 T
-0.28 (local port speci\336es the reply port for an RPC. These ports are part of the) 72 531 P
2 10 Q
-0.55 (kmsg) 416.95 531 P
0 12 Q
-0.28 ( header) 440.94 531 P
-0.28 (, as well, and) 475.15 531 P
(must be converted to network format.) 72 517 T
(On those architectures where the size of an) 90 499 T
2 10 Q
(ipc_port_t) 299.15 499 T
0 12 Q
( is less than the size of a) 359.12 499 T
2 10 Q
(uid_t) 478.37 499 T
0 12 Q
(, the) 508.35 499 T
(local port name will be converted to a) 72 485 T
2 10 Q
(uid_t) 256.53 485 T
0 12 Q
( and stored in the message header using the existing) 286.51 485 T
2 10 Q
(msgh_local_port) 72 471 T
0 12 Q
( \336eld plus the next \336eld in the message header) 161.95 471 T
(,) 382.99 471 T
2 10 Q
(msgh_seqno) 388.99 471 T
0 12 Q
(. The sequence) 448.95 471 T
-0.14 (number has no use while a message is in transit. However) 72 457 P
-0.14 (, the receiver must be careful to convert) 347.61 457 P
-0.01 (the local port name\325) 72 443 P
-0.01 (s) 167.58 443 P
2 10 Q
-0.02 (uid_t) 175.23 443 P
0 12 Q
-0.01 ( back to an) 205.21 443 P
2 10 Q
-0.02 (ipc_port_t) 260.47 443 P
0 12 Q
-0.01 ( before stuf) 320.44 443 P
-0.01 (\336ng the sequence number into the) 374.83 443 P
(message header) 72 429 T
(.) 146.93 429 T
-0.42 (The remote port name will be converted to an) 90 411 P
2 10 Q
-0.84 (ipc_port_t) 308.4 411 P
0 12 Q
-0.42 (, and will remain as an) 368.37 411 P
2 10 Q
-0.84 (ipc_port_t) 477.45 411 P
0 12 Q
-0.29 (throughout the message transmission process. The UID of the remote port will be conveyed to the) 72 397 P
-0.38 (tar) 72 383 P
-0.38 (get node out-of-line but along with the) 84.44 383 P
2 10 Q
-0.76 (kmsg) 269.99 383 P
0 12 Q
-0.38 ( proper) 293.98 383 P
-0.38 (. In other words, the UID will be maintained) 327.24 383 P
(as a local variable and eventually handed to the transport as part of the message transmission) 72 369 T
-0.06 (sequence. The receiver will obtain both kmsg \050or) 72 355 P
2 10 Q
-0.12 (meta_kmsg) 309.66 355 P
0 12 Q
-0.06 (\051 and UID from the transport. At the) 363.63 355 P
(time the receiver looks up the tar) 72 341 T
(get UID, it places the resulting) 229.66 341 T
2 10 Q
(ipc_port_t) 379.89 341 T
0 12 Q
( in the) 439.86 341 T
2 10 Q
(kmsg) 472.84 341 T
0 12 Q
( \050or) 496.83 341 T
2 10 Q
(meta_kmsg) 72 327 T
0 12 Q
(\051 header) 125.97 327 T
(.) 164.26 327 T
(Thus, the) 90 309 T
2 10 Q
(kmsg) 137.64 309 T
0 12 Q
( structure needs to expand only to accommodate the UID of the local port.) 161.62 309 T
1 14 Q
(4.2.2 Converting An Inline Port) 72 279.67 T
0 12 Q
(The type descriptor for a port \050in conjunction with the port name\051 is suf) 90 260 T
(\336ciently lar) 432.54 260 T
(ge to con-) 487.29 260 T
-0.25 (tain a 64-bit UID. A port name may be converted in place without requiring the allocation of addi-) 72 246 P
(tional memory) 72 232 T
(.) 141.51 232 T
1 14 Q
(4.2.3 Converting An Inline Port Array) 72 202.67 T
0 12 Q
(Each port in an inline port array has its own type descriptor) 90 183 T
(. The type descriptor \050in conjunc-) 374.14 183 T
(tion with the port name\051 is of suf) 72 169 T
(\336cient size to contain a 64-bit UID. Thus, a port name may be) 229.35 169 T
(converted in-place to a UID without requiring additional memory) 72 155 T
(.) 385.66 155 T
1 14 Q
(4.2.4 Converting An Out-of-Line Port Array) 72 125.67 T
0 12 Q
(An array of OOL ports is an array of 32-bit port names, which must be converted to 64-bit) 90 106 T
(UIDs. The local IPC copyin path already expects to allocate wired kernel memory to contain the) 72 92 T
-0.26 (ipc_port_t\325) 72 78 P
-0.26 (s resulting from copying in the message\325) 124.64 78 P
-0.26 (s out-of-line port array\050s\051. W) 317.62 78 P
-0.26 (e simply increase) 454.51 78 P
FMENDPAGE
%%EndPage: "28" 37
%%Page: "29" 37
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(29) 530.01 47.33 T
0 12 Q
(the size of the intended memory allocation so that the resulting region is lar) 72 712 T
(ge enough to contain) 433.88 712 T
(UIDs rather than port names /) 72 698 T
2 10 Q
(ipc_port_t) 217.89 698 T
0 12 Q
(\325) 277.86 698 T
(s. After the names have been copied in from the user) 281.19 698 T
-0.13 (task, the port array is walked) 72 684 P
3 F
-0.13 (backwar) 212.76 684 P
-0.13 (ds) 253.62 684 P
0 F
-0.13 ( to convert each name to its UID. Thus, the names can be) 264.28 684 P
(expanded in place, using the same buf) 72 670 T
(fer to \336rst copyin the port names and then convert them to) 254.65 670 T
(network format.) 72 656 T
(Note that this behavior matches the behavior of local IPC, which already allocates \050wired\051) 90 638 T
(kernel memory when copying in port arrays. Additionally) 72 624 T
(, by converting all ports at the outset,) 348.36 624 T
(control \337ow is simpli\336ed and) 72 610 T
2 10 Q
(DIPC) 215.6 610 T
0 12 Q
( need not support on-the-\337y UID conversion, UID conversion) 239.58 610 T
(buf) 72 596 T
(fers, or other constructs.) 87.77 596 T
1 14 Q
(4.3 Out-of-Line Memory) 72 566.67 T
0 12 Q
(Representing out-of-line memory carried in a message must meet the following constraints:) 90 547 T
(1.  The memory must always be pageable, except for that portion actively) 108 529 T
(being processed by the transport.) 122.4 515 T
(2.  Memory must be represented in such a way that it can be conveyed) 108 497 T
(quickly from node to node.) 122.4 483 T
(3.  The representation of OOL memory must be compact.) 108 465 T
(4.  Ideally) 108 447 T
(, copyin processing should produce only one representation of) 155.52 447 T
(OOL memory) 122.4 433 T
(.) 189.24 433 T
1 14 Q
(4.3.1 Analysis of Copy-On-W) 72 403.67 T
(rite Semantics) 246.27 403.67 T
0 12 Q
(When moving OOL data, Mach de\336nes the semantic as a logical copy) 90 384 T
(. Modi\336cations by the) 424.98 384 T
(receiver to the received data should not be visible to the sender) 72 370 T
(. Similarly) 373.44 370 T
(, modi\336cations by the) 423.31 370 T
(sender to the buf) 72 356 T
(fer containing the sent data should not be visible to the receiver) 152.06 356 T
(. In practice, this) 455.51 356 T
-0.47 (semantic is implemented by copy-on-write \050COW\051 processing. Unfortunately) 72 342 P
-0.47 (, COW processing is) 439.63 342 P
(expensive.) 72 328 T
-0.13 (In V) 90 310 P
-0.13 (ersion One, most message send operations avoided COW processing because the sending) 110.19 310 P
(thread blocked until the associated OOL data was sent to the receiving node -- and the data were) 72 296 T
(always sent immediately) 72 282 T
(. Because the sender was blocked until the receiving node obtained the) 189.81 282 T
(data, it was not necessary to mark OOL data for COW) 72 268 T
(.) 331.69 268 T
(However) 90 250 T
(, blindly sending the data is precisely the worst behavior with respect to best system) 133.48 250 T
(performance and overall robustness. In V) 72 236 T
(ersion T) 269.17 236 T
(wo, the data will generally stay on the sending) 307.97 236 T
(node until the receiving) 72 222 T
3 F
(thr) 188.59 222 T
(ead) 202.14 222 T
0 F
( \050not node\051 accepts the data. W) 219.46 222 T
(e cannot block the sender waiting) 367.37 222 T
(for the receiving thread, so it becomes necessary to mark the sender) 72 208 T
(\325) 397.51 208 T
(s data COW -- in some cir-) 400.85 208 T
(cumstances. The following analysis details the cases in which COW processing may be avoided.) 72 194 T
(The cases are broken down based on Mach IPC features.) 72 180 T
1 14 Q
(4.3.1.1 RPC) 72 150.67 T
0 12 Q
(For the sending side of a remote procedure call, COW processing may be avoided. The send-) 90 131 T
(ing thread is blocked until the receiving thread responds, so any OOL data contained in the send-) 72 117 T
(er) 72 103 T
(\325) 81.76 103 T
(s message may be left volatile. T) 85.1 103 T
(o identify remote procedure calls, we introduce the) 241.82 103 T
(MACH_RPC_MSG bit in the message header) 72 89 T
(. This bit can be set by the programmer or by MIG.) 292.21 89 T
FMENDPAGE
%%EndPage: "29" 38
%%Page: "30" 38
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(30) 530.01 47.33 T
0 12 Q
(An important special case exists when an RPC is aborted. If the RPC is aborted while still in) 90 712 T
(the send-side processing, no further consideration need be given to the state of OOL memory) 72 698 T
(.) 517.89 698 T
-0.21 (However) 72 684 P
-0.21 (, if the RPC is aborted on the receive-side, it is necessary to \336x all OOL memory regions) 115.48 684 P
(in the kmsg being sent to be COW) 72 670 T
(, if the kmsg has not already been sent of) 236.47 670 T
(f-node. Otherwise, it) 432.77 670 T
(may be possible for the sending thread to modify OOL data before the data are completely sent.) 72 656 T
(\050See section 5.1) 72 642 T
(1, \322Aborted Message Send\323, on page) 147.83 642 T
(48.\051) 328.36 642 T
1 14 Q
(4.3.1.2 Device Operations) 72 612.67 T
0 12 Q
-0.49 (While device operations may be asynchronous, we nevertheless de\336ne all device operations as) 90 593 P
-0.3 (operating on volatile memory for the duration of the operation. T) 72 579 P
-0.3 (o avoid COW processing, device) 380.28 579 P
(operations implemented as Mach message calls will be converted to system call traps as part of) 72 565 T
(the V) 72 551 T
(ersion T) 96.98 551 T
(wo project.) 135.78 551 T
(The system call traps avoid performing COW manipulations of the speci\336ed OOL regions.) 90 533 T
(Each trap is responsible for packaging its requested operation as a message and then feeding the) 72 519 T
(message into the IPC system without triggering COW activity) 72 505 T
(.) 369.05 505 T
1 14 Q
(4.3.1.3 Asynchr) 72 475.67 T
(onous Message W) 164.25 475.67 T
(ith Deallocate) 270.49 475.67 T
0 12 Q
(Any OOL memory sent with the deallocation option need not be marked COW because the) 90 456 T
(memory is no longer visible to the sender) 72 442 T
(.) 270.21 442 T
1 14 Q
(4.3.1.4 Asynchr) 72 412.67 T
(onous Message W) 164.25 412.67 T
(ith Flush) 270.49 412.67 T
0 12 Q
(Setting the \337ush option on a message \050see \322Message Flush Bit\323 on page) 90 393 T
(61\051 causes the send-) 437.45 393 T
(ing thread to block until the receiving thread has accepted the message. In this instance, OOL) 72 379 T
-0.18 (memory will arrive on the receiver before the sending thread could possibly modify it. Therefore,) 72 365 P
(there is no need to mark the OOL memory sent in a \337ush message as COW) 72 351 T
(. Note that this behav-) 431.65 351 T
(ior is nearly equivalent to the V) 72 337 T
(ersion One behavior) 222.57 337 T
(, where the sending thread blocked until the) 319.34 337 T
(data was sent of) 72 323 T
(f-node.) 148.72 323 T
1 14 Q
(4.3.1.5 All Other Asynchr) 72 293.67 T
(onous Messages) 224.88 293.67 T
0 12 Q
(All remaining asynchronous messages must have their OOL memory regions marked for) 90 274 T
(COW so that the sender) 72 260 T
(\325) 187.03 260 T
(s modi\336cations to those regions do not become visible to the receiver) 190.36 260 T
(.) 521.83 260 T
1 14 Q
(4.3.2 OOL Repr) 72 230.67 T
(esentation) 168.14 230.67 T
0 12 Q
-0.2 (Out-of-line memory regions will be represented by existing) 90 211 P
2 10 Q
-0.41 (vm_map_copy_t) 376.82 211 P
0 12 Q
-0.2 ( technology) 454.78 211 P
-0.2 (, with) 510.09 211 P
-0.31 (the modi\336cation that all ool memory regions \050including an ool port region\051 will be linked together) 72 197 P
-0.13 (at copyin time. By linking all regions together) 72 183 P
-0.13 (, the message does not need to be walked again dur-) 291.82 183 P
-0.24 (ing the transmission processes. Message walking will be con\336ned to two places: copyin and copy-) 72 169 P
(out processing.) 72 155 T
1 14 Q
(4.4 Receiving a Network Format Message) 72 125.67 T
0 12 Q
-0.05 (The local Mach IPC copyout path is modi\336ed to understand network format messages, which) 90 106 P
(can be detected by examining the MACH_MSG_NETWORK bit in the message header) 72 92 T
(. The) 492.7 92 T
(copyout path walks the inline kmsg, converting ports and ool regions as they are encountered.) 72 78 T
FMENDPAGE
%%EndPage: "30" 39
%%Page: "31" 39
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(31) 530.01 47.33 T
1 14 Q
(4.4.1 Converting A UID T) 72 710.67 T
(o A Port Right Name) 225.4 710.67 T
0 12 Q
0 (A UID is generally converted to a port right name by looking up the UID in the norma_port_-) 90 691 P
(table to \336nd an existing port or by creating a new port. For a port with NMS detection enabled, it) 72 677 T
(is necessary to maintain transit count information.) 72 663 T
(The resulting port is translated into a right name and inserted into the message in place of the) 90 645 T
(existing UID.) 72 631 T
1 14 Q
(4.4.1.1 Receiving A Send Right) 72 601.67 T
0 12 Q
([TBD]) 90 582 T
1 14 Q
(4.4.1.2 Receiving A Send-Once Right) 72 552.67 T
0 12 Q
([TBD]) 90 533 T
1 14 Q
(4.4.1.3 Receiving A Receive Right) 72 503.67 T
0 12 Q
([TBD]) 90 484 T
1 14 Q
(4.4.2 Converting A Network Format Kmsg\325) 72 454.67 T
(s Port Rights) 331.46 454.67 T
(4.4.2.1 Converting Ports In The Kmsg Header) 72 424.67 T
0 12 Q
(The destination port has already been converted from a UID to an ipc_port_t by the time the) 90 405 T
(message reaches the copyout logic. The normal copyout logic takes over) 72 391 T
(, replacing the port) 419.59 391 T
(pointer in the message header with a port right name.) 72 377 T
(The reply port must be converted from a UID to a port right name.) 90 359 T
1 14 Q
(4.4.2.2 Converting An Inline Port) 72 329.67 T
0 12 Q
-0.31 (The copyout path walks the entire kmsg, converting all inline port UIDs into port right names,) 90 310 P
(following the rules outlined for receiving rights in section 4.4.1,  page) 72 296 T
(31.) 410.78 296 T
1 14 Q
(4.4.2.3 Converting An Inline Port Array) 72 266.67 T
0 12 Q
(Each port in an inline port array has its own type descriptor) 90 247 T
(. The type descriptor \050in conjunc-) 374.14 247 T
(tion with the space allocated for the port name\051 contains the 64-bit UID. The UID may be con-) 72 233 T
(verted to a port right name and the new name overwrites the original UID.) 72 219 T
1 14 Q
(4.4.2.4 Converting An Out-of-Line Port Array) 72 189.67 T
0 12 Q
(When the copyout path recognizes an out-of-line port array) 90 170 T
(, it kallocs suf) 373.66 170 T
(\336cient memory to) 440.73 170 T
(hold the out-of-line memory region created by the copyin path. Copyout then invokes the neces-) 72 156 T
(sary) 72 142 T
2 10 Q
(DIPC) 94.98 142 T
0 12 Q
( logic to obtain the region from the sending node. Copyout then walks the port array) 118.97 142 T
(,) 521.92 142 T
-0.11 (forwards, converting each UID into an) 72 128 P
2 10 Q
-0.22 (ipc_port_t) 259.52 128 P
0 12 Q
-0.11 (and overwriting each UID with the resulting) 325.26 128 P
2 10 Q
(ipc_port_t) 72 114 T
0 12 Q
(. The copyout path then frees up the remaining kalloc\325d memory) 131.97 114 T
(. The array of) 440.63 114 T
2 10 Q
(ipc_port_t) 72 100 T
0 12 Q
( entries is then fed to the existing copyout logic that converts it into an array of port) 131.97 100 T
(names and maps it into the user) 72 86 T
(\325) 223.68 86 T
(s address space.) 227.01 86 T
55.8 698.98 64.8 720 C
4 14 Q
0 X
0 K
(\321) 55.8 708 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "31" 40
%%Page: "32" 40
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(32) 530.01 47.33 T
1 14 Q
(4.4.3 Receiving Out-of-Line Memory) 72 710.67 T
0 12 Q
(When the copyout path recognizes an out-of-line memory object, it invokes the necessary) 90 691 T
2 10 Q
(DIPC) 72 677 T
0 12 Q
( logic to receive an out-of-line region from the sending node \050see chapter 5\051. The data are) 95.99 677 T
(received directly into the receiving task\325) 72 663 T
(s address space.) 264.85 663 T
FMENDPAGE
%%EndPage: "32" 41
%%Page: "33" 41
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(33) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 5) 72 704 S
0 24 Q
-0.48 (Message T) 180 704 S
-0.48 (ransmission) 279.42 704 S
0 12 Q
(This chapter describes the mechanics of transmitting a) 90 582 T
2 10 Q
(DIPC) 353.81 582 T
0 12 Q
( message between kernels. This) 377.79 582 T
(encompasses all of the activities that occur between when the sending thread \336nishes converting) 72 568 T
(the message to network format on the sending node and when the receiving thread begins to con-) 72 554 T
(vert the message from network format to local format on the receiving node. The format conver-) 72 540 T
(sions themselves are described in Chapter 4. For clarity of presentation, the transmission of port) 72 526 T
(rights and out of line port arrays are discussed elsewhere \050see chapter 4\051.) 72 512 T
1 14 Q
(5.1 Overview) 72 482.67 T
0 12 Q
(The basic sequence of operations for transferring a) 90 463 T
2 10 Q
(DIPC) 336.45 463 T
0 12 Q
( message between kernels is:) 360.44 463 T
(1.  The sending thread calls) 108 445 T
6 10 Q
(KKT_SEND_CONNECT) 242.9 445 T
0 12 Q
( to send the) 338.85 445 T
2 10 Q
(kmsg) 396.81 445 T
0 12 Q
( to the) 420.8 445 T
(receiving node.) 122.4 431 T
(2.  The transport implementation of) 108 413 T
6 10 Q
(KKT_SEND_CONNECT) 281.56 413 T
0 12 Q
( invokes the) 377.5 413 T
6 10 Q
(deliver) 122.4 399 T
0 12 Q
(upcall on the receiving node with information about the) 170.37 399 T
2 10 Q
(kmsg) 440.52 399 T
0 12 Q
(being sent, but not the contents of the) 122.4 385 T
2 10 Q
(kmsg) 305.29 385 T
0 12 Q
( itself. The information is) 329.27 385 T
(placed in a) 122.4 371 T
2 10 Q
(meta_kmsg) 177.35 371 T
0 12 Q
( which is then placed on a delivery queue.) 231.32 371 T
(3.  The) 108 353 T
2 10 Q
(DIPC) 144.64 353 T
0 12 Q
( implementation of the) 168.63 353 T
6 10 Q
(deliver) 280.56 353 T
0 12 Q
( upcall invokes a thread that) 322.54 353 T
-0.12 (retrieves the) 122.4 339 P
2 10 Q
-0.25 (meta_kmsg) 184.1 339 P
0 12 Q
-0.12 ( from the delivery queue and enqueues it on the) 238.07 339 P
(receiving port\325) 122.4 325 T
(s message queue.) 192.68 325 T
(4.  Completion of the) 108 307 T
2 10 Q
(meta_kmsg) 213.28 307 T
0 12 Q
( enqueue releases the sending thread to) 267.25 307 T
(continue execution by replying with) 122.4 293 T
6 10 Q
(KKT_CONNECT_REPLY) 298.62 293 T
0 12 Q
(.) 399.02 293 T
-0.25 (5.  The receiving thread dequeues this) 108 275 P
2 10 Q
-0.5 (meta_kmsg) 291.45 275 P
0 12 Q
-0.25 (, extracts the information) 345.42 275 P
(it contains \050including the size of the) 122.4 261 T
2 10 Q
(kmsg) 297.29 261 T
0 12 Q
(\051, and frees the) 321.27 261 T
2 10 Q
(meta_kmsg) 395.54 261 T
0 12 Q
(.) 449.51 261 T
(6.  The receiving thread allocates the memory required to hold the) 108 243 T
2 10 Q
(kmsg) 428.09 243 T
0 12 Q
(,) 452.08 243 T
-0.27 (and calls) 122.4 229 P
6 10 Q
-0.55 (KKT_REQUEST) 169.88 229 P
0 12 Q
-0.27 (with a) 241.29 229 P
3 F
-0.27 (r) 273.39 229 P
-0.27 (eceive) 277.61 229 P
0 F
-0.27 ( request to receive the) 307.57 229 P
2 10 Q
-0.55 ( kmsg) 411.72 229 P
0 12 Q
-0.27 (into) 446.61 229 P
-0.46 (this memory) 122.4 215 P
-0.46 (. The DIPC_FORMA) 181.46 215 P
-0.46 (T bit is set in this) 282.82 215 P
2 10 Q
-0.92 (kmsg) 366.03 215 P
0 12 Q
-0.46 (to indicate that) 395.09 215 P
(it is in network format.) 122.4 201 T
(7.  Completion of) 108 183 T
2 10 Q
(kmsg) 195.62 183 T
0 12 Q
( transmission on the sending node invokes the) 219.61 183 T
(upcall speci\336ed in the) 122.4 169 T
2 10 Q
(request_block) 230.33 169 T
0 12 Q
( ar) 308.29 169 T
(gument to) 320.39 169 T
6 10 Q
(KKT_SEND_CON-) 371.7 169 T
(NECT) 122.4 155 T
0 12 Q
(; this upcall causes the) 145.73 155 T
2 10 Q
(kmsg) 256.65 155 T
0 12 Q
( on the sending node to be freed by an) 280.64 155 T
(internal thread.) 122.4 141 T
-0.15 (8.  Completion of) 108 123 P
2 10 Q
-0.3 (kmsg) 195.03 123 P
0 12 Q
-0.15 (reception on the receiving node invokes the upcall) 224.71 123 P
(speci\336ed in the receive) 122.4 109 T
2 10 Q
(request_block) 235.64 109 T
0 12 Q
( ar) 313.6 109 T
(gument to) 325.7 109 T
6 10 Q
(KKT_REQUEST) 377.01 109 T
0 12 Q
(on) 448.97 109 T
(the receiving node; this upcall causes the receiving thread to continue) 122.4 95 T
(execution \050it will proceed to convert the) 122.4 81 T
2 10 Q
(kmsg) 317.26 81 T
0 12 Q
( from network format to) 341.24 81 T
FMENDPAGE
%%EndPage: "33" 42
%%Page: "34" 42
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(34) 530.01 47.33 T
0 12 Q
(local format\051.) 122.4 712 T
(This sequence of operations is used to successfully send a) 90 694 T
2 10 Q
(kmsg) 370.47 694 T
0 12 Q
( that does not contain receive) 394.45 694 T
-0.01 (rights, out of line memory) 72 680 P
-0.01 (, or out of line port arrays. Other cases cause the sequence to change in) 196.77 680 P
(the following ways:) 72 666 T
(\245 If the) 108 648 T
2 10 Q
(kmsg) 143.84 648 T
0 12 Q
( is short, the transport may deliver the entire kmsg instead of) 167.82 648 T
(just information about it. Among other things, this obviates the need for) 115.2 634 T
(the receiver to retrieve the) 115.2 620 T
2 10 Q
(kmsg) 244.08 620 T
0 12 Q
( from the remote node.) 268.07 620 T
(\245 If there is a waiting receiver) 108 602 T
(, the) 249.59 602 T
2 10 Q
(meta_kmsg) 273.24 602 T
0 12 Q
( \050or) 327.22 602 T
2 10 Q
(kmsg) 347.2 602 T
0 12 Q
( in the previous) 371.18 602 T
(case\051 may be delivered directly to the receiver) 115.2 588 T
(, bypassing the port\325) 336.19 588 T
(s mes-) 433.47 588 T
(sage queue.) 115.2 574 T
-0.36 (\245 The enqueue operation may fail because the port doesn\325) 108 556 P
-0.36 (t exist or has been) 380.19 556 P
(migrated to another node. The reason for the failure is returned to the) 115.2 542 T
(sender as the result of) 115.2 528 T
6 10 Q
(KKT_SEND_CONNECT) 222.78 528 T
0 12 Q
(, and changes the sender) 317.84 528 T
(\325) 435.18 528 T
(s) 438.52 528 T
(behavior) 115.2 514 T
(.) 156.51 514 T
(\245 The enqueue operation may fail because the port\325) 108 496 T
(s queue is full or) 352.01 496 T
(because the receiving node does not have the resources to complete the) 115.2 482 T
-0.32 (enqueue operation successfully) 115.2 468 P
-0.32 (. In addition to returning the reason for the) 263.67 468 P
-0.04 (failure to the sender) 115.2 454 P
-0.04 (, the receiving node is obligated to notify the sending) 210.2 454 P
(node when the conditions are right to retry the operation.) 115.2 440 T
(\245 If the) 108 422 T
2 10 Q
(kmsg) 143.84 422 T
0 12 Q
( is longer than one page, it may not be possible to transfer the) 167.82 422 T
(entire message using the above sequence of operations. This is because) 115.2 408 T
-0.11 (each page of the message requires a separate physical memory descriptor) 115.2 394 P
-0.33 (which implies the pages are wired. The implementation limits the amount) 115.2 380 P
(of wired memory consumed by any send/receive operation.) 115.2 366 T
(\245 If the kmsg contains one or more receive rights, regions of out of line) 108 348 T
(memory) 115.2 334 T
(, or out of line port arrays, additional interactions between the) 154.39 334 T
(sending node and receiving thread are required to transfer these entities.) 115.2 320 T
(In this case, the interactions will often involve an internal thread on the) 115.2 306 T
(sending node.) 115.2 292 T
-0.29 (The rest of this chapter describes additional details in the basic transfer sequence, followed by) 90 274 P
(the various modi\336cations. The complete description of receive right transfer can be found in) 72 260 T
(Chapter 6.7.) 72 246 T
1 14 Q
(5.2 Message T) 72 216.67 T
(ransfer Details) 155.3 216.67 T
0 12 Q
(This section describes implementation details of the basic message transfer sequence pre-) 90 197 T
(sented in the previous section.) 72 183 T
1 14 Q
(5.2.1 Deliver Upcall) 72 153.67 T
0 12 Q
(The deliver upcall has two ar) 90 134 T
(guments of interest: the) 229.34 134 T
3 F
(handle) 345.27 134 T
0 F
( and the) 377.91 134 T
3 F
(transmit) 418.88 134 T
0 F
( structure. The) 458.87 134 T
(basic course of action is to acquire a) 72 120 T
2 10 Q
(meta_kmsg) 249.19 120 T
0 12 Q
(, place the relevant information into it, and) 303.16 120 T
(enqueue it on a kmsg delivery queue. A service thread will awaken, dequeue the) 72 106 T
2 10 Q
(meta_kmsg) 460.36 106 T
0 12 Q
(, ver-) 514.33 106 T
(ify the port, and deliver the) 72 92 T
2 10 Q
(meta_kmsg) 205.57 92 T
0 12 Q
( to the appropriate port queue.) 259.54 92 T
FMENDPAGE
%%EndPage: "34" 43
%%Page: "35" 43
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(35) 530.01 47.33 T
0 12 Q
(A) 90 712 T
2 10 Q
(meta_kmsg) 101.66 712 T
0 12 Q
( is allocated from a non-pageable zone; if one is not available, a resource short-) 155.63 712 T
(age error is returned to the sender) 72 698 T
(.) 232.53 698 T
(The UID of the destination port is transmitted in the) 90 680 T
2 10 Q
(transmit->endpoint.) 342.51 680 T
0 12 Q
(The destination) 456.45 680 T
-0.21 (port is located by looking up the UID in the UID table. If the lookup operation fails, the operation) 72 666 P
(terminates and the sender is informed of the error) 72 652 T
(.) 308.49 652 T
(The destination port, the) 90 634 T
3 F
(handle) 210.26 634 T
0 F
(, and) 242.9 634 T
2 10 Q
(transmit->size) 269.22 634 T
0 12 Q
( are entered into \336elds of the) 353.17 634 T
2 10 Q
(meta_k-) 493.4 634 T
(msg) 72 620 T
0 12 Q
( to be enqueued on that port. The initial) 89.99 620 T
2 10 Q
(transmit->size) 282.53 620 T
0 12 Q
( ar) 366.49 620 T
(gument is always the size of the) 378.59 620 T
-0.12 (inline kmsg that was transmitted. Using the) 72 606 P
3 F
-0.12 (handle) 282.38 606 P
0 F
-0.12 (, the receiver is able to request the inline kmsg) 315.02 606 P
(and determine how much more, if any) 72 592 T
(, of the kmsg needs to be transferred.) 254.08 592 T
(Enqueuing a) 90 574 T
2 10 Q
(meta_kmsg) 153.29 574 T
0 12 Q
( on a port queue is done from thread context as the appropriate locks) 207.26 574 T
(must be acquired \336rst, hence the) 72 560 T
6 10 Q
(deliver) 230.22 560 T
0 12 Q
( upcall hands the) 272.19 560 T
2 10 Q
(meta_kmsg) 356.14 560 T
0 12 Q
( of) 410.11 560 T
(f to a) 422.88 560 T
6 10 Q
(dipc_mes-) 450.52 560 T
-0.67 (sage_deliver) 72 546 P
0 12 Q
-0.33 ( thread for the enqueue operation. This thread veri\336es that the destination port may) 143.96 546 P
-0.06 (accept messages and proceeds to enqueue the) 72 532 P
2 10 Q
-0.13 (meta_kmsg) 292.35 532 P
0 12 Q
-0.06 ( on the port. The standard function used) 346.32 532 P
(to enqueue a kmsg is) 72 518 T
6 10 Q
(ipc_mqueue_send) 175.6 518 T
0 12 Q
(. This routine will be split into two routines:) 265.55 518 T
6 10 Q
(ipc_m-) 480.11 518 T
-0.21 (queue_send) 72 504 P
0 12 Q
-0.1 ( and) 131.97 504 P
6 10 Q
-0.21 (ipc_mqueue_deliver) 155.07 504 P
0 12 Q
-0.1 (. For local IPC,) 262.35 504 P
6 10 Q
-0.21 (ipc_mqueue_send) 338.56 504 P
0 12 Q
-0.1 ( performs the port veri-) 428.51 504 P
(\336cation function, and) 72 490 T
6 10 Q
(ipc_mqueue_deliver) 177.27 490 T
0 12 Q
( actually enqueues the message. For a) 285.21 490 T
2 10 Q
(meta_kmsg) 469.07 490 T
0 12 Q
(,) 523.04 490 T
(the delivery thread veri\336es the port and then uses) 72 476 T
6 10 Q
(ipc_mqueue_deliver) 310.83 476 T
0 12 Q
( to enqueue the) 418.77 476 T
2 10 Q
(meta_k-) 494.71 476 T
-0.72 (msg) 72 462 P
0 12 Q
-0.36 (. Once the enqueue completes, this thread invokes) 89.99 462 P
6 10 Q
-0.72 (KKT_CONNECT_REPLY) 330.28 462 P
0 12 Q
-0.36 ( to indicate this fact to) 432.22 462 P
(the sending node.) 72 448 T
-0.02 (There is one case in which the) 90 430 P
2 10 Q
-0.05 (meta_kmsg) 238.05 430 P
0 12 Q
-0.02 ( will not be enqueued on the destination port\325) 292.02 430 P
-0.02 (s mes-) 509.04 430 P
(sage queue. If the destination port is in a port set, then the enqueue takes place on the port set\325) 72 416 T
(s) 522.68 416 T
(message queue.) 72 402 T
1 14 Q
(5.2.1.1 Enqueueing to a kernel port) 72 372.67 T
0 12 Q
(If the destination port\325) 90 353 T
(s receiver is the kernel, then the) 196.93 353 T
2 10 Q
(meta_kmsg) 352.14 353 T
0 12 Q
( is enqueued on a special) 406.11 353 T
2 10 Q
(dipc_kernel) 72 339 T
0 12 Q
( port. Each node has exactly one) 137.96 339 T
2 10 Q
(dipc_kernel) 296.51 339 T
0 12 Q
( port, created at boot time. One or) 362.47 339 T
(more) 72 325 T
6 10 Q
(dipc_kserver) 99.64 325 T
0 12 Q
( threads execute in\336nite loops receiving messages from the) 171.6 325 T
2 10 Q
(dipc_kernel) 457.73 325 T
0 12 Q
(port and executing the requested kernel operations. Although it is referred to as a port, the behav-) 72 311 T
(ior of the) 72 297 T
2 10 Q
(dipc_kernel) 118.97 297 T
0 12 Q
( port more closely approximates a port set; port queue limits for various) 184.93 297 T
(kernel ports are respected, and service threads queue up on the) 72 283 T
2 10 Q
(dipc_kernel) 375.07 283 T
0 12 Q
( port. These threads) 441.04 283 T
(block in the usual way \050i.e., in) 72 269 T
6 10 Q
(ipc_mqueue_receive) 219.9 269 T
0 12 Q
(\051 when there are no messages on this port.) 327.84 269 T
(The existence of multiple) 90 251 T
6 10 Q
(dipc_kserver) 215.25 251 T
0 12 Q
( threads opens up the possibility of messages bound) 287.21 251 T
-0.1 (for kernel ports to be processed out of order) 72 237 P
-0.1 (, as discussed in Section 3.1.1. The details of the solu-) 281.19 237 P
(tion to this problem will be presented in Section 5.10.) 72 223 T
1 14 Q
(5.2.2 Dequeuing a Meta-Kmsg) 72 193.67 T
0 12 Q
-0.39 (A) 90 174 P
2 10 Q
-0.77 (meta_kmsg) 101.27 174 P
0 12 Q
-0.39 ( is dequeued like any other kmsg in) 155.24 174 P
6 10 Q
-0.77 (ipc_mqueue_receive) 325.37 174 P
0 12 Q
-0.39 (. The receiving thread) 433.31 174 P
(immediately checks to see if this is a) 72 160 T
2 10 Q
(meta_kmsg) 251.22 160 T
0 12 Q
(, and calls a synchronous version \050wrapper\051 of) 305.19 160 T
6 10 Q
(KKT_RECEIVE) 72 146 T
0 12 Q
( to retrieve the actual) 137.96 146 T
2 10 Q
(kmsg) 242.21 146 T
0 12 Q
( \050including allocating memory for it\051. The destination) 266.2 146 T
(port is copied from the) 72 132 T
2 10 Q
(meta_kmsg) 184.26 132 T
0 12 Q
( to the) 238.23 132 T
2 10 Q
(kmsg) 271.21 132 T
0 12 Q
(. Control \337ow then returns to) 295.2 132 T
6 10 Q
(ipc_mqueue_re-) 437.45 132 T
(ceive) 72 118 T
0 12 Q
(.) 101.98 118 T
FMENDPAGE
%%EndPage: "35" 44
%%Page: "36" 44
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(36) 530.01 47.33 T
1 14 Q
(5.3 Short kmsg transfer) 72 710.67 T
0 12 Q
-0.3 (If the kmsg is short, the transport may decide to deliver the entire kmsg as part of the) 90 691 P
6 10 Q
-0.6 (deliver) 495.32 691 P
0 12 Q
(upcall instead of providing information about it. This results in the following sequence of opera-) 72 677 T
(tions:) 72 663 T
(1.  The sending thread calls) 108 645 T
6 10 Q
(KKT_SEND_CONNECT) 242.9 645 T
0 12 Q
( to send the) 338.85 645 T
2 10 Q
(kmsg) 396.81 645 T
0 12 Q
( to the) 420.8 645 T
(receiving node.) 122.4 631 T
(2.  The transport implementation of) 108 613 T
6 10 Q
(KKT_SEND_CONNECT) 281.56 613 T
0 12 Q
( invokes the) 377.5 613 T
6 10 Q
(deliver) 122.4 599 T
0 12 Q
(upcall on the receiving node with the contents of the) 170.37 599 T
2 10 Q
(kmsg) 424.86 599 T
0 12 Q
(.) 448.85 599 T
-0.34 (3.  The) 108 581 P
2 10 Q
-0.68 (DIPC) 143.62 581 P
0 12 Q
-0.34 ( implementation of the) 167.61 581 P
6 10 Q
-0.68 (deliver) 278.18 581 P
0 12 Q
-0.34 ( upcall allocates a) 320.16 581 P
2 10 Q
-0.68 (kmsg) 407.4 581 P
0 12 Q
-0.34 ( from a) 431.38 581 P
(non-pageable zone and initializes it with the delivered contents. The) 122.4 567 T
-0.31 (network format bit is set in this) 122.4 553 P
2 10 Q
-0.62 (kmsg) 273.14 553 P
0 12 Q
-0.31 (. The) 297.13 553 P
2 10 Q
-0.62 (kmsg) 324.15 553 P
0 12 Q
-0.31 ( is then handed of) 348.14 553 P
-0.31 (f to the) 431.96 553 P
6 10 Q
-1.15 (dipc_message_deliver) 122.4 539 P
0 12 Q
-0.58 ( thread which will enqueue it on the destination) 242.33 539 P
(port.) 122.4 525 T
-0.29 (4.  Completion of the) 108 507 P
2 10 Q
-0.58 (kmsg) 211.84 507 P
0 12 Q
-0.29 ( enqueue releases the sending thread to continue) 235.82 507 P
-0.28 (execution;) 122.4 493 P
6 10 Q
-0.56 (KKT_SEND_CONNECT) 175.08 493 P
0 12 Q
-0.28 ( provides a return value that the data was) 271.03 493 P
(sent and the sending thread frees the) 122.4 479 T
2 10 Q
(sent) 299.93 479 T
(kmsg) 326.91 479 T
0 12 Q
(.) 350.9 479 T
-0.26 (The resulting kmsg is then treated like any other kmsg that was delivered from a remote node.) 90 461 P
-0.27 (In particular) 72 447 P
-0.27 (, this means that if the kmsg contains other data \050e.g., out of line data\051, the kmsg itself) 130.19 447 P
(can still be delivered using this optimized path.) 72 433 T
1 14 Q
(5.4 Dir) 72 403.67 T
(ect Message Delivery at Interrupt Level) 112.94 403.67 T
0 12 Q
(In one important instance, it is possible to deliver an incoming) 90 384 T
2 10 Q
(kmsg) 392.49 384 T
0 12 Q
( or) 416.47 384 T
2 10 Q
( meta_kmsg) 429.46 384 T
0 12 Q
(directly) 495.42 384 T
-0.44 (from interrupt level, without resorting to the use of a) 72 370 P
6 10 Q
-0.89 (dipc_message_deliver) 323.05 370 P
0 12 Q
-0.44 ( thread. If a blocked) 442.98 370 P
-0.11 (receiver exists, the message may be delivered directly into the thread without observing the usual) 72 356 P
(port protocols. That is because the existence of a blocked receiver is suf) 72 342 T
(\336cient to guarantee the) 416.51 342 T
(\322liveness\323 of the port, and further implies that no queue limit violation can result.) 72 328 T
(From interrupt level, then, it is possible for) 90 310 T
2 10 Q
(DIPC) 299.21 310 T
0 12 Q
( to check port state and deliver an incoming) 323.2 310 T
-0.35 (message directly to a waiting thread or to a message queue. In extraordinary circumstances --) 72 296 P
3 F
-0.35 (e.g.) 517.04 296 P
0 F
-0.35 (,) 534.35 296 P
(should the lock acquisition attempt fail or the port turn out to be dead -- the incoming message) 72 282 T
(will be enqueued to an auxiliary thread context responsible for handling all possible message) 72 268 T
(delivery cases.) 72 254 T
3 F
2 K
([TBD: describe mqueue locking.]) 90 236 T
([TBD: This text does not belong her) 90 218 T
(e. The service thr) 262.79 218 T
(ead is guaranteed to run - it must be) 345.62 218 T
-0.08 (stack privileged and pr) 72 204 P
-0.08 (epar) 182.23 204 P
-0.08 (ed to cope with r) 203.77 204 P
-0.08 (esour) 283.61 204 P
-0.08 (ce shortages. If delivering a message will block) 309.82 204 P
(due to insuf\336cient r) 72 190 T
(esour) 164.51 190 T
(ces, an err) 190.71 190 T
(or value will be r) 241.23 190 T
(eturned to the sending thr) 323.41 190 T
(ead on the r) 446.89 190 T
(emote) 504.08 190 T
(machine in the) 72 176 T
7 10 Q
(KKT_CONNECT_REPLY) 145.62 176 T
3 12 Q
( mechanism.]) 247.56 176 T
1 14 Q
0 K
(5.4.1 *) 72 146.67 T
8 F
(deliver) 110.48 146.67 T
1 F
( Interrupt Pseudo Code) 149.34 146.67 T
2 10 Q
(if \050there is a waiting thread AND) 144 128.33 T
( the inline parameter is set AND) 144 116.33 T
( a kmsg is available to put the data into\051 {) 144 104.33 T
(Receive the data into the kmsg;) 198 92.33 T
(awaken the thread;) 198 80.33 T
FMENDPAGE
%%EndPage: "36" 45
%%Page: "37" 45
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(37) 530.01 47.33 T
2 F
(KKT_CONNECT_REPLY\050DIPC_SUCCESS\051;) 198 713.33 T
(return;) 198 701.33 T
(}) 144 689.33 T
(/*) 144 677.33 T
( * Failed fast path: wake up a service thread) 144 665.33 T
( */) 144 653.33 T
(Allocate meta_kmsg;) 144 641.33 T
(Record handle, size, and destination port;) 144 629.33 T
(Awaken service thread;) 144 617.33 T
1 14 Q
(5.4.2 Interrupt Delivery) 72 588.67 T
0 12 Q
(This is discussed in detail elsewhere in the document and is only mentioned here for com-) 90 569 T
(pleteness. While it is highly desirable to deliver a) 72 555 T
2 10 Q
(kmsg) 311.84 555 T
0 12 Q
( during the initial transport interrupt) 335.83 555 T
3 F
(*deliver) 72 541 T
0 F
( call, interrupt-level delivery is only an optimization. For correctness, it must always be) 111.3 541 T
(possible to deliver a) 72 527 T
2 10 Q
(meta_kmsg) 171.27 527 T
0 12 Q
( or) 225.24 527 T
2 10 Q
(kmsg) 241.23 527 T
0 12 Q
( from a thread context.) 265.21 527 T
1 14 Q
(5.5 Enqueue Failur) 72 497.67 T
(es) 186.43 497.67 T
0 12 Q
-0.04 (Enqueueing a) 90 478 P
2 10 Q
-0.09 (meta_kmsg) 158.53 478 P
0 12 Q
-0.04 ( or) 212.5 478 P
2 10 Q
-0.09 (kmsg) 228.4 478 P
0 12 Q
-0.04 ( delivered by) 252.39 478 P
2 10 Q
-0.09 (DIPC) 317.87 478 P
0 12 Q
-0.04 ( may fail because the port does not exist,) 341.86 478 P
-0.04 (exists but is dead, or has migrated to another node. In all three cases, the enqueue does not occur) 72 464 P
-0.04 (,) 534.05 464 P
-0.14 (and an error code is returned via) 72 450 P
6 10 Q
-0.27 (KKT_CONNECT_REPLY) 229.25 450 P
0 12 Q
-0.14 ( to indicate what happened. In the case of a) 331.19 450 P
(migrated port, the destination node may use the second return code in) 72 436 T
6 10 Q
(KKT_CONNECT_REPLY) 408.76 436 T
0 12 Q
( to) 510.71 436 T
(send back information about the new location of the port. This new location information will be) 72 422 T
(cached by the sending node.) 72 408 T
1 14 Q
(5.6 Port Queue Full) 72 378.67 T
0 12 Q
-0.05 (When an enqueue operation determines that a port\325) 90 359 P
-0.05 (s message queue is full, the corresponding) 334.48 359 P
(sender is blocked via a callback mechanism. This involves the following sequence of events:) 72 345 T
-0.18 (1.  The receiving node records the sender) 108 327 P
-0.18 (\325) 305.03 327 P
-0.18 (s node number in a callback map) 308.36 327 P
-0.49 (data structure linked to the port. The transport is responsible for de\336ning) 122.4 313 P
(and accessing this data structure.) 122.4 299 T
(2.  A return code is provided to) 108 281 T
6 10 Q
(KKT_CONNECT_REPLY) 260.89 281 T
0 12 Q
( \050and hence returned) 362.84 281 T
-0.28 (from) 122.4 267 P
6 10 Q
-0.56 (KKT_SEND_CONNECT) 148.43 267 P
0 12 Q
-0.28 (\051 indicating that the sending thread must block) 244.38 267 P
(until the receiving node allows the send to be retried.) 122.4 253 T
-0.24 (3.  The sender marks the port remote blocked and does local queue full pro-) 108 235 P
(cessing. If the kmsg is marked) 122.4 221 T
2 10 Q
(MACH_SEND_ALWAYS) 271.3 221 T
0 12 Q
(, it will be enqueued) 367.24 221 T
-0.37 (on the port and the thread will continue; else, the thread will queue itself) 122.4 207 P
(on the port\325) 122.4 193 T
(s blocked send queue and sleep.) 177.7 193 T
(4.  When a space becomes available in the receiver) 108 175 T
(\325) 352.89 175 T
(s message queue, the) 356.23 175 T
(receiver retrieves a node from the callback map data structure, and) 122.4 161 T
(sends an RPC to that node.) 122.4 147 T
(5.  The RPC causes a norma service thread to try to send all of the queued) 108 129 T
(messages on the port. After the kmsg queue is drained, the port is) 122.4 115 T
(unblocked and any blocked senders will be awakened.) 122.4 101 T
-0.05 (6.  The response to this RPC indicates whether there will be a forthcoming) 108 83 P
FMENDPAGE
%%EndPage: "37" 46
%%Page: "38" 46
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(38) 530.01 47.33 T
0 12 Q
(send operation. A blocked sender may not be released if its message) 122.4 712 T
(operation was aborted before the noti\336cation RPC arrives. If messages) 122.4 698 T
(are waiting to be sent, step 4 is repeated.) 122.4 684 T
(The above sequence of events has a race condition inherent in it. Should space become avail-) 90 666 T
(able on the receiving node immediately after refusing the connection, a space available RPC) 72 652 T
(could in fact race ahead of the) 72 638 T
2 10 Q
(QUEUE_FULL) 219.53 638 T
0 12 Q
( return code. This can easily happen if the sending) 279.5 638 T
-0.38 (thread\325) 72 624 P
-0.38 (s priority is lower than the thread handling the RPC, or on a multiprocessor platform where) 105.31 624 P
(there are competing CPUs. T) 72 610 T
(o guarantee that the messages are correctly handled, a block and) 210.73 610 T
-0.02 (unblock count are maintained in the) 72 596 P
2 10 Q
-0.04 (DIPC) 247.1 596 P
0 12 Q
-0.02 ( area of the port. In both cases, the threads will perform) 271.09 596 P
(operations on the port with the port lock held. The unblock operation will increment the port) 72 582 T
(unblock count; if the count is greater than the block count, it will do no further processing as this) 72 568 T
-0.21 (provides the information that it has raced ahead. The sending thread will increment the port block) 72 554 P
-0.19 (count and will be able to tell if it can retry the operation \050because the unblock raced ahead\051 or if it) 72 540 P
(must block.) 72 526 T
-0.15 (The callback map data structure is a per) 90 508 P
-0.15 (-port data structure that is created as needed, and man-) 279.56 508 P
-0.35 (aged by the transport. Node numbers are recorded in this structure, with each node being recorded) 72 494 P
-0.02 (at most once. The transport is responsible for implementing routines for allocation and freeing of) 72 480 P
(callback maps, as well as adding a node to and removing a node from a callback map.) 72 466 T
(If there are multiple senders on a node, then the queue of blocked senders is attached to the) 90 448 T
(proxy on that node in the usual fashion. For consistency) 72 434 T
(, if there are any blocked senders on the) 339.72 434 T
-0.12 (local node, the local node\325) 72 420 P
-0.12 (s number is also entered in the callback structure. Retrieval of the local) 197.77 420 P
(node\325) 72 406 T
(s number causes a local blocked sender to be awakened instead of sending an RPC to) 98.65 406 T
(awaken a remote one. The use of a single mechanism to determine which blocked sender to) 72 392 T
(awaken ensures a degree of fairness among competing local and remote blocked senders.) 72 378 T
(This design of recording node numbers at most once per port reduces space requirements on) 90 360 T
-0.21 (the receiving node over other data structure designs. This is valuable in cases where a single node) 72 346 P
-0.19 (is being bombarded by messages from a lar) 72 332 P
-0.19 (ge number of nodes. This consideration of lar) 278.64 332 P
-0.19 (ge fan in) 495.61 332 P
(situations is also why an active callback mechanism is used in preference to a backof) 72 318 T
(f timeout) 479.48 318 T
(mechanism, as the latter results in much more inter) 72 304 T
(-node traf) 316.59 304 T
(\336c in such a situation.) 363.33 304 T
FMENDPAGE
%%EndPage: "38" 47
%%Page: "39" 47
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(39) 530.01 47.33 T
1 12 Q
(Figur) 183.52 469 T
(e 1: Queue Full Node Interaction Diagram) 211.95 469 T
1 14 Q
(5.7 Resour) 72 439.67 T
(ce Shortages) 135.48 439.67 T
0 12 Q
(This section deals with the general problem of resource shortages on the receiving node that) 90 420 T
(cause an enqueue operation to fail. There are two types of such shortages:) 72 406 T
(\245 Allocating a) 108 388 T
2 10 Q
(meta_kmsg) 177.15 388 T
0 12 Q
( or) 231.12 388 T
2 10 Q
(kmsg) 247.11 388 T
0 12 Q
( may fail.) 271.1 388 T
(\245 Allocating a callback map may fail, or allocation of memory required by) 108 370 T
(insertion of a node into a callback map may fail. Some transports may) 115.2 356 T
(guarantee that memory is never allocated for a node insertion operation) 115.2 342 T
(\050Paragon is an example\051.) 115.2 328 T
(In both cases, the enqueue operation fails and returns a resource shortage error code to the) 90 310 T
(sender \050See Figure 1\051; this causes the sender to block awaiting noti\336cation from the receiving) 72 296 T
-0.33 (node that resources have become available. If the sending thread would have blocked anyway due) 72 282 P
-0.41 (to a full message queue, it may have to go through both a resource shortage callback sequence and) 72 268 P
(a message queue full callback sequence before enqueueing its message.) 72 254 T
(The noti\336cation mechanism for resource shortages is based on a fully preallocated callback) 90 236 T
(map, the) 72 222 T
3 F
(static_node_map) 116.3 222 T
0 F
(. The full preallocation ensures that a node can always be inserted in) 198.26 222 T
(this data structure without causing memory allocation. Both classes of resource shortages cause) 72 208 T
(the sending node to be entered into this map, and a resource shortage error code to be returned to) 72 194 T
(the sender) 72 180 T
(.) 120.3 180 T
(Although resource shortages occur from more than one resource, the) 90 162 T
2 10 Q
(meta_kmsg) 422.06 162 T
0 12 Q
( is used to) 476.03 162 T
(determine that resources are available on the node again. When a) 72 148 T
2 10 Q
(meta_kmsg) 387.07 148 T
0 12 Q
( is returned to the) 441.04 148 T
(free pool, the) 72 134 T
2 10 Q
(static_node_map) 138.61 134 T
0 12 Q
( is checked to see if there is a node waiting. A) 228.56 134 T
6 10 Q
(remote_unbloc-) 452.06 134 T
(k_node) 72 120 T
0 12 Q
( rpc is sent to the waiting node, which in turn will enable the blocked ports and start send-) 107.98 120 T
(ing kmsgs. Although there is a risk that the sending node will quickly saturate the receiver by) 72 106 T
(immediately sending a lar) 72 92 T
(ge number of requests, it is relatively easy to \336x this behavior if it is) 196.04 92 T
(determined to be a problem) 72 78 T
72 72 540 720 C
74.25 482 537.75 708 C
6 10 Q
0 X
0 K
(dipc_mqueue_send) 80.31 672 T
(dipc_deliver) 371.25 665.57 T
(-local blocked senders) 83.25 611.26 T
( processing) 83.25 601.26 T
(queue_empty_wakeup) 83.31 539.26 T
350.71 675.31 362.25 672 350.71 668.69 350.71 672 4 Y
V
182.25 672 350.71 672 2 L
0.5 H
2 Z
N
193.79 650.69 182.25 654 193.79 657.31 193.79 654 4 Y
V
193.79 654 362.25 654 2 L
N
2 F
(DIPC_QUEUE_FULL) 167.3 638.57 T
193.79 569.69 182.25 573 193.79 576.31 193.79 573 4 Y
V
362.25 573 193.79 573 2 L
N
6 F
(KKT_CONNECT_REPLY) 380.25 647.26 T
(node A) 143.31 699 T
(node B) 350.31 699 T
(KKT_ADD_NODE\050port->map\051) 380.25 656.57 T
(ipc_mqueue_receive) 380.25 573 T
( remote_queue_empty_wakeup) 380.25 563 T
(-send queued messages) 92.25 528 T
(-release blocked senders) 92.25 518 T
272.25 699 272.25 501 2 L
3 H
3 X
N
0 X
(-port marked remote_blocked) 83.25 620.26 T
350.71 558.31 362.25 555 350.71 551.69 350.71 555 4 Y
V
350.71 555 182.25 555 2 L
0.5 H
N
0 12 Q
(pending send) 290.25 537 T
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "39" 48
%%Page: "40" 48
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(40) 530.01 47.33 T
1 14 Q
(5.7.1 Sender Response to Resour) 72 710.67 T
(ce Shortage) 266.07 710.67 T
0 12 Q
(A resource shortage causes the) 90 691 T
6 10 Q
(KKT_SEND_CONNECT) 240.87 691 T
0 12 Q
( call to return a memory shortage error) 336.81 691 T
(code to the sending thread on the sending node, which causes the sending thread obey local port) 72 677 T
(queue full semantics. A thread that is sending a) 72 663 T
2 10 Q
(kmsg) 301.84 663 T
0 12 Q
( marked as) 325.83 663 T
2 10 Q
(MACH_SEND_ALWAYS) 380.78 663 T
0 12 Q
( cannot) 476.73 663 T
(block, requiring that the) 72 649 T
2 10 Q
(kmsg) 190.26 649 T
0 12 Q
( is enqueued on the port; all other types of) 214.24 649 T
2 10 Q
(kmsgs) 419.44 649 T
0 12 Q
( will cause the) 449.42 649 T
(sending thread to block on the port.) 72 635 T
(The) 90 617 T
3 F
(node_wait) 111.65 617 T
0 F
( structure is used to synchronize resumption of services:) 161.62 617 T
2 10 Q
(typedef struct node_wait {) 144 604.33 T
(node_wait_t) 198 592.33 T
(next;) 305.97 592.33 T
(node_wait_t) 198 580.33 T
(prev;) 305.97 580.33 T
(node_name) 198 568.33 T
(node;) 305.97 568.33 T
(ipc_port_t) 198 556.33 T
(port_chain;) 305.97 556.33 T
(} *node_wait_t;) 144 544.33 T
0 12 Q
(A global queue head,) 90 527 T
3 F
(blocked_node_queue,) 194.92 527 T
0 F
( is used to maintain the list of nodes the kernel is) 299.17 527 T
(waiting on. This queue is only accessed from thread context, so only a lock need be acquired to) 72 513 T
(manipulate the queue.) 72 499 T
-0.34 (When a thread is noti\336ed of queue full, it will \336nd or establish the) 90 481 P
2 10 Q
-0.67 (node_wait) 404.77 481 P
0 12 Q
-0.34 ( structure for the) 458.74 481 P
(remote node before issuing an RPC requesting a callback when the node has resources to enable) 72 467 T
(receiving.) 72 453 T
(Although a node may be short of resources, there is no ef) 90 435 T
(fort in this phase of the design to) 364.24 435 T
(limit the number of send requests to a remote node. Each thread will discover that a remote node) 72 421 T
(can accept or reject a connection request. The cost of a node lookup to determine the resource) 72 407 T
-0.26 (state of the remote node is heavy weight, especially when it is the exceptional case that a message) 72 393 P
(cannot be delivered to the remote node.) 72 379 T
1 F
(Figur) 208.96 77 T
(e 2: Resour) 237.39 77 T
(ce Shortage Diagram) 295.13 77 T
72 72 540 720 C
83.25 90 528.75 357 C
6 10 Q
0 X
0 K
(dipc_mqueue_send) 92.25 323.57 T
(dipc_deliver) 389.25 321 T
(-set up callback) 101.25 272.57 T
(-local blocked senders) 101.25 262.57 T
( processing) 101.25 252.57 T
(-request remote callback) 101.25 242.57 T
(--) 101.25 272.57 T
(KKT_ADD_NODE\050static_map\051) 380.33 215.57 T
(dipc_meta_kmsg_free) 395.32 188.26 T
( remote_unblock_node) 395.32 178.26 T
(-drain enqueued kmsgs) 107.32 154.53 T
(-release port) 107.32 134.53 T
(-free blocked sender threads) 107.32 145.53 T
359.71 324.31 371.25 321 359.71 317.69 359.71 321 4 Y
V
191.25 321 359.71 321 2 L
0.5 H
2 Z
N
202.79 299.69 191.25 303 202.79 306.31 202.79 303 4 Y
V
202.79 303 371.25 303 2 L
N
299.25 348 299.25 114 2 L
3 H
3 X
N
2 F
0 X
(KKT_RESOURCE_SHORTAGE) 164.25 287.76 T
359.71 225.31 371.25 222 359.71 218.69 359.71 222 4 Y
V
191.25 222 359.71 222 2 L
0.5 H
N
202.79 173.69 191.25 177 202.79 180.31 202.79 177 4 Y
V
371.25 177 202.79 177 2 L
N
6 F
(KKT_CONNECT_REPLY) 407.25 312 T
(node A) 164.25 348 T
(node B) 371.25 348 T
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "40" 49
%%Page: "41" 49
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(41) 530.01 47.33 T
1 14 Q
(5.8 T) 72 710.67 T
(ransmitting Complex Messages) 101.29 710.67 T
0 12 Q
-0.22 (In the context of the send/receive engine, a complex message can be either a kmsg with out of) 90 691 P
-0.24 (line ports or data, or it can be an inline kmsg that is lar) 72 677 P
-0.24 (ger than a single physical page. If either cri-) 330.45 677 P
(teria is met, a) 72 663 T
2 10 Q
(msg_progress) 139.62 663 T
0 12 Q
( structure is allocated and \336lled in during the) 211.58 663 T
6 10 Q
(copyin) 429.1 663 T
0 12 Q
( process.) 465.08 663 T
(The) 90 645 T
2 10 Q
(msg_progress) 111.65 645 T
0 12 Q
( structure is used to drive the prep/pin engine and to maintain the current) 183.61 645 T
(position of the data being sent. A state machine is implemented to transition at various points in) 72 631 T
(the transmission and prepping of the data. One structure is allocated for each) 72 617 T
2 10 Q
(kmsg) 443.05 617 T
0 12 Q
( being sent or) 467.04 617 T
(waiting to be sent.) 72 603 T
-0.19 (The transmit engine will maintain two sets of request chains that can be enqueued to the trans-) 90 585 P
-0.17 (port to achieve some pipelining of data. Requests are chained together by the user with a callback) 72 571 P
(being located on the \336nal chain element. If the request chain is N requests long, the transmit) 72 557 T
(engine will be able to be prepare N pages while another N pages are being sent.) 72 543 T
(The) 90 525 T
2 10 Q
(msg_progress) 111.65 525 T
0 12 Q
( structure takes the form) 183.61 525 T
2 10 Q
(struct msg_progress {) 144 512.33 T
(ipc_kmsg_t) 198 500.33 T
(kmsg;) 305.97 500.33 T
(/* kmsg pointer */) 360 500.33 T
(vm_offset_t) 198 488.33 T
(offset;) 305.97 488.33 T
(/* kmsg or send_region */) 360 488.33 T
(vm_offset_t) 198 476.33 T
(ool_data;) 305.97 476.33 T
(/* f) 360 476.33 T
(irst ool region */) 383.99 476.33 T
(vm_page_t) 198 464.33 T
(*ool_array;) 305.97 464.33 T
(/* pointer to vm_page_ts */) 371.93 464.33 T
(int) 198 452.33 T
(array_size;) 305.97 452.33 T
(/* # elements in ool_array*/) 371.93 452.33 T
(vm_map_copy_t) 198 440.33 T
(*send_region;) 305.97 440.33 T
(int) 198 428.33 T
(send_reg_end;) 305.97 428.33 T
(/* index into ool_array */) 383.92 428.33 T
(int) 198 416.33 T
(send_last_size;) 305.97 416.33 T
(int) 198 404.33 T
(pin_start;) 252 404.33 T
(int) 198 392.33 T
(pin_end;) 252 392.33 T
(int) 198 380.33 T
(prep_end;) 252 380.33 T
(prep_region;) 252 368.33 T
(int) 198 356.33 T
(prep_region_end;) 252 356.33 T
(req_chain) 198 344.33 T
(*idle_chain;) 252 344.33 T
(/* points to request chain */) 323.96 344.33 T
(int) 198 332.33 T
(chain_count;) 252 332.33 T
(/* number of request chains */) 323.96 332.33 T
(page_error) 198 320.33 T
(page_err_info;) 257.97 320.33 T
(/* pointer to page_err_page */) 341.92 320.33 T
(enum {) 198 308.33 T
(SENDING,) 252 296.33 T
(STALLED,) 252 284.33 T
(RESET_ARRAY,) 252 272.33 T
(SEND_PAGE_ERR,) 252 260.33 T
(PAGE_ERR_SEND_DONE,) 252 248.33 T
(MSG_DONE) 252 236.33 T
(} state;) 198 224.33 T
(simple_lock_t) 198 212.33 T
(lock;) 275.96 212.33 T
(}) 144 200.33 T
1 14 Q
(5.8.1 Large inline kmsg) 72 171.67 T
0 12 Q
(If a kmsg is stored on more than one physical page, this is noted in the) 90 152 T
2 10 Q
(msg_progress) 430.78 152 T
0 12 Q
( struc-) 502.74 152 T
(ture by \336lling in the) 72 138 T
3 F
(kmsg) 170.29 138 T
0 F
( \336eld. The \336rst page will be sent via) 194.93 138 T
6 10 Q
(KKT_SEND_CONNECT) 370.16 138 T
0 12 Q
( and then noth-) 466.1 138 T
(ing will occur until the callback is received. A pointer to the) 72 124 T
2 10 Q
(msg_progress) 363.46 124 T
0 12 Q
( structure is stored in) 435.42 124 T
-0.25 (the) 72 110 P
2 10 Q
-0.5 (request_block_t) 89.4 110 P
0 12 Q
-0.25 ( given to the transport, which is always provided back as a parameter to the) 179.35 110 P
(callback. All of the inline kmsg is located in wired kernel memory) 72 96 T
(, so no prep/pinning operation) 389.67 96 T
(need to occur on this data.) 72 82 T
FMENDPAGE
%%EndPage: "41" 50
%%Page: "42" 50
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(42) 530.01 47.33 T
0 12 Q
(During the callback, the transmit engine will \336ll out a single chain of requests and hand them) 90 712 T
(to the transport via) 72 698 T
6 10 Q
(KKT_REQUEST) 165.27 698 T
0 12 Q
(, the \336nal request having a callback associated with it. As each) 230.35 698 T
-0.23 (page is placed into a) 72 684 P
2 10 Q
-0.47 (request_block_t) 171.76 684 P
0 12 Q
-0.23 ( and handed to the transport, the) 261.71 684 P
2 10 Q
-0.47 (msg_progress->offset) 417.3 684 P
0 12 Q
(\336eld is updated.The entire inline kmsg will be sent before attempting to send OOL data.) 72 670 T
(Upon completion, the chains of) 90 652 T
2 10 Q
(request_block_t) 243.9 652 T
0 12 Q
(\325) 333.85 652 T
(s and) 337.18 652 T
2 10 Q
(msg_callback) 365.17 652 T
0 12 Q
( structure will be) 437.12 652 T
(cleaned up and released back to the system and the sending thread will continue.) 72 638 T
1 14 Q
(5.8.2 Additional Kmsg Contents) 72 608.67 T
0 12 Q
(In addition to the) 90 589 T
2 10 Q
(kmsg) 175.29 589 T
0 12 Q
( body) 199.27 589 T
(, a) 225.48 589 T
2 10 Q
(kmsg) 239.8 589 T
0 12 Q
( may also contain out of line memory or out of line port) 263.78 589 T
(arrays. An out of line port array is treated at transmission time as an out of line memory region.) 72 575 T
(These regions follow the) 72 561 T
2 10 Q
(kmsg) 193.91 561 T
0 12 Q
( body on the connection opened by) 217.9 561 T
6 10 Q
(KKT_SEND_CONNECT) 388.78 561 T
0 12 Q
(. Both the) 483.84 561 T
(sending node and receiving thread execute similar code that scans the) 72 547 T
2 10 Q
(kmsg) 408.74 547 T
0 12 Q
( body to determine) 432.73 547 T
(what to transfer next, and execute a) 72 533 T
6 10 Q
(KKT_REQUEST) 245.18 533 T
0 12 Q
( operation with the appropriate send or receive) 311.15 533 T
(requests needed to ef) 72 519 T
(fect the transfer) 172.7 519 T
(. Callbacks are used to sequence the transfer and to prepare) 247.3 519 T
-0.41 (data for transmission. An out of line memory region containing ports is converted back into an out) 72 505 P
(of line port array in the copyout path \050see chapter 4\051.) 72 491 T
1 14 Q
(5.8.3 Out of Line Data) 72 461.67 T
0 12 Q
(Out of line \050OOL\051 data transmission is synchronized by a state machine implemented within) 90 442 T
(the) 72 428 T
2 10 Q
(msg_progress) 89.65 428 T
0 12 Q
( data structure de\336ned above. Figure 3 below encapsulates the various state) 161.62 428 T
(transitions as the occur in interrupt or thread context.) 72 414 T
(After the initial) 90 396 T
6 10 Q
(KKT_SEND_CONNECT) 166.95 396 T
0 12 Q
( completes successfully) 262.9 396 T
(, if OOL data is present the fol-) 375.37 396 T
(lowing sequence of events occur:) 72 382 T
(1.) 108 364 T
2 10 Q
(msg_progress->ool_array) 122.99 364 T
0 12 Q
( is allocated,) 260.92 364 T
2 10 Q
(send_region) 324.2 364 T
0 12 Q
(,) 390.17 364 T
2 10 Q
(send_reg_-) 396.17 364 T
(end) 122.4 350 T
0 12 Q
(, and) 140.39 350 T
2 10 Q
(send_last_size) 166.7 350 T
0 12 Q
( \336elds are initialized, and the) 250.66 350 T
2 10 Q
(state) 392.23 350 T
0 12 Q
( is set to) 422.21 350 T
1 F
(SENDING) 122.4 336 T
0 F
(.) 177.04 336 T
(2.  Up to 2*PREP_MAX pages are prepped and put into the) 108 318 T
2 10 Q
(ool_array) 398.14 318 T
0 12 Q
(.) 451.33 318 T
(Pointers to the) 90 300 T
2 10 Q
(request_block_t) 162.3 300 T
0 12 Q
( chains were placed into the opaque area of the) 252.25 300 T
2 10 Q
(request_-) 480.05 300 T
(block_t) 72 286 T
0 12 Q
( that was used to initiate the) 113.98 286 T
6 10 Q
(KKT_SEND_CONNECT) 250.89 286 T
0 12 Q
(, which enables them to be recovered) 345.95 286 T
(when the callback is initiated by the transport.) 72 272 T
-0.45 (When the callback is received, the) 90 254 P
1 F
-0.45 (SENDING) 254.82 254 P
0 F
-0.45 ( state will be noticed and a number of pages will) 309.46 254 P
(be pinned to be sent, the number being equal to the number of elements in the request chain.) 72 240 T
2 10 Q
0 (vm_page_t) 72 226 P
0 12 Q
0 (\325) 125.97 226 P
0 (s for the pages are found in the) 129.3 226 P
2 10 Q
0 (ool_array) 280.51 226 P
0 12 Q
0 ( \336eld of the) 334.48 226 P
2 10 Q
0 (msg_progress) 392.43 226 P
0 12 Q
0 ( structure, mak-) 464.4 226 P
(ing this a simple operation from interrupt context. Although the send engine will always try to) 72 212 T
(send the maximum number of pages the request chain can send, an absent page will cause the) 72 198 T
(sends to stall; however) 72 184 T
(, so long as a single page can be pinned, it will be sent as soon as possible.) 181.12 184 T
-0.22 (If a page of the OOL data has been removed from memory) 90 166 P
-0.22 (, the pinning operation will fail and) 368.95 166 P
(the state will transition to) 72 152 T
1 F
(ST) 196.93 152 T
(ALLED) 210.72 152 T
0 F
(. When this happens, the request is handed to the prep/fault) 252.03 152 T
(thread. From thread context, the page can be faulted back in and prepped, then pinned and sent.) 72 138 T
-0.02 (Again, if the transmit engine cannot send all of the pages, it will send them one at a time if neces-) 72 124 P
(sary to make forward progress.) 72 110 T
(The) 90 92 T
2 10 Q
(ool_array) 111.65 92 T
0 12 Q
( holds a small number of) 165.62 92 T
2 10 Q
(vm_page_t) 287.54 92 T
0 12 Q
(\325) 341.51 92 T
(s that have been prepped. The initial) 344.85 92 T
(implementation will only prep a single region in advance of sending, which further limits the) 72 78 T
FMENDPAGE
%%EndPage: "42" 51
%%Page: "43" 51
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(43) 530.01 47.33 T
0 12 Q
(number of elements in the) 72 712 T
2 10 Q
(ool_array) 200.25 712 T
0 12 Q
(. When the end of a region is reached,) 253.44 712 T
2 10 Q
(msg_progress) 438.28 712 T
0 12 Q
( will) 510.24 712 T
(transition to) 72 698 T
1 F
(RESET_ARRA) 132.64 698 T
(Y) 211.49 698 T
0 F
( state. The array may be reallocated if it is too small to deal with) 220.15 698 T
-0.23 (the lar) 72 684 P
-0.23 (gest number of pages, pointers are reset to the next OOL region, and prepping begins anew) 101.86 684 P
-0.23 (.) 534.24 684 P
(This transition will always mean the pipeline has been stopped and must be restarted.) 72 670 T
-0.17 (At the end of sending the) 90 652 P
2 10 Q
-0.34 (kmsg) 212.91 652 P
0 12 Q
-0.17 (,) 236.89 652 P
2 10 Q
-0.34 (msg_progress) 242.72 652 P
0 12 Q
-0.17 ( will transition from) 314.68 652 P
1 F
-0.17 (SENDING) 413.29 652 P
0 F
-0.17 ( to) 467.93 652 P
1 F
-0.17 (SEND_P) 482.92 652 P
-0.17 (A-) 527.35 652 P
(GE_ERR) 72 638 T
0 F
(, which will cause the) 120.64 638 T
2 10 Q
(page_error) 227.9 638 T
0 12 Q
( information to be sent to the remote node, and tran-) 287.87 638 T
(sition to) 72 624 T
1 F
(P) 113.99 624 T
(AGE_ERR_SEND_DONE) 120.43 624 T
0 F
(. This state which will clean up the outstanding request) 256.36 624 T
(chains and transition to) 72 610 T
1 F
(MSG_DONE) 186.6 610 T
0 F
(.) 254.56 610 T
1 F
-0.42 (MSG_DONE) 90 592 P
0 F
-0.42 ( is the \336nal state and will further clean up residual data structures. It will destroy) 157.97 592 P
(the second request chain \050if it exists\051, any) 72 578 T
2 10 Q
(page_error) 274.18 578 T
0 12 Q
( info, and queue the kmsg to be destroyed) 334.15 578 T
-0.19 (by a service thread;) 72 564 P
1 F
-0.19 (MSG_DONE) 167.84 564 P
0 F
-0.19 ( is processed from interrupt level and cannot clean up the kmsg) 235.8 564 P
(itself without risk of blocking.) 72 550 T
1 F
(Figur) 201.17 230 T
(e 3: msg_pr) 229.6 230 T
(ogr) 289.34 230 T
(ess State T) 306.44 230 T
(ransitions) 360.19 230 T
1 14 Q
(5.8.3.1 NORMA OOL Err) 72 200.67 T
(or Pr) 227.99 200.67 T
(opagation) 259.2 200.67 T
0 12 Q
(An additional complication to sending out of line memory is that the pagein operation on a) 90 181 T
(page that is not present may fail \050e.g., disk parity error on pagein\051. In the local case, this would) 72 167 T
(cause an exception when the receiver accessed that page because the pagein does not occur until) 72 153 T
(the page fault caused by this access. In the remote case,) 72 139 T
2 10 Q
(DIPC) 341.44 139 T
0 12 Q
( must propagate this error to the) 365.43 139 T
(remote node in order to mimic this behavior \050receiver access causes an exception\051.) 72 125 T
-0.29 (In the local Mach) 90 107 P
2 10 Q
-0.58 (IPC) 176.11 107 P
0 12 Q
-0.29 ( case, the receiver of out-of-line memory takes a page fault when access-) 194.1 107 P
(ing a page not present in its address space. The kernel issues a) 72 93 T
6 10 Q
(memory_object_data_request) 373.11 93 T
0 12 Q
(call to the appropriate memory manager to satisfy the page fault. If an error occurs, the manager) 72 79 T
72 72 540 720 C
85.5 243 526.5 528 C
247.5 348 346.5 393 18 RR
0.5 H
2 Z
0 X
0 K
N
2 10 Q
(SENDING) 116.52 484.07 T
(STALLED) 121.5 375 T
(RESET_ARRAY) 256.5 483 T
(SEND_PAGE_ERR) 259.54 368.76 T
391.5 348 490.5 393 18 RR
N
(PAGE_ERR_) 409.53 368.76 T
(SEND_DONE) 409.5 359.76 T
391.5 267 490.5 312 18 RR
N
(MSG_DONE) 418.5 285 T
247.5 465 346.5 510 18 RR
N
94.5 348 193.5 393 18 RR
N
94.5 465 193.5 510 18 RR
N
226.96 486.31 238.5 483 226.96 479.69 226.96 483 4 Y
V
202.5 483 226.96 483 2 L
N
250.62 412.47 256.49 402.01 245.97 407.77 248.29 410.12 4 Y
V
193.5 465 248.3 410.12 2 L
N
370.96 369.31 382.5 366 370.96 362.69 370.96 366 4 Y
V
355.5 366 370.96 366 2 L
N
439.81 332.54 436.5 321 433.19 332.54 436.5 332.54 4 Y
V
436.5 339 436.5 332.54 2 L
N
136.19 444.46 139.5 456 142.81 444.46 139.5 444.46 4 Y
3 X
V
139.5 411 139.5 444.46 2 L
N
226.96 378.31 238.5 375 226.96 371.69 226.96 375 4 Y
V
202.5 375 226.96 375 2 L
N
245.59 450.99 256.49 456 249.9 445.97 247.75 448.48 4 Y
V
193.5 402 247.76 448.48 2 L
N
186.4 407.02 175.5 402.01 182.08 412.04 184.24 409.53 4 Y
V
238.5 456 184.24 409.52 2 L
N
304.81 413.54 301.5 402 298.19 413.54 301.5 413.54 4 Y
V
301.5 456 301.5 413.54 2 L
N
214.04 488.69 202.5 492 214.04 495.31 214.04 492 4 Y
V
238.5 492 214.04 492 2 L
N
151.81 422.54 148.5 411 145.19 422.54 148.5 422.54 4 Y
0 X
V
148.5 456 148.5 422.54 2 L
N
200.1 292.81 112.5 292.81 2 L
V
1.14 H
0 Z
N
1 12 Q
(interrupt context) 112.5 294 T
128.49 280.81 112.5 280.81 2 L
V
N
(thr) 112.5 282 T
186.56 280.81 128.27 280.81 2 L
V
N
(ead context) 128.27 282 T
253.96 297.31 265.5 294 253.96 290.69 253.96 294 4 Y
V
220.5 294 253.96 294 2 L
0.5 H
2 Z
N
253.96 288.31 265.5 285 253.96 281.69 253.96 285 4 Y
3 X
V
220.5 285 253.96 285 2 L
N
89.17 251.17 521.17 521.17 R
0 X
N
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "43" 52
%%Page: "44" 52
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(44) 530.01 47.33 T
0 12 Q
(responds with) 72 712 T
6 10 Q
(memory_object_data_error) 141.96 712 T
0 12 Q
( to indicate the page cannot be retrieved, and that a) 285.88 712 T
(memory failure exception should be raised in any client threads that access the page. Clients can) 72 698 T
(catch these exceptions and retry their page faults. As a result, this mechanism is used to report) 72 684 T
(transient errors as well as permanent ones.) 72 670 T
(The internal mechanism used by the kernel to record pager errors is to establish a \336ctitious) 90 652 T
(page that is marked with an error condition. When any client tries to access the page, it receives) 72 638 T
(the memory failure exception. The distributed implementation should work in the same way) 72 624 T
(.) 513.26 624 T
(The sender is aware of a page on which pagein failed when the page is prepared to be sent to) 90 606 T
(the remote node. When encountering such a page, the sender instead transmits a zero \336lled page.) 72 592 T
(The receiver accepts such a page in the same way it would any other \050present\051 page. By inserting) 72 578 T
-0.47 (a dummy page, we need not modify critical-path send-side and receive-side logic to recognize this) 72 564 P
(rare error case.) 72 550 T
(For each erroneous page the sender accumulates the page of) 90 532 T
(fset and error information into a) 377.87 532 T
(vector of) 72 518 T
2 10 Q
(page_error) 117.96 518 T
0 12 Q
( records. The de\336nition of a) 177.93 518 T
2 10 Q
(page_error) 314.16 518 T
0 12 Q
( record is:) 374.13 518 T
2 10 Q
(typedef struct page_error {) 144 505.33 T
(vm_offset_t) 198 493.33 T
(region;) 305.97 493.33 T
(/* offset into kmsg */) 360 493.33 T
(vm_offset_t) 198 481.33 T
(offset;) 305.97 481.33 T
(kern_return_t) 198 469.33 T
(error;) 305.97 469.33 T
(} page_error;) 144 457.33 T
0 12 Q
(By convention, at the end of sending each kmsg containing OOL data, the sender transmits a) 90 440 T
(status word,) 72 426 T
2 10 Q
(error_count) 132.96 426 T
0 12 Q
(, summarizing the outcome of the transfer) 198.93 426 T
(.) 399.12 426 T
(The status word is simply a count of) 90 408 T
2 10 Q
(page_error) 267.23 408 T
0 12 Q
( records representing non-present pages in) 327.19 408 T
(the OOL region. When) 72 394 T
2 10 Q
(error_count) 185.58 394 T
0 12 Q
( is zero, all pages were present and no further processing) 251.54 394 T
-0.04 (needs to be performed by sender or receiver) 72 380 P
-0.04 (. Thus, in the typical case of a successful transfer) 281.84 380 P
-0.04 (, the) 516.44 380 P
(only overhead required is a single status word per kmsg. See Figure 4.) 72 366 T
-0.08 (If) 90 222 P
2 10 Q
-0.16 (error_count) 100.91 222 P
0 12 Q
-0.08 ( is non-zero, the sender also transmits the accumulated vector of) 166.87 222 P
2 10 Q
-0.16 (page_error) 477.11 222 P
0 12 Q
(records. The receiver allocates a buf) 72 208 T
(fer for receiving the error vector) 245.62 208 T
(. This buf) 399.8 208 T
(fer must be) 445.89 208 T
2 10 Q
-0.11 (error_count) 72 194 P
-0.11 (*) 141.24 194 P
-0.11 (sizeof\050page_error\051) 150.5 194 P
0 12 Q
-0.06 (bytes long. It is possible that the sender will transmit mul-) 261.72 194 P
-0.2 (tiple pages of page_error vectors, which requires the receiver to issue multiple receive requests to) 72 180 P
(the transport. The receiver accepts the vector from the sender) 72 166 T
(, then walks the vector) 365.26 166 T
(, locating the) 473.04 166 T
(region and associated) 72 152 T
2 10 Q
(vm_page_t) 178.25 152 T
0 12 Q
( associated with each page of) 232.22 152 T
(fset speci\336ed in the vector) 372.22 152 T
(. The) 497.47 152 T
-0.2 (real, zero-\336lled page originally transmitted by the sender is thrown away and replaced with a \336cti-) 72 138 P
(tious page. The \336ctitious page is marked with the error code speci\336ed in the vector) 72 124 T
(. If the receiv-) 468.06 124 T
(ing task attempts to access an error page, a memory failure exception will be raised, identical to) 72 110 T
(the local case.) 72 96 T
(It is unusual but possible that a dummy) 90 78 T
(, zero-\336lled page has been evicted from memory and) 277.46 78 T
72 72 540 720 C
113.62 236 498.38 362 C
131.62 288 194.62 351 R
5 X
0 K
V
0.5 H
2 Z
0 X
N
365.62 308 401.62 317 R
7 X
V
0 X
N
365.62 299 401.62 308 R
7 X
V
0 X
N
365.62 290 401.62 299 R
7 X
V
0 X
N
0 12 Q
(Page 1) 140.62 325 T
284.62 289 347.62 352 R
5 X
V
0 X
N
(Page N) 293.62 326 T
365.62 335 401.62 344 R
7 X
V
0 X
N
2 10 Q
(error_count) 419.62 335 T
(Optional) 419.62 308 T
(page_error) 419.62 298 T
(vector) 419.62 288 T
1 14 Q
(. . . . . .) 221.62 317 T
121.5 254 490.5 272 R
7 X
V
1 12 Q
0 X
(Figur) 142.46 264 T
(e 4: Layout of OOL T) 170.9 264 T
(ransmission with trailing page status) 281.62 264 T
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "44" 53
%%Page: "45" 53
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(45) 530.01 47.33 T
0 12 Q
(given to a memory manager before the receiver obtains the) 72 712 T
2 10 Q
(page_error) 357.77 712 T
0 12 Q
( vector) 417.73 712 T
(. Therefore, the) 450.04 712 T
-0.35 (receiver) 72 698 P
-0.35 (\325) 111.06 698 P
-0.35 (s OOL memory error processing must be able to handle an absent page. However) 114.4 698 P
-0.35 (, errone-) 499.73 698 P
(ous pages are themselves quite rare and paging out the placeholder for an erroneous page is rarer) 72 684 T
(still. There is no performance problem here.) 72 670 T
3 F
([TBD: But ther) 72 652 T
(e is another pr) 144.85 652 T
(oblem her) 214.7 652 T
(e. The curr) 262.55 652 T
(ent code fr) 315.07 652 T
(ees absent/err) 365.92 652 T
(or \336ctitious pages) 433.1 652 T
-0.11 (when encounter) 72 638 P
-0.11 (ed on the assumption that the err) 147.73 638 P
-0.11 (or might be transient and the pager will r) 305.21 638 P
-0.11 (espond) 503.13 638 P
-0.05 (with an err) 72 624 P
-0.05 (or again if the pr) 124.76 624 P
-0.05 (oblem is persistent. W) 206.07 624 P
-0.05 (on\325) 310.75 624 P
-0.05 (t work in the r) 325.4 624 P
-0.05 (emote case because the object) 392.72 624 P
(is internal \050get zer) 72 610 T
(o \336ll instead, oops\051. Maybe page needs yet another bit to say \322permanent) 159.84 610 T
(err) 72 596 T
(or\323.]) 86.21 596 T
1 14 Q
(5.9 Out of Line Port Arrays) 72 566.67 T
0 12 Q
(Out of line port arrays are sequenced for transmission using the same callback-driven KKT_-) 90 547 T
-0.33 (SEND and KKT_RECV operations as out of line memory) 72 533 P
-0.33 (. Because out of line port arrays are sent) 347.1 533 P
(from and received into wired kernel memory) 72 519 T
(, neither pinning nor the out of line memory error) 286.38 519 T
(mechanism is used.) 72 505 T
1 14 Q
(5.10 Maintaining Message Ordering for Kernel Ports) 72 475.67 T
0 12 Q
(In Section 3.1.1 the problem of maintaining message ordering for kernel ports was presented) 90 456 T
-0.3 (and a solution outlined. The details of the context \322stealing\323 solution will be covered in two parts:) 72 442 P
(the mechanism used to synchronize a sending thread that needs to block and the kserver thread) 72 428 T
(that processes the message, and the analysis of which kernel threads need to use the facility) 72 414 T
(.) 509.56 414 T
1 14 Q
(5.10.1 Sending Thr) 72 384.67 T
(ead Context \322Stealing\323) 185.27 384.67 T
0 12 Q
(The DIPC context stealing will only occur when two conditions are met:) 90 365 T
(1.  the sending thread has its dipc_steal_context \336eld set to TRUE) 108 347 T
(2.  the tar) 108 329 T
(get port is a kernel port on the remote node, that is, the kernel is) 153.08 329 T
(the receiver) 122.4 315 T
(.) 178.01 315 T
(The thread structure will have a new boolean \336eld, dipc_steal_context. All user threads and) 90 297 T
(some kernel threads will have this \336eld set to TRUE. The set of kernel threads that need not use) 72 283 T
(context stealing will be enumerated in the following section.) 72 269 T
-0.06 (Although it would be useful for the sending thread to know in advance that the receiver is the) 90 251 P
(kernel, this information is dif) 72 237 T
(\336cult or impossible to maintain on the sending node since the port) 212.04 237 T
-0.32 (may migrate into or out of the kernel. Instead, the sender will indicate that it wishes to block if the) 72 223 P
(remote port is a kernel port by setting a bit in the kmsg and recording the address of the kmsg in) 72 209 T
-0.31 (the kmsg itself. It will then call KKT_SEND_CONNECT as usual. The receiving node will check) 72 195 P
(whether the port is a kernel port and indicate the result in the second return parameter in KKT_-) 72 181 T
(CONNECT_REPL) 72 167 T
(Y) 162.75 167 T
(. Note that at this point the receiver might not yet have the kmsg, and so it) 169.87 167 T
-0.31 (does not know whether the sender wishes to block. The sender will check the return code, and if it) 72 153 P
(indicates that the receiver is the kernel and its dipc_steal_context \336eld is TRUE, it will block) 72 139 T
(using the address of the kmsg as the wait channel.) 72 125 T
(On the receiving node, a kserver thread will call ipc_mqueue_receive to pick up a kmsg. It) 90 107 T
(will check whether the kmsg has a sender thread waiting, and if so, record the node number and) 72 93 T
-0.33 (the wait channel \050the sending node\325) 72 79 P
-0.33 (s kmsg address\051. It will then process the message by executing) 240.54 79 P
FMENDPAGE
%%EndPage: "45" 54
%%Page: "46" 54
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(46) 530.01 47.33 T
0 12 Q
-0.04 (the appropriate kernel routine. Upon completion of the processing, the kserver thread will issue a) 72 712 P
-0.2 (\322wakeup sender\323 RPC back to the sending node with the wait channel as an ar) 72 698 P
-0.2 (gument, which will) 444.66 698 P
(wake up the sending thread.) 72 684 T
(The extra RPC to free the sender is cheap on the Paragon but could be expensive on other) 90 666 T
-0.11 (interconnects. If the RPC is suf) 72 652 P
-0.11 (\336ciently expensive on other interconnects that performance of ker-) 221.14 652 P
-0.01 (nel-related operations \050as opposed to strict user) 72 638 P
-0.01 (-to-user message traf) 298.17 638 P
-0.01 (\336c\051 will deteriorate unaccept-) 398.5 638 P
-0.21 (ably) 72 624 P
-0.21 (, we can investigate the possibility of piggybacking the RPC with the ACK for the last packet) 91.87 624 P
(of the original message.) 72 610 T
-0.36 (It is possible for a port to be a kernel port at the time of the message enqueue, but to migrate to) 90 592 P
(user space before the message is actually received. In this situation, the sending thread would) 72 578 T
(already be blocked. The receive node must recognize that there is a sender waiting and send the) 72 564 T
-0.22 (RPC to wake up the sending thread. This check must happen in the normal receive code path \050out-) 72 550 P
(side of the kserver threads\051. Conversely) 72 536 T
(, the port might be a user port at the time of the enqueue) 261.74 536 T
(but migrate into the kernel prior to the receive operation. In this case, the sender will not be) 72 522 T
(blocked since the original location of the port was not in the kernel. This could result in an extra-) 72 508 T
(neous wakeup, which should be harmless, or in the sending thread not blocking when it should) 72 494 T
-0.21 (have. This should not be a problem since the ports we are tar) 72 480 P
-0.21 (geting with this mechanism either do) 360.7 480 P
(not migrate at all or do not migrate from user to kernel space.) 72 466 T
1 14 Q
(5.10.2 Kernel Thr) 72 436.67 T
(eads Generating Order) 178.24 436.67 T
(-Dependent Messages) 316.08 436.67 T
0 12 Q
(Currently) 90 417 T
(, the only known interface which relies on the mechanism of stealing the sending) 135.19 417 T
-0.11 (thread\325) 72 403 P
-0.11 (s context to guarantee receive order is the EMMI. Since XMM implements the EMMI and) 105.31 403 P
(processes inter) 72 389 T
(-node EMMI messages in kserver thread context, it is where we see the problems.) 142.7 389 T
(The potential races are as follows:) 72 375 T
(\245) 108 357 T
(data_return/terminate. During termination, a data_return) 115.2 357 T
(followed by a) 388.66 357 T
(terminate could be misordered. The context-stealing solution \336xes this) 115.2 343 T
(problem.) 115.2 329 T
(\245) 108 311 T
(terminate/init. During termination and reactivation, a) 115.2 311 T
(terminating object) 372.36 311 T
(could be reactivated by a kernel, resulting in) 115.2 297 T
(a terminate message fol-) 331.37 297 T
(lowed by an init message. The context-stealing solution \336xes this prob-) 115.2 283 T
(lem.) 115.2 269 T
(\245) 108 251 T
(data_return/lock_completed. Internally) 115.2 251 T
(, XMM responds to all) 301.61 251 T
(lock_request operations with lock_completed. Hence, a single) 115.2 237 T
(thread) 415.98 237 T
(could generate a data_return followed by a) 115.2 223 T
(lock_completed, which must) 323.36 223 T
(remain in order on the receiver) 115.2 209 T
(.) 262.74 209 T
(The context-stealing solution \336xes this) 268.74 209 T
(problem.) 115.2 195 T
(\245) 108 177 T
(terminate/change_completed. This race should no longer exist.) 115.2 177 T
(Our code) 419.31 177 T
(base should now implement the following semantic: if) 115.2 163 T
(a change_at-) 379.04 163 T
(tributes request results in object termination, the) 115.2 149 T
(termination message) 349.72 149 T
(itself takes the place of the) 115.2 135 T
(change_completed message. No explicit) 246.43 135 T
(change_completed will) 115.2 121 T
(be generated in this case, so no race can occur) 229.79 121 T
(.) 450.26 121 T
(Because kserver threads process XMM messages as well as carry out what otherwise would) 90 103 T
(be local-node kernel operations, and because they are allowed to block inde\336nitely) 72 89 T
(, they should) 468.25 89 T
FMENDPAGE
%%EndPage: "46" 55
%%Page: "47" 55
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(47) 530.01 47.33 T
0 12 Q
-0.04 (be able to have their contexts \322stolen\323 as would the original calling thread in the local case. They) 72 712 P
(will be marked for DIPC context stealing.) 72 698 T
(Many kernel threads may be easily exempted from DIPC context stealing:) 90 680 T
(\245) 108 662 T
(alarm_thread) 115.2 662 T
(. This thread only generates) 178.47 662 T
(clock alarms.) 314.37 662 T
(\245) 108 644 T
(idle_thread) 115.2 644 T
(. This thread does nothing.) 169.15 644 T
(\245) 108 626 T
(net_thread) 115.2 626 T
(. Even if the net_thread) 165.82 626 T
(delivers packets in order) 281.07 626 T
(, the network) 398.16 626 T
(code uses other methods to maintain) 115.2 612 T
(packet order \050if the network code) 293.09 612 T
(cares\051.) 115.2 598 T
(\245) 108 580 T
(sched) 115.2 580 T
(. The sched thread is purely local.) 142.51 580 T
(\245) 108 562 T
(softclock) 115.2 562 T
(. The softclock thread is purely local.) 159.16 562 T
(\245) 108 544 T
(swapin. Although the swapin thread wants to) 115.2 544 T
(wire thread stacks, it can) 334.39 544 T
(only cause) 115.2 530 T
(one page fault at a time; each fault) 169.16 530 T
(must be completely) 337.69 530 T
(resolved before the) 115.2 516 T
(next can possibly be generated.) 210.12 516 T
(\245) 108 498 T
(DIPC threads) 115.2 498 T
(. These threads are internal to DIPC) 180.15 498 T
(and Mach message) 355.35 498 T
(ordering constraints) 115.2 484 T
(do not apply) 213.8 484 T
(.) 272.98 484 T
(The reaper thread reclaims) 90 466 T
(local threads and can) 221.21 466 T
(go remote, as demonstrated in this) 325.12 466 T
(scenario:) 492.68 466 T
-0.28 (The reaper could be reaping the last) 72 452 P
-0.28 (thread in the task, and hence has the) 244.89 452 P
-0.28 (last reference to the task.) 418.84 452 P
(The task, in turn, could have the last) 72 438 T
(reference to its VM map. The VM map could have the last) 249.21 438 T
-0.36 (reference to the VM object.) 72 424 P
-0.36 ( T) 205.42 424 P
-0.36 (ermination of the VM object has the) 214.54 424 P
-0.36 (potential to cause the terminate) 388.9 424 P
(before) 72 410 T
(data_return race. Thus the reaper thread will be marked for DIPC context stealing.) 105.63 410 T
(The analysis of the reaper thread implies that any thread that could hold the last reference to) 90 392 T
(an object must use the stealing facility) 72 378 T
(. In addition to the reaper thread, this includes the vm_ob-) 255.1 378 T
-0.23 (ject_reap thread since its purpose is to terminate objects. However) 72 364 P
-0.23 (, this thread is not performance-) 387.91 364 P
-0.16 (critical and no deadlock can result from blocking it until a remote kserver completes its operation.) 72 350 P
(Depending on the implementation of) 90 332 T
(device overwrite, the iodone thread may be the) 269.55 332 T
(last) 497.7 332 T
-0.29 (holder of an object reference; dropping) 72 318 P
-0.29 (that reference will lead to object) 260.77 318 P
-0.29 (termination. If the device) 416.91 318 P
(overwrite implementation involves memory deallocation, then the iodone thread will need to use) 72 304 T
(the context stealing facility) 72 290 T
(. A better solution is to adopt the newer device overwrite code that) 201.47 290 T
(does not do the deallocation and then the iodone thread will be exempted from context stealing.) 72 276 T
(The \336nal thread to be considered is the) 90 258 T
(vm_pageout) 279.2 258 T
( thread. Surprisingly) 338.49 258 T
(, this thread does not) 435.99 258 T
(need to employ the context stealing) 72 244 T
(feature. Here are the reasons why:) 245.22 244 T
(\245) 108 226 T
(The pageout thread only generates) 115.2 226 T
(memory_object_init and memory_ob-) 283.39 226 T
(ject_data_return messages. The) 115.2 212 T
(rest of its activities are local.) 269.08 212 T
-0.08 (\245) 108 194 P
-0.08 (Object initialization happens on) 115.12 194 P
-0.08 (a dif) 270.72 194 P
-0.08 (ferent port than the port used for) 292.08 194 P
-0.08 (the) 450.42 194 P
(pageout thread\325) 115.2 180 T
(s subsequent) 189.48 180 T
(data_return operations. Hence, there) 253.44 180 T
(is no) 430.61 180 T
(way to misorder init and) 115.2 166 T
(data_return messages.) 235.46 166 T
(\245) 108 148 T
(Ordering among data_return messages) 115.2 148 T
(generated by the pageout thread) 303.05 148 T
(doesn\325) 115.2 134 T
(t matter) 146.96 134 T
(.) 183.27 134 T
(\245) 108 116 T
(Object termination doesn\325) 115.2 116 T
(t ever happen directly from the pageout) 240.23 116 T
(thread.) 432.41 116 T
(Note that, as a result, the pageout thread) 90 98 T
(can continue to run at full speed.) 285.85 98 T
FMENDPAGE
%%EndPage: "47" 56
%%Page: "48" 56
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(48) 530.01 47.33 T
1 14 Q
(5.1) 72 710.67 T
(1 Aborted Message Send) 88.72 710.67 T
0 12 Q
-0.21 (A) 90 691 P
1 F
-0.21 (thr) 101.44 691 P
-0.21 (ead_abort\050\051) 117.22 691 P
0 F
-0.21 ( operation that occurs during a) 177.17 691 P
1 F
-0.21 (mach_msg\050\051) 325.12 691 P
0 F
-0.21 (raises an interesting case. Data) 390.52 691 P
(being sent by) 72 677 T
1 F
(mach_msg\050\051) 138.96 677 T
0 F
( will fall into one of two cases: memory is volatile \050RPC, device oper-) 201.58 677 T
(ations\051 or memory is non-volatile \050asynchronous messages\051.) 72 663 T
(The volatile case makes the guarantee that the memory will not be altered during the send) 90 645 T
-0.1 (operation. This is the most cost ef) 72 631 P
-0.1 (fective way to transmit data as there is no VM processing \050such) 233.42 631 P
(as copy-on-write\051 required.) 72 617 T
(However) 90 599 T
(, if the thread is aborted via) 133.48 599 T
1 F
(thr) 268.04 599 T
(ead_abort\050\051) 283.81 599 T
0 F
(, we can no longer make guarantees) 343.77 599 T
(about the memory that is in transit. Exception processing may occur) 72 585 T
(, the thread may be resumed) 398.3 585 T
-0.41 (in a dif) 72 571 P
-0.41 (ferent place, or the task may be terminated. If transmission of the message has begun it will) 104.94 571 P
(be completed, a guarantee made by Mach IPC. This brings us to the following implementation) 72 557 T
(rules for distributed messages:) 72 543 T
(\245 A message that has not established a connection may) 108 525 T
( be completely) 372.68 525 T
(aborted; this case also includes a sender blocked due to a queue limit.) 115.2 511 T
(\245) 108 493 T
(A message that has established a connection must have) 115.2 493 T
(copy-on-write) 382.67 493 T
-0.22 (processing initiated on the memory involved before exception processing) 115.2 479 P
(is invoked.) 115.2 465 T
0 10 Q
(1) 167.84 469.8 T
72 144 540 159 C
81 157 225 157 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 141.33 T
0 10 Q
(However) 96 137.33 T
(, we currently de\336ne that all volatile regions remain volatile at abort time. If the region was not) 132.23 137.33 T
(originally volatile, it was marked for COW at copyin time, anyway) 90 125.33 T
(. The only tough case is a true RPC: the) 357.5 125.33 T
(region is treated as volatile during transmission. If the RPC is aborted on the send side, the region has not) 90 113.33 T
(been transmitted and may be regarded as non-volatile by the sending task. If the RPC is aborted on the) 90 101.33 T
(receive side, the region may have been transmitted, or will be transmitted at some future time. The region) 90 89.33 T
(remains volatile until the sending task receives the reply to its RPC.) 90 77.33 T
FMENDPAGE
%%EndPage: "48" 57
%%Page: "49" 57
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(49) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 6) 72 704 S
0 24 Q
-0.48 (Distributed Port Right Management) 180 704 S
0 12 Q
-0.16 (The overall goal of this area of the design is to introduce no additional inter) 90 582 P
-0.16 (-node communica-) 449.9 582 P
(tion to manage port rights over and above that already required to pass messages. This is accom-) 72 568 T
(plished by distributing state in such a way as to convert right management operations that would) 72 554 T
(otherwise require inter) 72 540 T
(-node communication to local operations. W) 180.34 540 T
(e present the design followed) 393.23 540 T
(by an explanation of its rationale.) 72 526 T
1 14 Q
(6.1 Design Overview) 72 496.67 T
0 12 Q
(The distributed port right management design consists of six components:) 90 477 T
(1.  Changes to port allocation interface to designate ports that require no) 108 459 T
(more senders noti\336cations.) 122.4 445 T
(2.  Management of send rights with no more senders noti\336cations.) 108 427 T
(3.  Management of send rights without no more senders noti\336cations.) 108 409 T
(4.  Management of send once rights.) 108 391 T
(5.  Management of dead name noti\336cations.) 108 373 T
(6.  Management of receive right transfer \050migration\051.) 108 355 T
(In each of the right transfer cases, a right exists in one of three states, namely on the sending) 90 337 T
(node, in transit \050network state\051, and on the receiving node. The bulk of the design consists in) 72 323 T
(describing the transitions between these states. A right starts out in the \324on sending node\325 state) 72 309 T
(when the message is initially sent. It enters the \324network\325 state when the) 72 295 T
2 10 Q
(NORMA) 420.42 295 T
0 12 Q
( code on the send-) 450.4 295 T
(ing node converts the message from local format to network format. It exits the \324network\325 state) 72 281 T
(when) 72 267 T
2 10 Q
( NORMA) 97.98 267 T
0 12 Q
( code on the receiving node converts the message from network format to local for-) 133.96 267 T
-0.23 (mat. Receive rights have an additional intermediate \324migrating\325 states that occur between the \324net-) 72 253 P
-0.35 (work\325 and \324on receive node\325 states because the conversion to local format is complex and requires) 72 239 P
(additional state to be retrieved from the sending node.) 72 225 T
1 14 Q
(6.2 No Mor) 72 195.67 T
(e Senders Interface Change) 139.75 195.67 T
0 12 Q
(The state maintenance required to correctly deliver no more senders noti\336cations in a distrib-) 90 176 T
(uted system requires additional interactions between nodes when rights are deallocated. Since) 72 162 T
(send right deallocation is a relatively common operation, and the use of no more senders noti\336ca-) 72 148 T
(tions is relatively rare, the Mach kernel\325) 72 134 T
(s port allocation interface will be changed to explicitly) 263.52 134 T
-0.02 (identify ports that require no more sender noti\336cations so that the common case of deallocating a) 72 120 P
(send right for a port that does not require no more senders noti\336cations can be optimized.) 72 106 T
FMENDPAGE
%%EndPage: "49" 58
%%Page: "50" 58
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(50) 530.01 47.33 T
0 12 Q
(Speci\336cally) 90 712 T
(, the following changes will be made to the Mach kernel interface:) 145.85 712 T
-0.33 (\245 The existing) 108 694 P
6 10 Q
-0.66 (mach_port_allocate) 176.84 694 P
0 12 Q
-0.33 ( interface allocates a port on which no) 284.78 694 P
(more senders noti\336cations may not be used.) 115.2 680 T
-0.27 (\245 A new interface,) 108 662 P
6 10 Q
-0.54 (mach_port_allocate_full) 196.71 662 P
0 12 Q
-0.27 (,) 334.64 662 P
-0.27 (is introduced to allocate a) 343.1 662 P
(port on which no more senders noti\336cations may be used.) 115.2 648 T
-0.02 (\245 Ports created by the kernel \050e.g. those representing kernel objects\051 do not) 108 630 P
(permit the use of no more senders.) 115.2 616 T
(\245 It is an error to request a no more senders noti\336cation on a port that does) 108 598 T
(not permit it.) 115.2 584 T
(\245 The mps_srights \336eld in the) 108 566 T
2 10 Q
(mach_port_status_t) 252.12 566 T
0 12 Q
( structure returned by) 360.07 566 T
(mach_port_status is changed from a boolean to an integer) 115.2 552 T
(. The encoded) 391.67 552 T
(value MPS_UNKNOWN is returned for a port that does not permit no) 115.2 538 T
(more senders noti\336cations indicating that it is unknown whether send) 115.2 524 T
(rights exist. The existing boolean true and false values are encoded as) 115.2 510 T
(MPS_TRUE and MPS_F) 115.2 496 T
(ALSE.) 235.6 496 T
-0.29 (These interface changes apply to both) 90 478 P
2 10 Q
-0.58 (NORMA) 272.79 478 P
0 12 Q
-0.29 ( and non-) 302.77 478 P
2 10 Q
-0.58 (NORMA) 347.5 478 P
0 12 Q
-0.29 ( systems. A reserved value \050-1\051 in) 377.48 478 P
(the ip_nsrequest \336eld of a port indicates that the port does not permit no senders requests. The) 72 464 T
(only impact on existing code is that the new) 72 450 T
6 10 Q
(mach_port_allocate_full) 286.2 450 T
0 12 Q
( interface must be used) 424.13 450 T
(to allocate a port on which no more senders noti\336cations will be used. Forbidding the use of no) 72 436 T
(more senders noti\336cations on ports created by the kernel has no impact outside of) 72 422 T
2 10 Q
(NORMA) 466.39 422 T
0 12 Q
( as no) 496.38 422 T
(more senders noti\336cation is not used by non-) 72 408 T
2 10 Q
(NORMA) 287.53 408 T
0 12 Q
( kernel subsystems.) 317.52 408 T
1 14 Q
(6.3 Send Rights W) 72 378.67 T
(ith No Mor) 182.15 378.67 T
(e Senders: T) 248.74 378.67 T
(ransits) 322.32 378.67 T
0 12 Q
(A transit is the network representation of a send right, and can be thought of as a distributed) 90 359 T
(reference count. All port structures \050both principal and proxy\051 for a port that utilizes no more) 72 345 T
(senders noti\336cations keep both a count of send rights \050on the local\051 node and a count of transits.) 72 331 T
(On the principal, the transit count is a count of the number of send rights the principal believes) 72 317 T
-0.03 (exists outside the principal\325) 72 303 P
-0.03 (s node. On a proxy) 203.49 303 P
-0.03 (, the transit count is the corresponding count of the) 293.51 303 P
-0.05 (number of rights outside the principal\325) 72 289 P
-0.05 (s node that are represented by the send rights on the proxy) 255.96 289 P
-0.05 (.) 534.06 289 P
(A simple implementation could demand that the transit and send right counts always match on a) 72 275 T
-0.36 (proxy) 72 261 P
-0.36 (, hence requiring the principal to be contacted every time a send right is created or destroyed) 99.2 261 P
(on another node. By allowing these counts to dif) 72 247 T
(fer) 304.64 247 T
(, many cases of right creation and destruction) 317.47 247 T
-0.07 (can become local operations that do not require contacting the principal. T) 72 233 P
-0.07 (o distinguish the dif) 427.49 233 P
-0.07 (fer-) 522.69 233 P
-0.29 (ent meanings of the transit count on the principal and proxy) 72 219 P
-0.29 (, the principal\325) 354.8 219 P
-0.29 (s transit count is always) 423.85 219 P
-0.22 (zero or negative \050vs. proxy transit counts that are always zero or positive\051; this convention will be) 72 205 P
(retained. T) 72 191 T
(ransit counts are not visible at the Mach kernel interface.) 123.54 191 T
(There are three critical invariants that govern the management of send rights with transits:) 90 173 T
(1.  Any send right in the \324network\325 state must \324carry\325 at least one transit.) 108 155 T
(Disposition of the transit\050s\051 after the transfer is unspeci\336ed.) 122.4 141 T
-0.23 (2.  If one or more send rights for a port exist on a node other than the port\325) 108 123 P
-0.23 (s) 460.57 123 P
(principal node, the proxy on that node must have at least one transit.) 122.4 109 T
-0.32 (3.  At all times, the sum of transits held by proxies and by send rights in the) 108 91 P
(\324network\325 state must equal the count of transits on the principal.) 122.4 77 T
FMENDPAGE
%%EndPage: "50" 59
%%Page: "51" 59
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(51) 530.01 47.33 T
0 12 Q
(In support of the \336rst invariant, the following conventions are employed:) 90 712 T
-0.02 (\245 If the destination port in the message header is a send right, it carries one) 108 694 P
(transit. This transit is returned to the sending node when the message is) 115.2 680 T
(enqueued on the receiving node.) 115.2 666 T
(\245 If the reply port in the message header is a send right, it carries one tran-) 108 648 T
(sit. This transit is retained by the receiving node.) 115.2 634 T
(\245 A send right in a message body carries one transits. These transits are) 108 616 T
(retained by the receiving node.) 115.2 602 T
-0.37 (There are two inter) 90 584 P
-0.37 (-node bookkeeping RPC operations involved in transit maintenance, one to) 180.24 584 P
(request more transits \050) 72 570 T
6 10 Q
(drpc_acquire_transits) 178.92 570 T
0 12 Q
(\051, and one to return excess transits) 304.85 570 T
(\050) 72 556 T
6 10 Q
(drpc_yield_transits) 75.99 556 T
0 12 Q
(\051.) 189.93 556 T
6 10 Q
(drpc_acquire_transits) 199.92 556 T
0 12 Q
( is used when a proxy has insuf) 325.85 556 T
(\336cient) 475.87 556 T
(transits to convert a send right to network format; this RPC is directed at the principal node and) 72 542 T
(returns a \336xed number of additional transits \050the constant 100 will be used in the initial) 72 528 T
-0.02 (implementation\051. This routine may also return an error code indicating that the principal has died) 72 514 P
-0.39 (\050and hence the proxy should be destroyed\051 or that the principal has moved \050and the requestor must) 72 500 P
-0.21 (ask the principal on the new node\051.) 72 486 P
6 10 Q
-0.42 (drpc_yield_transits) 241.74 486 P
0 12 Q
-0.21 ( is used only when a proxy with a non-) 355.68 486 P
(zero transit count is destroyed, and serves to return the proxy\325) 72 472 T
(s transits to the principal.) 368.12 472 T
1 14 Q
(6.3.1 Send Right Copyin) 72 442.67 T
0 12 Q
(Send rights are converted to network format as part of copyin processing. T) 90 423 T
(o convert a port,) 451.89 423 T
(the routine) 72 409 T
1 F
(dipc_port_copyin) 126.63 409 T
0 F
( is used.) 216.59 409 T
(For send rights,) 90 391 T
1 F
(dipc_port_copyin) 167.96 391 T
0 F
( works as follows:) 257.92 391 T
(1.  If the right has never been exported, the dipc port extension is added, a) 108 373 T
(UID is assigned, and the UID is entered in the UID table) 122.4 359 T
(2.  If this is a proxy) 108 341 T
(, there are additional srights, and the transit count is) 200.83 341 T
(only one, then) 122.4 327 T
1 F
(drpc_acquir) 193.69 327 T
(e_transits) 256.77 327 T
0 F
( is called to acquire more transits) 306.74 327 T
(3.  The local sright count is decremented) 108 309 T
-0.29 (4.  The transit count is decremented \050This is a transit increase from a princi-) 108 291 P
(pal and a transit decrease on a proxy\051) 122.4 277 T
(5.  The UID is returned to the called implicitly carrying with it a transit) 108 259 T
-0.11 (An important implementation note for copyin processing: the bit describing whether the local) 90 241 P
(port allows no more senders noti\336cations must be set or not as part of conversion to network for-) 72 227 T
(mat. This is needed at copyout time if the port has never been seen and must be created.) 72 213 T
-0.45 (It is possible that the) 90 195 P
1 F
-0.45 (drpc_acquir) 190.04 195 P
-0.45 (e_transits) 253.12 195 P
0 F
-0.45 ( RPC will reveal that the principal port is dead. In) 303.09 195 P
(this case, one of two things will occur at the copyin layer:) 72 181 T
(1.  If the right being converted was the destination right, the message is) 108 163 T
(destroyed, and the sending thread receives an invalid destination error) 122.4 149 T
(.) 457.48 149 T
(2.  Otherwise the right is represented in the message using the reserved) 108 131 T
(value to indicate a dead port \050NORMA_POR) 122.4 117 T
(T_DEAD, converts to) 338.2 117 T
(MACH_POR) 122.4 103 T
(T_DEAD on reception\051.) 186.98 103 T
FMENDPAGE
%%EndPage: "51" 60
%%Page: "52" 60
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(52) 530.01 47.33 T
1 14 Q
(6.3.2 Send Right Copyout) 72 710.67 T
0 12 Q
(Conversion of network format send rights to local ports is handled by) 90 691 T
1 F
(dipc_port_copyout.) 426.45 691 T
(dipc_port_copyou) 72 677 T
(t) 164.62 677 T
0 F
( takes as additional parameters the originating node, and two booleans indi-) 168.62 677 T
(cating whether this is the destination right and whether the port allows no more) 72 663 T
( senders.) 452.08 663 T
1 F
(dipc_port_copyout) 72 649 T
0 F
(for send rights works as follows:) 171.62 649 T
(1.  Look up the UID in the UID table.) 108 631 T
(2.  If it does not exist and this is not the destination, create a local port and) 108 613 T
-0.23 (insert it with the speci\336ed UID in the table. The destination node for the) 122.4 599 P
(port is speci\336ed to be the originating node from the UID) 122.4 585 T
(3.  Increase the local sright count.) 108 567 T
-0.03 (4.  If this port is not the destination, decrement the transit count. \050This will) 108 549 P
(increase transits on a proxy and decrease them on the principal\051) 122.4 535 T
(5.  Return the local ipc_port_t to the caller) 108 517 T
(.) 310.87 517 T
(One important implementation detail: Local send rights hold references to the port data struc-) 90 499 T
(ture \050principal or proxy\051, transits do not.) 72 485 T
1 14 Q
(6.4 Send Rights W) 72 455.67 T
(ithout No Mor) 182.15 455.67 T
(e Senders) 268.17 455.67 T
0 12 Q
(No distributed state is maintained for this case. A send right is converted to its network form) 90 436 T
(by decrementing the local send right count and substituting its network representation into the) 72 422 T
-0.17 (message. A send right is converted from network form by incrementing the local send right count) 72 408 P
(and substituting its local form into the message. Port reference counts adjust in the same way) 72 394 T
(because a local send right holds a port reference.) 72 380 T
0 10 Q
(1) 305.46 384.8 T
1 14 Q
(6.5 Send Once Rights) 72 350.67 T
0 12 Q
(Send once rights maintain a count of remote send once rights on the principal only) 90 331 T
(. A send) 484.95 331 T
(once right is converted to its network form by decrementing the local send once right count, and) 72 317 T
(incrementing the remote send once right count if this is the principal node. A send once right is) 72 303 T
(converted from network form by incrementing the local send once right count, and decrementing) 72 289 T
-0.04 (the remote send once right count if this is the principal. If the right is a proxy and the port is new) 72 275 P
-0.04 (,) 534.04 275 P
(then the port is created and the destination node is speci\336ed as the node from which this right) 72 261 T
(came. This should cover the general case of send once rights used as reply ports for RPCs. Port) 72 247 T
(reference counts adjust in the same way because a local send once right holds a port reference.) 72 233 T
(This simple technique works because unlike send rights, send once rights can only be created) 72 219 T
-0.1 (from the receive right, and deallocating a send once right causes a noti\336cation message to be sent) 72 205 P
(to the corresponding receive right.) 72 191 T
1 14 Q
(6.6 Dead Name Noti\336cations) 72 161.67 T
0 12 Q
-0.11 (W) 90 142 P
-0.11 (e retain the algorithms used in V) 100.36 142 P
-0.11 (ersion One. Dead name noti\336cations for the node on which) 254.95 142 P
(the principal resides are unchanged. Dead name noti\336cations for other nodes are attached to the) 72 128 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 93.33 T
0 10 Q
(If the relative lengths of the above two sections aren\325) 96 89.33 T
(t a convincing case for considering deletion of no) 308.15 89.33 T
(more senders on complexity grounds, the editors don\325) 90 77.33 T
(t know what is.) 305.23 77.33 T
FMENDPAGE
%%EndPage: "52" 61
%%Page: "53" 61
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(53) 530.01 47.33 T
0 12 Q
-0.42 (proxy port structure on that node. When the \336rst dead name noti\336cation is attached to a proxy) 72 712 P
-0.42 (, that) 513.85 712 P
(proxy requests a) 72 698 T
2 10 Q
(NORMA) 153.6 698 T
0 12 Q
( dead name noti\336cation from the principal, using a) 183.59 698 T
6 10 Q
(drpc_dn_register) 428.76 698 T
0 12 Q
-0.11 (RPC. A) 72 684 P
2 10 Q
-0.22 (NORMA) 112.1 684 P
0 12 Q
-0.11 ( dead name noti\336cation is entered into the principal\325) 142.08 684 P
-0.11 (s dead name request structures) 391.02 684 P
-0.2 (like any other dead name noti\336cation request, except that a reserved value that can\325) 72 670 P
-0.2 (t possibly be a) 468.85 670 P
-0.42 (port pointer is used \0500x22222222 in the current implementation\051. The port name contains the node) 72 656 P
(number of the proxy that requested the) 72 642 T
2 10 Q
(NORMA) 260.86 642 T
0 12 Q
( dead name noti\336cation. When the port dies, the) 290.84 642 T
(code that sends dead name noti\336cations detects this value and calls) 72 628 T
2 10 Q
(NORMA) 396.11 628 T
0 12 Q
( code to actually send) 426.09 628 T
-0.37 (the noti\336cation.) 72 614 P
2 10 Q
-0.75 (NORMA) 149.54 614 P
0 12 Q
-0.37 ( informs the node of the proxy that the proxy \050identi\336ed by) 179.53 614 P
2 10 Q
-0.75 (NORMA) 460.85 614 P
0 12 Q
-0.37 ( UID\051 has) 490.83 614 P
-0.02 (died by sending a) 72 600 P
6 10 Q
-0.05 (drpc_dn_notify) 159.19 600 P
0 12 Q
-0.02 ( RPC. This causes the) 243.14 600 P
2 10 Q
-0.05 (NORMA) 350.97 600 P
0 12 Q
-0.02 ( code on that node to destroy the) 380.95 600 P
(proxy and take the resulting appropriate actions \050including delivery of dead name noti\336cations) 72 586 T
(registered with it\051. This sequence happens for each proxy that has a dead name noti\336cation) 72 572 T
(attached to it \050and hence has a) 72 558 T
2 10 Q
(NORMA) 219.54 558 T
0 12 Q
( dead name noti\336cation registered with the principal\051.) 249.53 558 T
(An interface change related to dead name noti\336cations is lazy evaluation of port death. The) 90 540 T
-0.28 (formal change is that port death may be lazily evaluated with respect to message transfer) 72 526 P
-0.28 (, i.e., two) 493.21 526 P
-0.2 (tasks may successfully exchange a send or send-once rights to a port that is dead \050receive right no) 72 512 P
(longer exists\051 if no dead name noti\336cation was requested for the right involved. If a dead name) 72 498 T
(noti\336cation was requested, the right becomes a dead name promptly upon destruction of the) 72 484 T
(receive right \050this is not guaranteed to be immediate -- tasks on dif) 72 470 T
(ferent nodes may be able to) 390.89 470 T
(determine that the receive right was destroyed and the send right was successfully sent in a mes-) 72 456 T
-0.13 (sage afterwards because there is no guarantee of atomicity of the ef) 72 442 P
-0.13 (fects of destroying the receive) 393.1 442 P
-0.15 (right in the distributed case, nor should there be\051. In addition, attempting to send a message to the) 72 428 P
-0.43 (right or calling) 72 414 P
6 10 Q
-0.86 (mach_port_status) 145.01 414 P
0 12 Q
-0.43 ( on it will result in it becoming a dead name if the receive right) 240.95 414 P
-0.46 (has been destroyed. This lazy evaluation is necessary to avoid having to contact the principal node) 72 400 P
(when two proxy nodes transfer a send or send-once right between themselves.) 72 386 T
1 14 Q
(6.7 Receive Right Migration) 72 356.67 T
0 12 Q
(The receive right migration \050transfer\051 design addresses the following areas:) 90 337 T
(1.  Actual transfer of receive right state \050including queued messages or) 108 319 T
(meta-kmsgs\051 between nodes.) 122.4 305 T
(2.  Ef) 108 287 T
(fect on operations that occur during the migration.) 134.1 287 T
(3.  Ef) 108 269 T
(fect on operations occurring after the migration \050including how the) 134.1 269 T
(new location is discovered\051.) 122.4 255 T
(4.  Cleanup of residual state when a migrated port is destroyed.) 108 237 T
1 14 Q
(6.7.1 State T) 72 207.67 T
(ransfer) 145.59 207.67 T
0 12 Q
(The state components to be transferred consist of:) 90 188 T
(\245 Queued messages) 108 170 T
(\245 Dead name noti\336cations) 108 152 T
(\245 Rights and transit counts) 108 134 T
-0.09 (\245 Other state associated with port \050sequence number) 108 116 P
-0.09 (, make send count, etc.) 355.88 116 P
(See existing) 115.2 102 T
2 10 Q
(NORMA IPC) 176.5 102 T
0 12 Q
( V) 230.47 102 T
(ersion One implementation of) 240.79 102 T
6 10 Q
(norma_ipc_pull_receive) 115.2 88 T
0 12 Q
( for details\051) 247.13 88 T
FMENDPAGE
%%EndPage: "53" 62
%%Page: "54" 62
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(54) 530.01 47.33 T
0 12 Q
(Receive right migration begins at copyin time on the sending node. At this time, the sender) 90 712 T
-0.26 (marks the port as a network port. This allows the enqueueing of messages while the port is in tran-) 72 698 P
(sit. The message queue is then traversed and all messages are converted to network format. The) 72 684 T
(port may then be sent in a message.) 72 670 T
(The next step in receive right migration is initiated at the recipient upon copyout. At copyout) 90 652 T
(time, the receiving thread marks the local port to block all enqueueing threads and to have all) 72 638 T
(messages enqueued in local format. It then sends a) 72 624 T
1 F
(drpc_begin_r) 317.82 624 T
(ecv_migrate) 386.9 624 T
0 F
( RPC to the send-) 449.51 624 T
(ing node.) 72 610 T
-0.14 (The) 90 592 P
1 F
-0.14 (drpc_begin_r) 111.51 592 P
-0.14 (ecv_migrate) 180.59 592 P
0 F
-0.14 (RPC) 246.06 592 P
-0.14 (is handled by an internal thread on the sender dedicated) 271.59 592 P
-0.31 (to handling receive right migration. It marks the principal to block all enqueueing threads. Any qe) 72 578 P
-0.4 (queued messages are sent from sender to receiver using the existing message transfer mechanisms) 72 564 P
-0.48 (for kmsgs and) 72 550 P
1 F
-0.48 (drpc_send_meta_kmsg) 141.52 550 P
0 F
-0.48 ( for meta kmsgs) 259.45 550 P
-0.48 (. This requires only that the receiving node) 334.97 550 P
-0.33 (understand that the message is being forwarded, and may have originated on a node other than the) 72 536 P
(one forwarding it. It is not necessary to transfer blocked sender records from the sender to the) 72 522 T
(receiver \050although it may be an optimization to do so\051. Instead, it is suf) 72 508 T
(\336cient to awaken all) 411.89 508 T
(blocked senders with an indication that the port has moved when the migration is complete and) 72 494 T
-0.06 (have them attempt to send to the new node \050and reblock if needed\051. This separates port migration) 72 480 P
(from the ef) 72 466 T
(fect of a blocked senders record shortage on the tar) 125.07 466 T
(get node \050at the potential cost of) 369.64 466 T
(many inter) 72 452 T
(-node messages if there are many blocked senders -- we assume that this is a rare case) 123.39 452 T
(for now\051.) 72 438 T
(Dead name noti\336cations are not transferred between nodes. Instead, the destination node of) 90 420 T
-0.23 (the migration is informed that the source requires a node to node dead name noti\336cation when the) 72 406 P
(receive right is destroyed. This will invoke code on the source that causes any needed noti\336ca-) 72 392 T
-0.3 (tions to be delivered locally) 72 378 P
-0.3 (. The design and much of the implementation \050e.g., how these node-to-) 203.25 378 P
0 (node dead name noti\336cations coexist with ordinary IPC dead name noti\336cations\051 of this function-) 72 364 P
(ality can be transferred from the existing) 72 350 T
2 10 Q
(NORMA) 270.18 350 T
0 12 Q
( system. \050See section 6.6, \322Dead Name Noti\336ca-) 300.16 350 T
(tions,\323 on page 52.\051) 72 336 T
(Send and send once rights are not transferred. These counts represent rights that exist on the) 90 318 T
(source node that are not accompanying the receive right being transferred. If transits are in use,) 72 304 T
(one transit must be left behind if any send rights remain on the source \050with the resulting transit) 72 290 T
(count at the destination adjusted accordingly\051. If transits exist at the destination, they are can-) 72 276 T
(celled against the receive right\325) 72 262 T
(s count of outstanding transits. The existing) 221.88 262 T
2 10 Q
(NORMA) 434.43 262 T
0 12 Q
( logic of pre-) 464.41 262 T
(loading an arbitrary value into the transit \050and sotransit\051 variables is no longer needed because) 72 248 T
-0.09 (operations cannot occur on these data structures during the migration. Other state associated with) 72 234 P
(the port is moved directly as part of this \050refer to) 72 220 T
2 10 Q
(NORMA IPC) 308.16 220 T
0 12 Q
( V) 362.13 220 T
(ersion One\325) 372.46 220 T
(s norma_ipc_pull_re-) 428.08 220 T
(ceive implementation, which identi\336es this state\051.) 72 206 T
FMENDPAGE
%%EndPage: "54" 63
%%Page: "55" 63
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(55) 530.01 47.33 T
1 12 Q
(Figur) 179.52 311 T
(e 5: Migrating port state transition diagram) 207.96 311 T
1 14 Q
(6.7.2 Detailed State T) 72 281.67 T
(ransfer Sequence:) 198.83 281.67 T
0 12 Q
(\0501\051 On sending node at message send time, the IPC copyin of the message containing the) 90 262 T
-0.07 (receive right puts the port into network state. Messages can be sent to such a port, but because no) 72 248 P
-0.35 (task holds the receive right, no messages can be received. The receive right\325) 72 234 P
-0.35 (s local message queue) 432.16 234 P
(is scanned, and any messages not already in) 72 220 T
2 10 Q
(NORMA) 285.51 220 T
0 12 Q
( transport format are converted at this time.) 315.49 220 T
-0.21 (This conversion may allocate memory for data structures to describe out of line memory and buf) 72 206 P
-0.21 (f-) 532.01 206 P
(ers to hold UIDs for ports sent out of line. The IPC copyin logic treats a port in network state as) 72 192 T
-0.29 (remote, so all subsequent messages enqueued on the port will have been converted to) 72 178 P
2 10 Q
-0.58 (NORMA) 480 178 P
0 12 Q
-0.29 ( trans-) 509.98 178 P
(port format by the IPC copyin code.) 72 164 T
(\0502\051 The IPC message containing the receiver right is transferred to the receiving node. It con-) 90 146 T
(tains only the name of the receive right, and no other associated state.) 72 132 T
(\0503\051 When the message is transferred to the receiver) 90 114 T
(, the receiver creates a port data structure) 333.97 114 T
(\050or converts an existing proxy\051 to hold the receive right. This new structure is marked as migrat-) 72 100 T
(ing to block further enqueue operations.) 72 86 T
72 72 540 720 C
84.38 324 527.62 708 C
7 X
0 K
90 450 40.5 22.5 142.88 658.5 G
0.5 H
2 Z
0 X
90 450 40.5 22.5 142.88 658.5 A
7 X
90 450 40.5 22.5 142.88 568.5 G
0 X
90 450 40.5 22.5 142.88 568.5 A
0 12 Q
(Principal) 113.07 656.6 T
141.68 611.54 138.38 600 135.07 611.54 138.38 611.54 4 Y
V
138.38 627 138.38 611.54 2 L
N
(Network) 123.41 564.82 T
7 X
90 450 40.5 22.5 394.88 523.5 G
0 X
90 450 40.5 22.5 394.88 523.5 A
7 X
90 450 40.5 22.5 394.88 388.5 G
0 X
90 450 40.5 22.5 394.88 388.5 A
7 X
90 450 40.5 22.5 142.88 370.5 G
0 X
90 450 40.5 22.5 142.88 370.5 A
(Migrate) 372.38 519.82 T
(Principal) 374.07 386.6 T
(Proxy) 120.38 366 T
291.38 690 291.38 339 2 L
4 H
4 K
N
0 K
(node A) 210.38 681 T
(node B) 336.38 681 T
365.93 556.86 372.37 546.01 361.15 551.8 363.54 554.33 4 Y
V
0.5 H
18 90 180 27 192.38 546 A
402.68 431.54 399.38 420 396.07 431.54 399.38 431.54 4 Y
V
399.38 431.54 399.38 447 2 L
N
168.07 401.32 156.37 397.51 164.27 406.94 166.17 404.13 4 Y
V
90 163 224.99 22.5 381.37 397.5 A
141.68 413.54 138.38 402 135.07 413.54 138.38 413.54 4 Y
V
138.38 429 138.38 413.54 2 L
N
138.38 510 138.38 501 2 L
N
138.38 492 138.38 483 2 L
N
138.38 474 138.38 465 2 L
N
6 10 Q
(mach_msg) 147.38 609 T
(drpc_begin_recv_migrate) 301.81 492.82 T
163.7 469.34 147.38 474 163.69 478.7 163.7 474.02 4 Y
V
274 360 234 9 147.38 483 A
368.62 468.66 381.38 465 368.62 461.34 368.62 465 4 Y
V
368.62 432.66 381.38 429 368.62 425.34 368.62 429 4 Y
V
(dipc_migrate_state) 147.38 440.57 T
399.38 474 399.38 483 2 L
N
399.38 465 399.38 456 2 L
N
138.38 456 138.38 438 2 L
N
138.38 519 138.38 528 2 L
N
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "55" 64
%%Page: "56" 64
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(56) 530.01 47.33 T
0 12 Q
(\0504\051 The receiver performs a) 90 712 T
6 10 Q
( drpc_begin_Recv_migrate) 221.87 712 T
0 12 Q
( RPC to the sender to cause queued) 365.79 712 T
-0.4 (messages to be transferred. The sender) 72 698 P
-0.4 (\325) 256.28 698 P
-0.4 (s initial receipt of this RPC puts the port into the migrating) 259.61 698 P
(state in which it behaves as if its queue were full \050even if it is not\051; ordinary senders block, but) 72 684 T
(messages that ignore queue limits continue to be queued. The sender replies to the RPC at this) 72 670 T
(point.) 72 656 T
(\0505\051 The transfer of queued messages occurs via the same mechanisms used to transfer other) 90 638 T
(Mach messages \050e.g., only the meta-kmsgs need be transferred in most cases\051. Message ordering) 72 624 T
(is preserved by transferring only one message at a time. Only MACH_POR) 72 610 T
(T_QLIMIT_MAX) 433.7 610 T
(messages need to be transferred; messages beyond that limit must be MACH_SEND_AL) 72 596 T
(W) 499.16 596 T
(A) 509.15 596 T
(YS) 516.7 596 T
(messages from senders on the principal\325) 72 582 T
(s original node that can remain queued on the proxy) 264.19 582 T
(.) 512.9 582 T
(\050Refer to Section 6.7.3 for more detail on the queue limit interaction.\051) 72 568 T
(The receiver of a migrating port recognizes migrating messages based on their originating) 90 550 T
(node. Because the originator converts the principal into a forwarding proxy but marks it as) 72 536 T
(blocked, all ordinary user and kernel threads will block when attempting to send or enqueue a) 72 522 T
(message on the forwarding proxy) 72 508 T
(. Thus, any messages arriving from the originating node must) 231.76 508 T
(have been generated by the migration algorithm.) 72 494 T
(The receiver refuses all other messages, forcing other senders to wait for the migration pro-) 90 476 T
(cess to complete.) 72 462 T
(\0506\051 Finally) 90 444 T
(, port state other than queued messages \050transits, remote send once right count\051 is) 140.19 444 T
(transferred by the sender at this time, as a separate) 72 430 T
6 10 Q
(drpc_migrate_state) 316.8 430 T
0 12 Q
( RPC to the receiver) 424.74 430 T
(.) 521.34 430 T
(This also indicates whether any MACH_SEND_AL) 72 416 T
(W) 320.61 416 T
(A) 330.6 416 T
(YS messages are queued and whether) 338.16 416 T
(there are any local blocked senders \050if either is true, a blocked sender record naming the sending) 72 402 T
(node must be created by the receiver\051.) 72 388 T
(\0507\051 The receiver inserts the port state into the port data structure, marks it as a principal,) 90 370 T
(changes its state to normal from migrating, replies to the RPC, and creates a) 72 356 T
2 10 Q
(NORMA) 439.75 356 T
0 12 Q
( dead name) 469.74 356 T
(noti\336cation for the sending node. The sender then converts its principal to a proxy and removes) 72 342 T
(this port from the migrating state, and restarts all blocked senders. It is important for the receiver) 72 328 T
(to exit the migrating state \336rst to avoid having the sender restart a blocked sender which immedi-) 72 314 T
(ately blocks again because the receiver is not ready) 72 300 T
(.) 317.01 300 T
(Messages sent to a port while it is being migrated are treated as if they exceeded the queue) 90 282 T
(limit; ordinary senders block, and MACH_SEND_AL) 72 268 T
(W) 330.95 268 T
(A) 340.94 268 T
(YS messages are queued on the proxy) 348.5 268 T
-0.22 (queue; this is why the sender must indicate whether it has any such messages in step \0506\051. Clearing) 72 254 P
(the migrate bit in step \0505\051 will unblock all such blocked senders with an indication that the port) 72 240 T
-0.06 (has moved, including the node number of the port\325) 72 226 P
-0.06 (s new location; this is identical to the behavior) 314.35 226 P
(senders will experience if they send to the old location after migration.) 72 212 T
1 14 Q
(6.7.3 Sidebar on Port Queue Limit) 72 182.67 T
0 12 Q
(There is an out-of-order message delivery problem when changing the queue limit on a port) 90 163 T
(with enqueued messages that subsequently migrates. Consider the following sequence of events:) 72 149 T
(1.  Principal P on node A with queue limit N.) 108 131 T
-0.45 (2.  Proxy S1 on node U generates K messages, some of which are enqueued) 108 113 P
(successfully on P) 122.4 99 T
(.) 204.35 99 T
(3.  P\325) 108 81 T
(s queue limit is readjusted downards to M, M < N, such that one or) 132.99 81 T
FMENDPAGE
%%EndPage: "56" 65
%%Page: "57" 65
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(57) 530.01 47.33 T
0 12 Q
(more of S1\325) 122.4 712 T
(s original messages is enqueued after message M.) 179.03 712 T
(4.  Principal P migrates from node A to node B, taking along one queue) 108 694 T
(limit\325) 122.4 680 T
(s worth of messages \050M messages\051. Principal P turns into proxy) 148.4 680 T
(S2.) 122.4 666 T
-0.01 (5.  Because M < N, one or more of S1\325) 108 648 P
-0.01 (s messages are still enqueued on S2.) 293.85 648 P
(6.  There is now a race: as P drains its queue, there is no guarantee that all) 108 630 T
(messages will be serviced from S2 before messages from S1.) 122.4 616 T
(7.  In the case of an ordinary message sent from S1 and now enqueued on) 108 598 T
(S2, the sending thread may have been able to continue and generate a) 122.4 584 T
(new message.) 122.4 570 T
(8.  In the case of a MACH_SEND_AL) 108 552 T
(W) 292.97 552 T
(A) 302.96 552 T
(YS message sent from S1 and) 310.52 552 T
(now enqueued on S2, the sending thread is always able to continue and) 122.4 538 T
(possibly generate a new message.) 122.4 524 T
(W) 90 506 T
(e \336x this problem by always carrying MACH_POR) 100.36 506 T
(T_QLIMIT_MAX messages with a) 346.49 506 T
(migrating principal. Because the queue limit can never exceed this value, there is no way for a) 72 492 T
(remote sender to enqueue a message that can be left behind when the principal turns into a for-) 72 478 T
(warding proxy) 72 464 T
(. Moreover) 141.5 464 T
(, any messages left behind on the forwarding proxy must be MACH_-) 194.31 464 T
(SEND_AL) 72 450 T
(W) 124.41 450 T
(A) 134.4 450 T
(YS messages generated by senders on the same node from which the principal) 141.96 450 T
(migrated. Further messages from those senders will be enqueued behind the earlier ones. Thus,) 72 436 T
(message ordering is always maintained.) 72 422 T
1 14 Q
(6.7.4 Effects on other operations) 72 392.67 T
0 12 Q
(For simplicity) 90 373 T
(, other operations on the migrated port will be disabled during the migration) 156.86 373 T
-0.12 (operation \050e.g., attempts to enqueue a message will use the existing logic to block the sender) 72 359 P
-0.12 (, pos-) 513.47 359 P
(sibly including declaring a resource shortage\051. Operations that only af) 72 345 T
(fect the destination node) 406.87 345 T
(proxy may be allowed to proceed while the queued messages are being transferred; whatever is) 72 331 T
(the easiest to code will be done. Operations need only be disabled during the actual transfer of) 72 317 T
(messages and state between nodes; there is no problem, for example, with queueing additional) 72 303 T
(messages before this transfer is commenced.) 72 289 T
(After the migration, the original principal remains on the source node to inform other opera-) 90 271 T
(tions that the port has moved. An attempt to enqueue a message results in returning new informa-) 72 257 T
(tion about where the port can be found; the sender is expected to retain this information in its) 72 243 T
-0.34 (proxy to optimize future operations on this port. A level of indirection is needed on sending nodes) 72 229 P
-0.17 (to avoid having the port known by two names \050based on old and new node\051. The port must have a) 72 215 P
-0.02 (single) 72 201 P
2 10 Q
-0.05 (NORMA) 103.63 201 P
0 12 Q
-0.02 ( UID that does not change, but also has additional location information \050a node iden-) 133.61 201 P
(ti\336er\051 stored in the proxy) 72 187 T
(. This is equivalent to the use of norma_uid and destination node in the) 191.14 187 T
(current) 72 173 T
2 10 Q
(NORMA) 108.96 173 T
0 12 Q
( code.) 138.95 173 T
1 14 Q
(6.7.5 State Cleanup) 72 143.67 T
0 12 Q
(Implicit in the description of how the port is located after a migration is that state which) 90 124 T
(allows the port to be located remains on every node that has ever had the receive right until the) 72 110 T
(port is destroyed. Such \322forwarding proxies\323 must be explicitly destroyed when the receive right) 72 96 T
(is destroyed in order to release their memory) 72 82 T
(. The) 286.06 82 T
2 10 Q
(NORMA) 313.7 82 T
0 12 Q
( dead name noti\336cation mechanism is) 343.69 82 T
FMENDPAGE
%%EndPage: "57" 66
%%Page: "58" 66
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(58) 530.01 47.33 T
0 12 Q
(suf) 72 712 T
(\336cient to implement this.) 86.44 712 T
1 14 Q
(6.8 Port Data Structur) 72 682.67 T
(e Impact and Interface Changes) 206.2 682.67 T
3 12 Q
([TBD: Is everything her) 72 663 T
(e? Per) 187.14 663 T
(haps this belongs in another section?]) 218.56 663 T
0 F
0 (The following \336elds are present in the) 90 645 P
2 10 Q
0 (norma_ipc_port) 275.52 645 P
0 12 Q
0 ( data structure to implement the func-) 359.48 645 P
(tionality described in this chapter:) 72 631 T
(\245 A transit count for the transit logic. \050See section 6.3, \322Send Rights W) 108 613 T
(ith) 446.84 613 T
(No More Senders: T) 115.2 599 T
(ransits,\323 on page 50.\051) 213.04 599 T
-0.38 (\245 A remote send once count for tracking how many remote send once rights) 108 581 P
(exist. \050See section 6.5, \322Send Once Rights,\323 on page 52.\051) 115.2 567 T
(\245 A state \336eld to indicate network and migrating states for receive right) 108 549 T
(transfer \050See section 6.7, \322Receive Right Migration,\323 on page 53.\051) 115.2 535 T
(An attribute of this new design is that a proxy data structure can never hold a reference that) 90 517 T
(causes a principal data structure to continue to exist even when no port rights exist on the princi-) 72 503 T
(pal node. The) 72 489 T
2 10 Q
(NORMA) 140.61 489 T
0 12 Q
( UID table provides the needed level of indirection to implement this; if a) 170.6 489 T
(principal has been destroyed, the lookup of the destination port in an inbound message will fail.) 72 475 T
-0.19 (In addition to the interface change to make no more senders support explicit in the port alloca-) 90 457 P
(tion interface \050See section 6.2, \322No More Senders Interface Change,\323 on page 49.\051, there are two) 72 443 T
(other changes to the Mach interface required by this design:) 72 429 T
-0.22 (1.  Reducing a port\325) 108 411 P
-0.22 (s queue limit will fail when there are queued messages.) 202.06 411 P
(A port\325) 122.4 397 T
(s queue limit may only be reduced when no messages are) 156.71 397 T
-0.19 (queued. This avoids a nasty problem in receive right migration \050See sec-) 122.4 383 P
(tion 6.7.1, \322State T) 122.4 369 T
(ransfer) 213.26 369 T
(,\323 on page 53.\051) 246.08 369 T
(2.  The system is permitted to lazily evaluate port death as it af) 108 351 T
(fects send) 408.92 351 T
(and send once rights when a dead name noti\336cation has not been) 122.4 337 T
(requested. \050See section 6.6, \322Dead Name Noti\336cations,\323 on page 52.\051) 122.4 323 T
1 14 Q
(6.9 Distributed Port Management Backgr) 72 293.67 T
(ound and Goals) 320.08 293.67 T
0 12 Q
(Consider a port that represents an object \050e.g., an open \336le\051 for which the implementor of the) 90 274 T
-0.35 (object \050server\051 and user of the object \050client\051 are on dif) 72 260 P
-0.35 (ferent nodes. The life of the port consists of) 330.68 260 P
(the following mandatory and optional stages:) 72 246 T
(1. Creation. The port is created by the server on what we will call its origin node. The node) 90 228 T
(where a port currently resides is called its residence node, or residence. For simplicity) 72 214 T
(, assume) 483.24 214 T
(that the origin and residence nodes are identical and the residence node has never changed.) 72 200 T
(2. T) 90 182 T
(ransfer to client. A send right is created and transferred to the client on a dif) 108.9 182 T
(ferent node.) 472.4 182 T
(2a. \050Optional\051 A dead name noti\336cation is requested on the send right. The \336rst dead name) 90 164 T
(noti\336cation request generated by a node for a particular send right causes a message to the resi-) 72 150 T
(dence node. Subsequent dead name requests from the same node are handled locally) 72 136 T
(.) 475.9 136 T
-0.34 (3. Use of the object. The client sends messages to the server using the object as its destination.) 90 118 P
(This results in the client creating send rights that are absorbed by the server) 72 104 T
(.) 433.41 104 T
(4. \050Optional\051 T) 90 86 T
(ransfer to other clients. The client may transfer the send right to other clients,) 161.87 86 T
FMENDPAGE
%%EndPage: "58" 67
%%Page: "59" 67
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(59) 530.01 47.33 T
0 12 Q
(creating send rights that are not sent to the server) 72 712 T
(.) 306.83 712 T
(4a. \050Optional\051 Server deallocates receive right, generating dead name noti\336cations. No dead) 90 694 T
(name noti\336cations are generated if no requests for dead name detection have been registered for) 72 680 T
(the receive right.) 72 666 T
(5. Client deallocates the send right. An intelligent client may dispose of the send right by) 90 648 T
-0.16 (transferring it in its last message to the server) 72 634 P
-0.16 (, but often the right is deallocated via a kernel opera-) 288.11 634 P
(tion. W) 72 620 T
(e consider this stage to include any distributed state manipulation that is needed to cause) 107.02 620 T
(the next stage to happen \050if needed\051.) 72 606 T
-0.42 (6. \050Optional\051 No more senders \050NMS\051 noti\336cation. When the last send right is gone, the server) 90 588 P
-0.37 (receives a no more senders noti\336cation if it had requested one. Use of NMS is believed NOT to be) 72 574 P
(the common case.) 72 560 T
(Stages \0501\051 and \0506\051 are purely local operations involving the principal. Of the remaining four) 90 542 T
(stages involving two nodes, stage \0503\051 is the most important to optimize \050as there may be many) 72 528 T
(operations using the port\051, followed by a restricted form of stage \0504\051 in which the \336rst client and) 72 514 T
(server are located on the same node. For instance, the OSF/1 AD \336lesystem does this for the cre-) 72 500 T
-0.28 (dentials port. Stages \0502\051 and \0505\051 also merit attention, as they occur once for each port that does not) 72 486 P
(exist for the life of the system, which is by far the common case. The primary goal of optimizing) 72 472 T
(these stages is to avoid inter) 72 458 T
(-node bookkeeping interactions and their resulting latency) 206.67 458 T
(, even on a) 485.03 458 T
(high speed interconnect. A secondary bene\336t is reduced interconnect utilization.) 72 444 T
(In descending order of priority) 90 426 T
(, the optimization goals are:) 236.44 426 T
-0.16 ([A] Stage \0503\051: Creating a send right from a send right should not require contacting the holder) 90 408 P
(of the receive right. An alternative is to combine this interaction with queueing of the message.) 72 394 T
([B] Stage \0504\051: In addition to [A], depositing a send right onto a node from a message should) 90 376 T
(not require contacting the receiver) 72 362 T
(, even if the task into which the send right is deposited already) 236.05 362 T
(holds a send right to the same port.) 72 348 T
([C] Stage \0505\051: If the send right was consumed by the last message and an NMS noti\336cation is) 90 330 T
(required, then an additional inter) 72 316 T
(-node interaction is unavoidable. The optimization goal is to) 228.65 316 T
(avoid the interaction in all other cases.) 72 302 T
([D] Stages \0502a\051 and \0504a\051: Enabling dead name noti\336cation is already optional and not manda-) 90 284 T
(tory) 72 270 T
(. When requested, extra messages are required to implement this functionality; these extra) 90.54 270 T
(messages are unavoidable. The design and implementation should avoid paying any additional) 72 256 T
(cost above that present in the existing implementation.) 72 242 T
1 14 Q
(6.9.1 T) 72 212.67 T
(ransits -- Rationale and Justi\336cation) 111.78 212.67 T
0 12 Q
(T) 90 193 T
(o motivate the design of the transit mechanism, consider the following situation:) 96.49 193 T
(\245Node B holds a send right to a port whose receive right is on node A.) 90 175 T
(\245Node B creates and then destroys a second send right to this port.) 90 157 T
(In principle, there is no need for node B to contact node A during this pair of operations, as) 90 139 T
(they do not have any user visible ef) 72 125 T
(fects on node A. After all, the Mach interface only exports) 241.99 125 T
-0.09 (whether send rights exist to the holder of the receive right, not how many there are. In practice, if) 72 111 P
(node A has a count of rights that includes the number of rights on node B, then node B must con-) 72 97 T
(tact node A to manipulate this count.) 72 83 T
FMENDPAGE
%%EndPage: "59" 68
%%Page: "60" 68
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(60) 530.01 47.33 T
0 12 Q
(The basic idea behind the transit mechanism is that node B should keep two counts of the) 90 712 T
(number of send rights, the number of rights node A thinks node B has, and the number of send) 72 698 T
0 (rights that node B actually has; the former count is called a count of \324transits.\325 As long as node B) 72 684 P
(has at least one transit, the actual number of send rights it has does not matter; hence node B can) 72 670 T
(now create and destroy its second and subsequent send rights without contacting node A. In the) 72 656 T
(absence of fault isolation concerns, there is no need for node A to keep a transit count -- it is a) 72 642 T
-0.52 (useful debugging \336rewall in that it prevents remote nodes from consuming send rights that they do) 72 628 P
(not possess. Send once rights do not bene\336t from \050and do not need to maintain\051 transit logic) 72 614 T
(because they cannot be created on nodes that do not have the receive right.) 72 600 T
-0.06 (The transit mechanism \050described in Section 6.3\051 implements optimization [A] because when) 90 582 P
(the right is transferred to a remote node, it carries two transits, one of which can be loaned to) 72 568 T
(cover message sends, the other of which ensures that the node always has at least one transit for) 72 554 T
(its local rights. Return of the loaned transit after message send avoids inter) 72 540 T
(-node bookkeeping to) 429.85 540 T
(acquire more transits for future messages. Optimization [B] is implemented by separating the) 72 526 T
-0.16 (right count from the transit count; if the right count decreases because two rights mer) 72 512 P
-0.16 (ge \050e.g., two) 477.87 512 P
-0.36 (send rights mer) 72 498 P
-0.36 (ge resulting in one send right with two user references\051, nothing need be done with) 145.02 498 P
-0.02 (the transit counts. Optimization [C] is implemented by avoiding no more senders overhead in the) 72 484 P
(common case. \050See section 6.2, \322No More Senders Interface Change,\323 on page 49.\051) 72 470 T
FMENDPAGE
%%EndPage: "60" 69
%%Page: "61" 69
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(61) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 7) 72 704 S
0 24 Q
-0.48 (Fault T) 180 704 S
-0.48 (olerance) 244.93 704 S
1 14 Q
(7.1  Fault Isolation / Management) 72 580.67 T
(7.2 Fault Isolation Goals for V2) 72 550.67 T
(7.3 Behavior of Ordinary Messages) 72 520.67 T
0 12 Q
(All parts not guaranteed to leave sending node when sender unblocks) 90 501 T
1 14 Q
(7.4 Message Flush Bit) 72 471.67 T
0 12 Q
(Mach semantic change) 90 452 T
(Implications for operation of message \337ush bit: message \337ush does not imply \337ushing of any) 90 434 T
(previous or subsequent messages. For example, a message sent with the \337ush bit enabled has no) 72 420 T
-0.22 (way to guarantee that a previous message with an obnoxiously lar) 72 406 P
-0.22 (ge OOL region has been moved) 385.41 406 P
(to the receiver in its entirety) 72 392 T
(.) 206.12 392 T
1 14 Q
(7.4.1 NORMA behavior for \337ush) 72 362.67 T
(7.4.2 T) 72 332.67 T
(ransport behavior for \337ush) 111.78 332.67 T
0 12 Q
(Shouldn\325) 90 313 T
(t be any dif) 133.76 313 T
(ferent, but we should say this explicitly) 187.84 313 T
(.) 375.95 313 T
55.8 569.87 64.8 590.89 C
4 14 Q
0 X
0 K
(\321) 55.8 578.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "61" 70
%%Page: "62" 70
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(62) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 8) 72 704 S
0 24 Q
-0.48 (Membership Services) 180 704 S
FMENDPAGE
%%EndPage: "62" 71
%%Page: "63" 71
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(63) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 9) 72 704 S
0 24 Q
-0.48 (Memory Pinning) 180 704 S
0 12 Q
(Mach contains a facility to force virtual pages to remain resident, preventing the pageout dae-) 90 582 T
(mon from paging them out. This facility) 72 568 T
(,) 264.11 568 T
6 10 Q
(vm_wire) 270.11 568 T
0 12 Q
(, operates on a range of pages, faulting in any) 312.08 568 T
(missing pages, removing them from the page queues used by the pageout daemon and setting a) 72 554 T
(wire bit in each page\325) 72 540 T
(s) 175.25 540 T
2 10 Q
(vm_page_t) 182.91 540 T
0 12 Q
( to indicate this state.) 236.88 540 T
(This mechanism is somewhat heavyweight in three ways. In the \336rst place, the cost of wiring) 90 522 T
-0.22 (itself could be made somewhat cheaper) 72 508 P
-0.22 (. In the second place, it is impractical to wire lar) 259.08 508 P
-0.22 (ge regions) 487.82 508 P
(of a task\325) 72 494 T
(s address space when sending out-of-line memory because there may be an arbitrary) 115.97 494 T
-0.22 (delay until the message is delivered. Third, Mach\325) 72 480 P
-0.22 (s) 310.6 480 P
6 10 Q
-0.45 (vm_wire) 318.04 480 P
0 12 Q
-0.22 ( operation may only be invoked from) 360.02 480 P
(within thread context. However) 72 466 T
(, it would be very useful to be able to invoke an interrupt-level) 223.4 466 T
(operation that, in ef) 72 452 T
(fect, wired a page because we expect) 165.72 452 T
2 10 Q
(NORMA) 346.2 452 T
0 12 Q
(\325) 376.19 452 T
(s transports to execute primarily) 379.52 452 T
(at interrupt level.) 72 438 T
(W) 90 420 T
(e introduce a page) 100.36 420 T
3 F
(pinning) 190.95 420 T
0 F
( facility with the following desirable properties.) 227.6 420 T
(\245 Page pinning and unpinning can be done from interrupt as well as thread) 108 402 T
(context.) 115.2 388 T
(\245 Page pinning is a generic, machine-independent, portable VM-based) 108 370 T
(facility) 115.2 356 T
(.) 148.4 356 T
(\245 Although available from interrupt context, it is not necessary to burden) 108 338 T
(existing VM operations on ordinary) 115.2 324 T
(, non-pinned pages with any spl/splx) 286.31 324 T
(processing, which can be quite expensive.) 115.2 310 T
(\245 Preparing pages for pinning has a very low cost.) 108 292 T
(\245 Prepared pages remain pageable until actually pinned.) 108 274 T
(\245 When pages are present in memory) 108 256 T
(, both preparing and pinning them) 283.94 256 T
(have very low costs.) 115.2 242 T
(\245 Page pinning may be used in a general way by any interrupt-level activi-) 108 224 T
(ties, such as a) 115.2 210 T
2 10 Q
(NORMA IPC) 184.15 210 T
0 12 Q
( transport or a device driver) 238.12 210 T
(In general, a page must be prepared \050or) 90 192 T
3 F
(pr) 280.83 192 T
(epped) 291.05 192 T
0 F
(\051 for pinning; then pinned; and eventually) 319.69 192 T
(,) 518.78 192 T
-0.41 (unpinned. The preparation phase is necessary to indicate to the VM system that the page is subject) 72 178 P
(to manipulation \050i.e., pinning\051 from interrupt level, and hence additional synchronization \050e.g.,) 72 164 T
(blocking interrupts\051 is necessary when manipulating the corresponding) 72 150 T
2 10 Q
(vm_page_t.) 415.1 150 T
0 12 Q
( Note that a) 475.06 150 T
(prepped page remains pageable until it is pinned. Because a prepped page may be paged out) 72 136 T
-0.09 (before it is used, it may be necessary to fault in a missing page and repeat this cycle. Once a page) 72 122 P
(has been pinned, it will be ignored by the pageout daemon.) 72 108 T
FMENDPAGE
%%EndPage: "63" 72
%%Page: "64" 72
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(64) 530.01 47.33 T
1 14 Q
(9.1 Data Structur) 72 710.67 T
(es) 176.29 710.67 T
0 12 Q
(The) 90 691 T
2 10 Q
(vm_page) 111.65 691 T
0 12 Q
( data structure is modi\336ed by adding the following highlighted \336elds:) 153.62 691 T
2 10 Q
(struct vm_page {) 90 666.33 T
(queue_chain_t) 144 654.33 T
(pageq;) 252 654.33 T
(/* queue info for FIFO) 305.97 654.33 T
( * queue or free list \050P\051 */) 305.97 642.33 T
5 F
([...]) 144 630.33 T
2 F
(unsigned int) 144 618.33 T
(wire_count:16,) 252 618.33 T
(/* how many wired down... */) 360 618.33 T
(/* boolean_t */) 144 606.33 T
(inactive:1,) 252 606.33 T
(/* page is in inactive... */) 360 606.33 T
(active:1,) 252 594.33 T
(/* page is in active... */) 360 594.33 T
(laundry:1,) 252 582.33 T
(/* page is being cleaned... */) 360 582.33 T
(free:1,) 252 570.33 T
(/* page is on free list \050P\051 */) 360 570.33 T
(reference:1,) 252 558.33 T
(/* page has been used \050P\051 */) 360 558.33 T
(gobbled:1,) 252 546.33 T
(/* page used internally \050P\051 */) 360 546.33 T
1 12 Q
(limbo:1,) 252 533 T
(/* page pr) 360 533 T
(epped then stolen \050P\051 */) 411.09 533 T
2 10 Q
(:0;) 252 520.33 T
(/* \050force to \324long\325... */) 360 520.33 T
5 F
([...]) 144 508.33 T
2 F
(vm_offset_t) 144 496.33 T
(phys_addr;) 252 496.33 T
(/* Physical address... */) 360 496.33 T
(vm_prot_t) 144 484.33 T
(page_lock;) 252 484.33 T
(/* Uses prohibited... */) 360 484.33 T
(vm_prot_t) 144 472.33 T
(unlock_request;) 252 472.33 T
(/* Outstanding unlock... */) 360 472.33 T
1 12 Q
(unsigned int) 144 460.33 T
(pr) 252 460.33 T
(ep_count:16,) 263.78 460.33 T
(/* Page pr) 360 460.33 T
(ep count */) 411.75 460.33 T
(pin_count:16;) 252 447 T
(/* Page pin count */) 360 447 T
2 10 Q
(};) 90 434.33 T
0 12 Q
(The prep and pin \336elds need to be counts to deal with the same page occurring in concurrent) 90 417 T
-0.14 (messages or multiple times in a single message. T) 72 403 P
-0.14 (o deal with the potential of over\337owing a 16 bit) 309.55 403 P
(prep count \050dif) 72 389 T
(\336cult, but possible\051, it\325) 143.06 389 T
(s fairly easy to delay the prep operations that would cause) 251.35 389 T
-0.14 (the count to be exceeded; this situation is highly unlikely in practice, and hence not worthy of fur-) 72 375 P
(ther design ef) 72 361 T
(fort.) 137.06 361 T
(The current size of a) 90 343 T
2 10 Q
(vm_page_t) 191.57 343 T
0 12 Q
( is 48 bytes. This can be shrunk to 44 \050has been in the 1.3) 245.54 343 T
(development branch\051. The prep and pin counts restore it to 48. The limbo bit is used for the addi-) 72 329 T
(tional synchronization required when a prepped page is paged out \050interrupt routine must) 72 315 T
(acknowledge that it has lost interest in the page\051.) 72 301 T
1 14 Q
(9.2 Locking) 72 271.67 T
0 12 Q
-0.12 (The prep and pin counts are locked by a new global lock, the) 90 252 P
2 10 Q
-0.24 (vm_page_pin_lock) 383.57 252 P
0 12 Q
-0.12 (, that can be) 479.52 252 P
(taken by interrupt handlers \050and hence non-interrupt code must block interrupts to acquire and) 72 238 T
(hold it\051. This lock parallels the) 72 224 T
2 10 Q
(vm_page_queues_lock) 222.24 224 T
0 12 Q
(, except that the) 336.18 224 T
2 10 Q
(vm_page_pin_lock) 415.12 224 T
0 12 Q
( need) 511.07 224 T
(not be taken if the prep and pin counts are both zero. Interrupt handlers may access the prep and) 72 210 T
-0.15 (pin counts when either is non zero, and may read the limbo bit; these interrupt handlers must take) 72 196 P
-0.03 (the) 72 182 P
2 10 Q
-0.06 (vm_page_pin_lock) 89.63 182 P
0 12 Q
-0.03 ( \050but no other locks\051 when doing so. Hence the) 185.57 182 P
2 10 Q
-0.06 (vm_page_pin_lock) 412.79 182 P
0 12 Q
-0.03 ( locks) 508.74 182 P
(against access by interrupt handlers, but when the prep and pin counts are zero, the page is in a) 72 168 T
(state where it cannot be accessed by interrupt handlers. The) 72 154 T
2 10 Q
( vm_page_pin_lock) 357.77 154 T
0 12 Q
( must also be) 459.71 154 T
(taken by any code that puts a page into the limbo state. This is not an additional requirement) 72 140 T
(because a page can only go into limbo if its prep and/or pin counts are non zero, hence the code) 72 126 T
(already had to hold the lock to verify that the counts were non zero.) 72 112 T
(A key feature of this prep/pin design is that it can be veri\336ed that a page is not involved in) 90 94 T
(prepping or pinning) 72 80 T
(without blocking interrupts \050a potentially expensive operation\051. At thread) 173.27 80 T
FMENDPAGE
%%EndPage: "64" 73
%%Page: "65" 73
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(65) 530.01 47.33 T
0 12 Q
-0.35 (level, a thread holding the) 72 712 P
2 10 Q
-0.71 (vm_page_queues_lock) 198.13 712 P
0 12 Q
-0.35 ( can read the prep and pin counts. \050A union will) 312.07 712 P
-0.09 (be used to do the obvious overlay of a single unsigned int on the pair) 72 698 P
-0.09 (, but this is not shown above) 400.71 698 P
-0.11 (for clarity\051. If both are zero, then the page is not involved in prepping or pinning, and a bit can be) 72 684 P
(set \050e.g., busy\051 that will prevent the prep transition, which must hold the) 72 670 T
2 10 Q
(vm_page_queues_lock) 420.78 670 T
0 12 Q
(.) 534.72 670 T
1 14 Q
(9.3 Algorithms) 72 640.67 T
0 12 Q
-0.13 (The prep count is the number of times this page has been prepared for use by an interrupt han-) 90 621 P
-0.34 (dler) 72 607 P
-0.34 (, and the pin count is the number of times a page is in use by an interrupt handler \050and hence is) 90.17 607 P
(not pageable\051. For a single message, pages are typically prepped in advance in thread context,) 72 593 T
(pinned in interrupt context \050by/for the transport in the case of) 72 579 T
2 10 Q
(NORMA) 368.79 579 T
0 12 Q
(\051, and both unpinned and) 398.77 579 T
-0.41 (unprepped in interrupt context when the transport is done. A page that is prepped but not pinned is) 72 565 P
(still pageable, but the pageout daemon must do more work to set the page up for pageout. This) 72 551 T
-0.1 (prep/pin sequence applies to both send and receive sides \050except that the receive side will usually) 72 537 P
(have to prefault as well as prep the pages involved\051.) 72 523 T
(The limbo bit is used to indicate that the page cannot be pinned because the page has been) 90 505 T
(paged out. When the limbo bit is set, the page is removed from whatever page queue it was on) 72 491 T
(\050active/inactive\051 and placed on a special limbo queue. A cleanup routine will scan the limbo) 72 477 T
(queue and any pages with prep and pin counts of zero will be removed and freed. This routine is) 72 463 T
(called by both) 72 449 T
6 10 Q
(vm_page_more_f) 142.95 449 T
(ictitious) 226.91 449 T
0 12 Q
(\050called when more \336ctitious pages are needed\051 and) 286.87 449 T
(the pageout daemon \050invoked when more physical pages are needed\051. A global count will be) 72 435 T
-0.22 (added to count the number of real pages in limbo. An unprep routine is provided to decrement the) 72 421 P
(prep count on a page in limbo; normally the page is unprepped at the same time that it is) 72 407 T
(unpinned.) 72 393 T
-0.06 (Pages that are prepped but not pinned are still pageable, but the setup for paging is more com-) 90 375 P
(plex. When the pageout daemon decides to page out a prepped page, it \336rst sets) 72 361 T
2 10 Q
(m->limbo) 456.05 361 T
0 12 Q
( while) 504.03 361 T
-0.34 (holding both) 72 347 P
2 10 Q
-0.68 (vm_page_queues_lock) 135.29 347 P
0 12 Q
-0.34 ( and) 249.23 347 P
2 10 Q
-0.68 (vm_page_pin_lock) 271.86 347 P
0 12 Q
-0.34 ( \050with interrupts blocked\051. This will) 367.81 347 P
(cause an attempt to pin the page to fail. It is necessary to allocate a new \336ctitious page and swap) 72 333 T
(both page identities \050\336ctitious page becomes physical page that was prepped, and prepped page) 72 319 T
(becomes \336ctitious\051 and page to object relationships \050prepped page is removed from object and) 72 305 T
(enters limbo state, new page inserted\051 before paging out the new page \050new) 72 291 T
2 10 Q
(vm_page_t) 437.04 291 T
0 12 Q
(, same) 491.01 291 T
(physical memory\051. A small routine in) 72 277 T
2 10 Q
(vm_resident.c) 254.89 277 T
0 12 Q
( is required. The prepped page is then) 332.85 277 T
(placed on the limbo queue. The pageout daemon can check that the prep and pin counts are both) 72 263 T
(zero without acquiring the) 72 249 T
2 10 Q
(vm_page_pin_lock) 201.24 249 T
0 12 Q
( \050it must hold the) 297.19 249 T
2 10 Q
(vm_page_queues_lock) 382.15 249 T
0 12 Q
(\051, so in) 496.09 249 T
(the common case \050page not involved with an interrupt handler\051, blocking interrupts is not neces-) 72 235 T
(sary) 72 221 T
(. The pageout daemon sets) 91.2 221 T
2 10 Q
(m->busy) 221.77 221 T
0 12 Q
( \050and obtains a paging reference\051 on a non-prepped page) 263.75 221 T
(which will prevent) 72 207 T
2 10 Q
(it) 164.94 207 T
0 12 Q
( from being prepped while it\325) 176.93 207 T
(s being paged. The pageout daemon skips) 317.17 207 T
(pinned pages and reactivates them if found on the inactive list because they are clearly being ref-) 72 193 T
(erenced) 72 179 T
2 10 Q
(.) 109.29 179 T
0 12 Q
(All other modi\336cations to the VM system are con\336ned to) 90 161 T
6 10 Q
(vm_page_free) 367.17 161 T
0 12 Q
(. There are paths in) 439.13 161 T
(the pageout daemon which will free a page without actually paging it out; two of these paths can) 72 147 T
-0.32 (be taken after) 72 133 P
2 10 Q
-0.64 (m->limbo) 139.31 133 P
0 12 Q
-0.32 ( is set. If this is the case, the page will be placed on the limbo queue and it) 187.29 133 P
(will later be exchanged with a \336ctitious page \050as described above\051 by the limbo queue cleanup) 72 119 T
(routine.) 72 105 T
(Rough pseudo code for the prep, pin, and unpin transitions follows:) 90 87 T
FMENDPAGE
%%EndPage: "65" 74
%%Page: "66" 74
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(66) 530.01 47.33 T
0 12 Q
(prep:) 90 712 T
2 10 Q
(Must hold vm_page_queues lock) 144 699.33 T
(also need vm_page_pin_lock if prep/pin counts != 0) 144 687.33 T
(lookup the page) 144 675.33 T
(if it\325s ok \050!busy, !error, !f) 144 663.33 T
(ictitious, etc.\051) 317.9 663.33 T
(increment prep count) 198 651.33 T
(record vm_page_t) 198 639.33 T
0 12 Q
(pin:) 90 622 T
2 10 Q
(Must hold vm_page_pin_lock only) 144 609.33 T
(In interrupt context:) 144 597.33 T
(if page is not in limbo) 198 585.33 T
(increment pin count) 252 573.33 T
(else) 198 561.33 T
(/* can\325t send this page */) 252 537.33 T
(Queue request to kernel internal thread) 252 525.33 T
(to unprep this page, fault in next pages\050s\051,) 252 513.33 T
(and prep as many more as can be prepped) 252 501.33 T
0 12 Q
( unpin:) 90 484 T
2 10 Q
(Must hold vm_page_pin_lock only) 144 471.33 T
(decrement prep and pin counts) 144 459.33 T
0 12 Q
( unprep:) 90 442 T
2 10 Q
(Must hold vm_page_queues lock and vm_page_pin_lock) 144 429.33 T
(decrement prep count) 144 417.33 T
0 12 Q
-0.4 (A page that the VM system has manipulated out from under an interrupt handler always enters) 90 400 P
-0.07 (the limbo state. This requires active acknowledgment from the interrupt handler that it is \336nished) 72 386 P
-0.16 (with the page \050pin and prep counts must go to zero before page can be freed\051. This eliminates any) 72 372 P
-0.41 (potential problems with an interrupt handler having a pointer to something it shouldn\325) 72 358 P
-0.41 (t. The limbo) 479.26 358 P
-0.17 (interaction is expensive -- it should be rare \050if it\325) 72 344 P
-0.17 (s not, then things like how far the prep work runs) 302.67 344 P
(in advance of use by the interrupt handler need to be tuned\051.) 72 330 T
1 14 Q
(9.4 Interfaces) 72 300.67 T
2 10 Q
(kern_return_t) 90 282.33 T
6 F
(vm_page_prep) 173.95 282.33 T
2 F
(\050) 245.91 282.33 T
(vm_page_t) 252 270.33 T
(mem\051;) 360 270.33 T
(/* IN */) 414 270.33 T
0 12 Q
(Increment prep count on a page.) 108 253 T
(Context: thread.) 108 235 T
(Calling conditions: object containing page \050if any\051 must be locked.) 108 217 T
(Return codes: KERN_SUCCESS upon success; KERN_F) 108 199 T
(AILURE if the) 384.63 199 T
(page is busy) 108 185 T
(, \336ctitious, absent, or in error) 166.52 185 T
(.) 305.1 185 T
2 10 Q
(kern_return_t) 90 152.33 T
6 F
(vm_page_pin) 173.95 152.33 T
2 F
(\050) 239.92 152.33 T
(vm_page_t) 252 140.33 T
(mem\051;) 360 140.33 T
(/* IN */) 414 140.33 T
0 12 Q
(Increment pin count on a page.) 108 123 T
(Context: thread or interrupt.) 108 105 T
(Calling conditions: page must have been previously prepped.) 108 87 T
FMENDPAGE
%%EndPage: "66" 75
%%Page: "67" 75
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(67) 530.01 47.33 T
0 12 Q
(Return codes: KERN_SUCCESS upon success; KERN_F) 108 712 T
(AILURE if the) 384.63 712 T
(page is in limbo or not prepped.) 108 698 T
2 10 Q
(kern_return_t) 90 665.33 T
6 F
(vm_page_unpin) 173.95 665.33 T
2 F
(\050) 251.91 665.33 T
(vm_page_t) 252 653.33 T
(mem\051;) 360 653.33 T
(/* IN */) 414 653.33 T
0 12 Q
(Decrement prep and pin counts on a page.) 108 636 T
(Context: thread or interrupt.) 108 618 T
(Calling conditions: page must have previously been prepped and pinned.) 108 600 T
(Return codes: KERN_SUCCESS upon success; KERN_F) 108 582 T
(AILURE if the) 384.63 582 T
(page is not prepped and pinned.) 108 568 T
2 10 Q
(kern_return_t) 90 535.33 T
6 F
(vm_page_unprep) 173.95 535.33 T
2 F
(\050) 257.91 535.33 T
(vm_page_t) 252 523.33 T
(mem\051;) 360 523.33 T
(/* IN */) 414 523.33 T
0 12 Q
(Decrement prep count on a page, for use after an attempt to pin failed.) 108 506 T
(Context: thread.) 108 488 T
(Calling conditions: page must have been previously prepped.) 108 470 T
(Return codes: KERN_SUCCESS upon success; KERN_F) 108 452 T
(AILURE if the) 384.63 452 T
(page is not prepped.) 108 438 T
1 14 Q
(9.5 Comparison with W) 72 408.67 T
(iring) 214.01 408.67 T
0 12 Q
-0.43 (W) 90 389 P
-0.43 (e considered whether the pin and prep mechanism could be combined with the existing page) 100.36 389 P
(wiring mechanism, and decided that it could not be as the design stands for two reasons:) 72 375 T
(1.   W) 108 357 T
(ired pages are removed from the page queues. Prepped and pinned) 136.83 357 T
(pages are not. The page still needs a wired count to count number of) 122.4 343 T
(times it has been so removed.) 122.4 329 T
(2.   Mer) 108 311 T
(ging with the wired mechanism probably requires the) 145.76 311 T
2 10 Q
(vm_page_queues_lock) 122.4 297 T
0 12 Q
( to be taken at high spl. This is highly) 236.34 297 T
(undesirable as the) 122.4 283 T
2 10 Q
(vm_page_queues_lock) 211.33 283 T
0 12 Q
( is extensively used.) 325.27 283 T
1 14 Q
(9.6 Use of Memory Pinning by NORMA) 72 253.67 T
0 12 Q
(For) 90 234 T
2 10 Q
(NORMA) 109.66 234 T
0 12 Q
(, the send side sequence of operations is:) 139.64 234 T
(\0501\051 IPC copyin produces an entry list \337avor) 90 216 T
2 10 Q
(vm_map_copy_t) 301.19 216 T
0 12 Q
(\0502\051 In sender) 90 198 T
(\325) 151.72 198 T
(s thread context,) 155.05 198 T
2 10 Q
(NORMA) 236.99 198 T
0 12 Q
( runs over entire out of line region \050the entry list\051 trying) 266.98 198 T
(to prep every page and making an array of pointers to the) 72 184 T
2 10 Q
(vm_page_t) 349.78 184 T
0 12 Q
(\325) 403.75 184 T
(s so prepped. The \336rst few) 407.08 184 T
(pages in the out of line region will be faulted in \050this number is a settable/tunable constant\051. The) 72 170 T
-0.13 (\336rst non-resident page encountered beyond the faulted in ones terminates this process \050and a max) 72 156 P
(size parameter should be provided to terminate it early in case over eager preparation sends too) 72 142 T
(many pages into limbo\051.) 72 128 T
2 10 Q
(NORMA) 191.6 128 T
0 12 Q
( sends the kmsg, and may pin and send the \336rst two pages \050deci-) 221.58 128 T
(sion is dependent on state of memory resources; if memory is tight, wait for send completions) 72 114 T
(before wiring this memory\051.) 72 100 T
(\0503\051 At interrupt level, pin ahead of transport by using completion handlers. Basic idea is to) 90 82 T
FMENDPAGE
%%EndPage: "67" 76
%%Page: "68" 76
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(68) 530.01 47.33 T
0 12 Q
(stay a small number of pages ahead -- e.g., if transport has pages 4 and 5 queued, the completion) 72 712 T
(event from page 3 causes attempts to pin and queue 6 and 7 \050in addition to unpinning 2 and 3\051.) 72 698 T
-0.33 (First pin failure \050includes that caused by prep failure\051 causes end of this interrupt handling, and an) 72 684 P
-0.05 (internal) 72 670 P
2 10 Q
-0.11 (NORMA) 111.58 670 P
0 12 Q
-0.05 ( thread is invoked to fault in the page on which the pin failed, prep it and whatever) 141.57 670 P
(further pages can be prepped \050may also fault ahead if desired\051. The send process then picks up) 72 656 T
(where it left of) 72 642 T
(f.) 142.73 642 T
-0.28 (For the initial design, it\325) 90 624 P
-0.28 (s ok for these internal) 204.48 624 P
2 10 Q
-0.57 (NORMA) 309.98 624 P
0 12 Q
-0.28 ( threads to block -- pageout can\325) 339.97 624 P
-0.28 (t stumble) 493.25 624 P
-0.26 (in this way \050the pages are already wired, hence pin can\325) 72 610 P
-0.26 (t fail\051. Allowing these threads not to block) 335.91 610 P
(is required for correct support of unprivileged external memory managers \050suppose all of these) 72 596 T
(threads block on a manager that will respond on the \336rst T) 72 582 T
(uesday of May) 351.72 582 T
(, 2004\051, but support for) 422.22 582 T
(these is not an initial design requirement.) 72 568 T
(The corresponding sequence of operations on the receive side involves three cases:) 90 550 T
(1.  Overwrite, region has page aligned start and end.) 108 532 T
(2.  Allocate new memory) 108 514 T
(.) 228.8 514 T
(3.  Overwrite unaligned.) 108 496 T
-0.29 (Either source or destination) 90 478 P
-0.29 (has start or end that are not page aligned. The matching unaligned) 224.07 478 P
-0.05 (case \050e.g., both of) 72 464 P
-0.05 (f by 0x100\051 is included here. The \336rst two cases are similar) 156.9 464 P
-0.05 (. A major dif) 440.17 464 P
-0.05 (ference) 501.77 464 P
-0.28 (from the send side is that the prep pass wants to fault in data \050in case 2, this is data that) 72 450 P
2 10 Q
-0.55 (NORMA) 485.91 450 P
0 12 Q
-0.28 ( will) 515.89 450 P
-0.42 (overwrite completely) 72 436 P
-0.42 (, and hence zero \336ll should be avoided\051. Need to prep in chunks here \050fault in) 173.05 436 P
(but not wire pages\051, and then have transport do the same pin and unpin logic as on the send side.) 72 422 T
(Receiving thread is responsible for fault in and prep logic. Since both of these cases put the data) 72 408 T
(directly in the desired destination memory) 72 394 T
(, no ipc copyout processing is necessary \050and a bit) 274.09 394 T
-0.39 (would be set in the kmsg descriptor to so indicate. In case \0503\051, it\325) 72 380 P
-0.39 (s necessary to allocate memory in) 377.11 380 P
(the kernel, put the data in there, and then use the existing) 72 366 T
6 10 Q
(copyout_overwrite) 348.47 366 T
0 12 Q
(logic to get it to) 456.41 366 T
(show up correctly in the receiver) 72 352 T
(\325) 229.98 352 T
(s address space. This logic avoids excessive copying in the) 233.31 352 T
(matching unaligned case.) 72 338 T
FMENDPAGE
%%EndPage: "68" 77
%%Page: "69" 77
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(69) 530.01 47.33 T
0 12 Q
1.2 (CHAPTER 10) 72 704 S
0 24 Q
-0.48 (Interactions W) 180 704 S
-0.48 (ith Other Mach) 314.21 704 S
-0.48 (Subsystems) 180 674 S
1 14 Q
(10.1 External Memory Management Interface) 72 550.67 T
0 12 Q
(Pagers are no longer required to respond to all pageouts with memory_object_data_write_-) 90 531 T
-0.23 (completed. However) 72 517 P
-0.23 (, the \336rst revision of) 171.21 517 P
2 10 Q
-0.45 (NORMA IPC) 270.02 517 P
0 12 Q
-0.23 ( still requires that all pagers be trusted. Refer) 323.53 517 P
(to \322Paging Flow Control\323 on page) 72 503 T
(71.) 239.24 503 T
1 14 Q
(10.2) 72 473.67 T
(Device Operations) 99.99 473.67 T
0 12 Q
(A complete implementation of \337ow control requires modi\336cations to the kernel\325) 90 454 T
(s device sub-) 474.42 454 T
(system to eliminate two problems. The \336rst problem is caused by the fact that each device) 72 440 T
-0.09 (includes a potentially unlimited queue of pending operations. If operations are queued faster than) 72 426 P
(the device can execute them, then the queued operations consume wired memory for the data) 72 412 T
(involved. Left unchecked, this device queueing problem can consume all available memory on a) 72 398 T
(node. The problem is worst in situations where a device is being inundated by operations from) 72 384 T
(multiple nodes. The second problem is caused by the fact that reply messages from device opera-) 72 370 T
(tions are sent by the kernel and hence ignore queue limits. In the presence of an eager transfer) 72 356 T
(transport implementation and a fast device, the resulting memory can overload the receiving) 72 342 T
-0.33 (node\325) 72 328 P
-0.33 (s ability to process it and cause undesirable paging \050and resulting performance degradation\051.) 98.65 328 P
-0.21 (This overload problem has been observed with the existing) 72 314 P
2 10 Q
-0.41 (NORMA IPC Version One) 356.29 314 P
0 12 Q
-0.21 ( system and) 480.98 314 P
-0.37 (high speed devices. A related desirable characteristic is that if the overload is caused by a network) 72 300 P
-0.1 (device with a protocol that allows packet drops, then it should be possible to recover by dropping) 72 286 P
(packets instead of enforcing reliable delivery of all the packets involved in the overload.) 72 272 T
1 14 Q
(10.2.1 Device Queueing) 72 242.67 T
0 12 Q
-0.17 (The device queueing problem is caused by generation of device operation requests faster than) 90 223 P
-0.2 (a device can satisfy them. If the source\050s\051 of some or all of these requests are nodes other than the) 72 209 P
-0.22 (one to which the device is attached, then the requests \050and their associated memory\051 pile up in the) 72 195 P
-0.19 (device node\325) 72 181 P
-0.19 (s memory forcing it to page. Instead, the device node must be able to apply backpres-) 132.76 181 P
-0.34 (sure to the generating nodes to avoid having its memory overcommitted in this fashion. This back-) 72 167 P
(pressure must also be applied to local device operations because in the paging case, the overload) 72 153 T
(can result from the local vnode pager queueing operations \050pageouts originating from other) 72 139 T
(nodes\051 to the device faster than the device can handle them.) 72 125 T
(The problem is addressed by a limit on the total number of outstanding device operations per) 90 107 T
(device. In the current code base, this limit and the count of outstanding device operations is con-) 72 93 T
-0.22 (tained in the device structure \050one exists per open device\051. If a future code base has a device struc-) 72 79 P
55.8 462.87 64.8 483.89 C
4 14 Q
0 X
0 K
(\321) 55.8 471.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "69" 78
%%Page: "70" 78
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(70) 530.01 47.33 T
0 12 Q
(ture per client that has opened the device \050and hence an open device may have multiple such) 72 712 T
(structures\051, it may be necessary to introduce a shared operation limit structure; this issue should) 72 698 T
(be revisited if it proves to be a problem in practice on such code bases.) 72 684 T
(The device code is responsible for enforcing this limit by blocking threads that attempt to ini-) 90 666 T
(tiate operations that exceed it, and waking them up when it is ok to continue. This may result in) 72 652 T
(blocking kserver threads executing operations on behalf of) 72 638 T
2 10 Q
(NORMA) 356.45 638 T
0 12 Q
(, which is satisfactory for) 386.43 638 T
(devices which guarantee to complete pending requests. For example, a disk device provides this) 72 624 T
-0.28 (guarantee. For devices that implement blocking reads \050e.g., serial line devices such as ttys\051, block-) 72 610 P
-0.06 (ing a kserver thread is not reasonable. Instead, the best solution is not to limit operations for such) 72 596 P
-0.24 (devices. Network reads \050via \336lter mechanisms\051 must also bypass this limiting mechanism entirely) 72 582 P
-0.24 (.) 537 582 P
(The value of the limit is one of the parameters of the device. It could be set either by a \337avor) 90 564 T
(of) 72 550 T
6 10 Q
(device_set_status and device_get_status) 84.99 550 T
0 12 Q
( \050have to pick the \337avor value carefully so as) 318.86 550 T
(not to cause future problems with the ioctl-derived encoding of \337avors\051, or by a new) 72 536 T
6 10 Q
(device_se-) 479.7 536 T
(t_operation_limit) 72 522 T
0 12 Q
( call \050and corresponding get call\051. The default value should be part of the) 173.94 522 T
(device con\336guration -- either in the) 72 508 T
2 10 Q
(dev_ops) 244.54 508 T
0 12 Q
( vector) 286.51 508 T
(, or a mandatory \337avor of) 319 508 T
6 10 Q
(dev_info) 444.58 508 T
0 12 Q
( in the) 492.55 508 T
(driver) 72 494 T
(.) 99.98 494 T
1 14 Q
(10.2.2 Input Overload) 72 464.67 T
0 12 Q
-0.24 (The second problem is in input overload. Some devices and collections of devices are capable) 90 445 P
(of generating input faster than the application or system component involved can absorb it. The) 72 431 T
(memory involved can pile up on the node containing the application or system component bottle-) 72 417 T
(neck causing memory overcommitment on that node. High bandwidth networking and parallel) 72 403 T
(\336lesystems are both capable of causing this.) 72 389 T
(Most of the input overload problem is solved by the use of receiver pull message transfer in) 90 371 T
-0.04 (the new) 72 357 P
2 10 Q
-0.09 (NORMA) 112.55 357 P
0 12 Q
-0.04 ( system. This moves the potential overload problem to the device node; if an appli-) 142.53 357 P
(cation node gets overloaded with input data, it\325) 72 343 T
(s because the application asked for all of it, and it) 297.19 343 T
(is not the system\325) 72 329 T
(s responsibility to protect misbehaving applications from themselves.) 155.63 329 T
-0.13 (Network devices allow one further response to this situation. If the network device is one that) 90 311 P
(can drop data with) 72 297 T
(impunity) 163.93 297 T
(, then the return of QUEUE_FULL or RESOURCE_SHOR) 206.47 297 T
(T) 490.91 297 T
(AGE) 497.27 297 T
(from the destination node of the) 72 283 T
2 10 Q
(NORMA) 228.56 283 T
0 12 Q
( message should cause the input) 258.55 283 T
(message to be) 415.11 283 T
(discarded) 485.39 283 T
(\050and its memory freed\051 rather than queued. Having) 72 269 T
2 10 Q
(NORMA) 318.8 269 T
0 12 Q
( expose these error codes to the code) 348.78 269 T
(that sends messages generated by network \336lters is not) 72 255 T
(feasible, hence another option to) 337.49 255 T
6 10 Q
(mach_msg_send_from_kernel) 72 241 T
0 12 Q
(is required to cause the message to be discarded in these cases.) 224.92 241 T
3 F
2 K
([TBD: Fix r) 72 223 T
(eturn codes to match r) 129.52 223 T
(est of document]) 237.01 223 T
1 14 Q
0 K
(10.3 XMM) 72 193.67 T
(10.3.1 Pageable XMM Pages) 72 163.67 T
0 12 Q
(The Mach) 90 144 T
2 10 Q
(VM) 141.96 144 T
0 12 Q
( system protects itself against unresponsive external pagers by allowing a page) 153.95 144 T
(that is waiting to be sent to this pager to be) 72 130 T
3 F
(double paged) 280.88 130 T
0 F
( to the default pager) 345.83 130 T
(. Once the data) 441.1 130 T
(reaches the default pager) 72 116 T
(, the page can be freed. In ef) 191.07 116 T
(fect, this means that out-of-line pages con-) 327.05 116 T
(tained in messages to a pager need to be pageable. When memory_object_data_return\050\051 is called) 72 102 T
(to send a page to the pager) 72 88 T
(, the page is contained in an object-\337avor copy object, and it is page-) 199.42 88 T
FMENDPAGE
%%EndPage: "70" 79
%%Page: "71" 79
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(71) 530.01 47.33 T
0 12 Q
(able.) 72 712 T
(W) 90 694 T
(ithin) 100.84 694 T
2 10 Q
(XMM) 125.84 694 T
0 12 Q
(, there are two paths the page can take. If the) 143.83 694 T
2 10 Q
(XMM) 361.3 694 T
0 12 Q
( stack is entirely local, with the) 379.29 694 T
2 10 Q
(SVM) 72 680 T
0 12 Q
( object on the same node as the page, the page is passed along still in the object-\337avor copy) 89.99 680 T
-0.14 (object until it is sent in a message to the pager; it can be double paged the whole time, even while) 72 666 P
-0.3 (waiting in the pager port\325) 72 652 P
-0.3 (s message queue. The other case is that the) 192.07 652 P
2 10 Q
-0.59 (SVM) 397.92 652 P
0 12 Q
-0.3 ( object resides on another) 415.91 652 P
(node. In this case, the page remains pageable on the original node up until the time it is placed in) 72 638 T
-0.25 (a message to go to) 72 624 P
2 10 Q
-0.51 (XMM) 162.34 624 P
0 12 Q
-0.25 ( on the) 180.33 624 P
2 10 Q
-0.51 (SVM) 215.21 624 P
0 12 Q
-0.25 ( object\325) 233.2 624 P
-0.25 (s node. Since the kernel is the receiver of the message, it) 268.59 624 P
(can be assumed that the page will be sent of) 72 610 T
(f of the original node within a reasonable time.) 282.63 610 T
(The node with the) 90 592 T
2 10 Q
(SVM) 179.94 592 T
0 12 Q
( object that receives the pageout message can do one of three things) 197.93 592 T
(with the page:) 72 578 T
(1.  drop it, if another node has a copy;) 108 560 T
(2.  supply it to another node that has requested access; or) 108 542 T
(,) 380.66 542 T
(3.  send it to its pager) 108 524 T
(.) 210.28 524 T
(The \336rst two cases present no problem, since the page is either freed or immediately sent to) 90 506 T
(another node that is waiting for it. The third situation is vulnerable to unresponsive pagers in the) 72 492 T
-0.13 (same way as the pageout daemon. In the current system,) 72 478 P
2 10 Q
-0.26 (XMM) 343.84 478 P
0 12 Q
-0.13 ( expects the page in page list format;) 361.83 478 P
(the page itself is either loose or busy and therefore cannot be double paged. This problem can be) 72 464 T
-0.08 (addressed by having) 72 450 P
2 10 Q
-0.16 (XMM) 172.69 450 P
0 12 Q
-0.08 ( convert the copy object to object or entry list format when it determines) 190.68 450 P
(that the page is destined for a pager) 72 436 T
(.) 241.54 436 T
0 10 Q
(1) 244.54 440.8 T
2 F
-0.38 (XMM) 90 418 P
0 12 Q
-0.19 ( has no inherent dependency on the particular format of out-of-line pages. It currently han-) 107.99 418 P
-0.04 (dles either object or page list format but could easily accommodate an entry list with some minor) 72 404 P
(modi\336cation. There is also one instance where XMM makes a copy of a page and then immedi-) 72 390 T
(ately sends the copy to the pager \050) 72 376 T
6 10 Q
(svm_copy_page) 235.54 376 T
0 12 Q
(\051. This new page is currently placed in a page) 313.5 376 T
-0.12 (list copy object, and it is not pageable. T) 72 362 P
-0.12 (o allow double paging,) 264.77 362 P
6 10 Q
-0.23 (svm_copy_page) 377.24 362 P
0 12 Q
-0.12 ( needs to be mod-) 455.19 362 P
(i\336ed to create an object-\337avor copy object instead.) 72 348 T
1 14 Q
(10.3.2 Paging Flow Contr) 72 318.67 T
(ol) 223.72 318.67 T
0 12 Q
0 (The use of XMM decouples pagers from normal IPC \337ow control mechanisms, as follows. A) 90 299 P
(kernel or user task sending messages directly to a remote user) 72 285 T
(-level entity) 368.2 285 T
(, e.g., a pager) 425.05 285 T
(, will be) 488.84 285 T
-0.34 (\337ow controlled by Mach IPC. The queue limit mechanism prevents the accumulation of messages) 72 271 P
-0.18 (on any single port. The meta-kmsg enqueueing mechanism guarantees that memory will not accu-) 72 257 P
(mulate across ports because the active participation of a receiving thread is required to bring) 72 243 T
(across the resources associated with a message. However) 72 229 T
(, although these rules apply to inter) 345.95 229 T
(-ker-) 514.6 229 T
(nel traf) 72 215 T
(\336c, as well, unmodi\336ed XMM nevertheless circumvents the intended \337ow control.) 106.08 215 T
(Messages sent from one kernel to another are received on the in-kernel,) 90 197 T
2 10 Q
(NORMA) 436.05 197 T
0 12 Q
( pseudo-port.) 466.03 197 T
(This port is subject to the same queue limit mechanism as any other port, but this port is also) 72 183 T
-0.36 (backed up by a relatively lar) 72 169 P
-0.36 (ge number of threads ready to receive incoming messages. In the case) 206.22 169 P
(of XMM, the kserver threads stand ready to pick up incoming pageouts and convey them into) 72 155 T
(XMM. If XMM absorbs the messages, no further action is required. However) 72 141 T
(, if XMM forwards) 443.9 141 T
-0.07 (the pageout requests to a user) 72 127 P
-0.07 (-level pager located on the same node, messages can accumulate on) 212.99 127 P
72 108 540 123 C
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 105.33 T
0 10 Q
(The problem may also disappear entirely if a page received by NORMA is handed to) 96 101.33 T
2 F
(XMM) 438.24 101.33 T
0 F
( in a pageable) 456.23 101.33 T
-0.23 (format \050object or entry list\051. However) 90 89.33 P
-0.23 (, we expect that kernel-tar) 238.89 89.33 P
-0.23 (geted messages will be received in non-page-) 341.86 89.33 P
(able memory for ef) 90 77.33 T
(\336ciency) 166.7 77.33 T
(.) 197.69 77.33 T
FMENDPAGE
%%EndPage: "71" 80
%%Page: "72" 80
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(72) 530.01 47.33 T
0 12 Q
-0.42 (the pager) 72 712 P
-0.42 (\325) 116.32 712 P
-0.42 (s ports without bound. This accumulation results because messages originating from the) 119.65 712 P
(kernel are sent with MACH_SEND_AL) 72 698 T
(W) 263.64 698 T
(A) 273.63 698 T
(YS enabled, and when the user) 281.19 698 T
(-level tar) 429.5 698 T
(get is on the) 472.24 698 T
(local node, queue limits are ignored. Thus, when many nodes are paging out, it is possible for) 72 684 T
(message generation to outrun the ability of a pager to keep up.) 72 670 T
0 10 Q
(2) 371.12 674.8 T
0 12 Q
(The good news is that this problem is not fatal. If the node accumulates pages, the kserver) 90 652 T
(threads will block trying to allocate new memory to receive incoming messages. However) 72 638 T
(, this) 504.21 638 T
(blocking behavior happens late in the game, after the node has become swamped. It is important) 72 624 T
(to apply back pressure as soon as possible.) 72 610 T
-0.05 (There are several possible solutions to this problem. These solutions rest on a simple observa-) 90 592 P
-0.43 (tion: it is necessary to directly couple kernel outputs to pager inputs so that Mach IPC can perform) 72 578 P
(\337ow control.) 72 564 T
(1.  When sending pageout messages from XMM to a co-located pager) 108 546 T
(, in) 443.26 546 T
(the context of a kserver thread, disable MACH_SEND_AL) 122.4 532 T
(W) 405.3 532 T
(A) 415.29 532 T
(YS.) 422.85 532 T
(Kserver threads are throttled back when a pager is slow) 122.4 518 T
(. Pages will not) 387.73 518 T
(arrive from of) 122.4 504 T
(f-node faster than they can be discarded. However) 189.46 504 T
(, two) 430.09 504 T
(unpleasant implications derive from this solution. First, pagers must be) 122.4 490 T
(trusted to dispose of their pageouts. Second, incoming kernel-bound) 122.4 476 T
-0.34 (messages may be delayed when kserver threads are consumed by a slow) 122.4 462 P
(pager) 122.4 448 T
(.) 148.38 448 T
(2.  Provide a new way for XMM to receive its messages. For instance, cre-) 108 430 T
-0.12 (ate a pool of dedicated XMM threads that have a special message recep-) 122.4 416 P
(tion attribute. The message reception code recognizes this attribute as) 122.4 402 T
(follows: inline kmsg processing remains unmodi\336ed, so that a thread) 122.4 388 T
-0.5 (continues to allocate memory for an inline kmsg \050blocking, if necessary\051) 122.4 374 P
(and then brings over the message from the sending node. However) 122.4 360 T
(, all) 442.01 360 T
(out-of-line memory reception is bypassed and must be done explicitly) 122.4 346 T
(by the receiving thread. W) 122.4 332 T
(ith the inline kmsg in hand, XMM has suf) 249.48 332 T
(\336-) 450.16 332 T
-0.32 (cient information to decide how to process the pageout. If the pageout is) 122.4 318 P
(forwarded to a user) 122.4 304 T
(-level pager) 215.07 304 T
(, the message can be enqueued as an) 271.54 304 T
(inline kmsg with an OOL portion on another node.) 122.4 290 T
-0.29 (3.  Modify EMM/XMM interfaces to \322steal\323 the pager) 108 272 P
-0.29 (\325) 366.91 272 P
-0.29 (s threads. Instead of) 370.25 272 P
-0.25 (using kserver threads to process incoming messages, if XMM can some-) 122.4 258 P
(how use the pager) 122.4 244 T
(\325) 209.77 244 T
(s threads to process messages related to its objects) 213.11 244 T
-0.14 (then the pager) 122.4 230 P
-0.14 (\325) 190.5 230 P
-0.14 (s threads will be directly coupled to the kernel-generated) 193.84 230 P
(pageouts. Mach IPC queue limits will apply directly) 122.4 216 T
(.) 372.14 216 T
(Solution #1 is the simplest, although we continue to investigate solution #2.) 90 198 T
-0.47 (A very real concern remains: even with the application of Mach) 90 180 P
2 10 Q
-0.93 (IPC) 394.29 180 P
0 12 Q
-0.47 ( \337ow control mechanisms,) 412.28 180 P
(will paging be as smooth under load as with) 72 166 T
2 10 Q
(NORMA IPC) 286.2 166 T
0 12 Q
( V) 340.17 166 T
(ersion One\325) 350.5 166 T
(s explicit paging \337ow con-) 406.12 166 T
(trol implementation?) 72 152 T
72 100 540 115 C
81 113 225 113 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(2) 90 97.33 T
0 10 Q
(Converting XMM to use direct transport RPCs rather than Mach messages does not eliminate this paging \337ow) 96 93.33 T
(control problem. XMM can still enqueue messages to a pager faster than a pager can process them.) 72 81.33 T
55.8 169.2 64.8 190.22 C
4 14 Q
0 X
0 K
(\321) 55.8 178.22 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "72" 81
%%Page: "73" 81
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(73) 530.01 47.33 T
1 14 Q
(10.4 Asynchr) 72 710.67 T
(onous V) 150.26 710.67 T
(irtual Memory Faults) 198.34 710.67 T
0 12 Q
(W) 90 691 T
(iring memory in the context of a) 100.84 691 T
2 10 Q
(NORMA) 259.07 691 T
0 12 Q
( transport thread rather than in the context of the) 289.05 691 T
(original, sending thread introduces the twin possibilities of deadlock and thread exhaustion.) 72 677 T
(Deadlock may arise when a page to be faulted in resides on the node that is the tar) 72 663 T
(get of the send) 465.82 663 T
-0.31 (operation. This deadlock might be eliminated by introducing separate classes of transport threads.) 72 649 P
-0.14 (However) 72 635 P
-0.14 (, there is still the possibility that all threads in the transport class for outgoing operations) 115.48 635 P
(could be consumed by pending faults.) 72 621 T
(T) 90 603 T
(o guarantee correct operation, we introduce asynchronous virtual memory fault handling.) 96.49 603 T
0 10 Q
(3) 524.16 607.8 T
0 12 Q
-0.24 (T) 72 589 P
-0.24 (oday) 78.49 589 P
-0.24 (, fault handling consumes the thread taking the fault. The asynchronous fault facility allows) 101.02 589 P
(a page fault to be initiated by a calling thread without synchronously awaiting fault resolution.) 72 575 T
(Another bene\336t of asynchronous faults is the correct operation of the system in the face of) 90 557 T
(malicious or slow user) 72 543 T
(-level pagers. Requests for pages managed by such a pager will consume) 180.02 543 T
(one fault context structure per OOL region dropped into the transport, but the transport threads) 72 529 T
(will remain available for other work.) 72 515 T
(Last, asynchronous VM fault handling will \336x a current bug in uniprocessor Mach.) 90 497 T
1 14 Q
(10.5 Server Dependencies) 72 467.67 T
0 12 Q
(A requirement for external, default pagers is that they do not create an unlimited number of) 90 448 T
(threads in response to incoming pageout requests.) 72 434 T
2 K
([TBD: expand]) 90 416 T
72 84 540 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(3) 90 81.33 T
0 10 Q
(This feature may not be implemented in the \336rst phase of the NORMA IPC rewrite.) 96 77.33 T
55.8 486.2 64.8 507.22 C
4 14 Q
0 X
0 K
(\321) 55.8 495.22 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "73" 82
%%Page: "74" 82
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(74) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 1) 72 704 S
1.2 (1) 145.99 704 S
0 24 Q
-0.48 (Mach Interface Changes) 180 704 S
0 12 Q
(In this chapter) 90 582 T
(, we discuss the impact of) 158.13 582 T
2 10 Q
(DIPC) 285.05 582 T
0 12 Q
( on Mach interfaces. In some instances, the) 309.04 582 T
(behavior of existing interfaces changes. In other cases, new interfaces are introduced. W) 72 568 T
(e begin) 495.01 568 T
(with a general overview of behavioral changes and then follow up with a description of each) 72 554 T
(af) 72 540 T
(fected interface.) 81.1 540 T
1 14 Q
(1) 72 510.67 T
(1.1 Message Queue Behavior) 78.23 510.67 T
2 10 Q
(DIPC) 90 491 T
0 12 Q
( introduces a distributed message queue. The principal continues to have its own local) 113.99 491 T
(message queue but each proxy to the principal may also have a message queue. The distributed) 72 477 T
(queue comes into play when a principal\325) 72 463 T
(s queue is full and a proxy has one or more messages) 265.86 463 T
(ready) 72 449 T
(. In this implementation, messages may optionally be marked with MACH_SEND_AL-) 97.86 449 T
(W) 72 435 T
(A) 81.99 435 T
(YS. When this bit is turned on, the message has no waiting sending thread. Such messages) 89.55 435 T
(reside on the proxy message queue. Otherwise, the sending thread is blocked and still has the) 72 421 T
(message; in this case, the message is not visible on the message queue. The following picture) 72 407 T
(illustrates an arbitrary combination of senders, messages and message types:) 72 393 T
72 72 540 720 C
72 72 540 389 C
0 X
4 K
90 450 22.5 22.5 487.5 230.51 G
0.5 H
2 Z
90 450 22.5 22.5 487.5 230.51 A
411.83 217.01 420.83 244.01 R
14 X
0 K
V
0 X
N
420.83 217.01 429.83 244.01 R
14 X
V
0 X
N
429.83 217.01 438.83 244.01 R
14 X
V
0 X
N
438.83 217.01 447.83 244.01 R
14 X
V
0 X
N
447.83 217.01 456.83 244.01 R
14 X
V
0 X
N
8 12 Q
(Receiver) 461.38 272.82 T
3 F
6 K
(Enqueued Messages) 394.54 169.96 T
(of Any Kind) 414.68 156.79 T
440.32 202.32 444.15 213.69 446.92 202.01 443.62 202.16 4 Y
11 X
V
442.5 177.85 443.63 202.16 2 L
N
6 X
4 K
90 450 22.5 22.5 245.98 310.66 G
0 X
90 450 22.5 22.5 245.98 310.66 A
196.48 362 M
 196.96 344.67 230.62 324.16 226.66 347.17 D
 225.94 351.35 213.6 336.31 223.82 328 D
0 K
N
214.48 371 M
 214.96 353.67 248.62 333.16 244.66 356.17 D
 243.94 360.35 231.6 345.31 241.82 337 D
N
232.48 380 M
 232.96 362.67 266.62 342.16 262.66 365.17 D
 261.94 369.35 249.6 354.31 259.82 346 D
N
8 F
(Sending Node A) 81 371.82 T
6 X
4 K
90 450 22.5 22.5 245.98 169.61 G
0 X
90 450 22.5 22.5 245.98 169.61 A
169.48 156.11 178.48 183.11 R
14 X
0 K
V
0 X
N
178.48 156.11 187.48 183.11 R
14 X
V
0 X
N
187.48 156.11 196.48 183.11 R
14 X
V
0 X
N
196.48 156.11 205.48 183.11 R
14 X
V
0 X
N
205.48 156.11 214.48 183.11 R
14 X
V
0 X
N
196.48 220.96 M
 196.96 203.63 230.62 183.11 226.66 206.12 D
 225.94 210.31 213.6 195.26 223.82 186.95 D
N
214.48 229.96 M
 214.96 212.63 248.62 192.11 244.66 215.12 D
 243.94 219.31 231.6 204.26 241.82 195.95 D
N
232.48 238.96 M
 232.96 221.63 266.62 201.11 262.66 224.12 D
 261.94 228.31 249.6 213.26 259.82 204.95 D
N
0 F
6 K
(MACH_SEND_ALWAYS Messages:) 108 115.64 T
8 F
0 K
(Sending Node B) 81 191.82 T
3 F
6 K
(Sending Thread Does NOT Block) 119.49 89.46 T
0 F
(Enqueued) 156.3 101.8 T
3 F
(Locally) 207.26 101.8 T
189.06 141.37 192.77 152.78 195.67 141.14 192.36 141.26 4 Y
11 X
V
191.94 129.45 192.36 141.25 2 L
N
0 F
0 X
(Ordinarily, Threads Block) 95.17 283.36 T
(When Principal Queue Is Full) 86.68 272.82 T
194.57 336.85 207 335 195.47 329.98 195.02 333.42 4 Y
10 X
V
107 173 40.97 36 207 299 A
187.35 232.68 197.99 227.01 185.96 226.18 186.65 229.43 4 Y
V
180 249 31.67 36 198 263 A
395.93 242.89 404.18 234.17 392.57 237.2 394.25 240.05 4 Y
2 X
2 K
V
283.09 318.83 343.92 284.97 327.12 279.32 394.26 240.04 4 L
1 H
N
393.21 219.08 404.99 221.34 396.2 213.17 394.7 216.12 4 Y
V
279.83 173 341.81 198.17 326.77 182.06 394.71 216.12 4 L
N
0 X
6 K
(Proxy Port) 421.33 368.17 T
(Principal Port) 414 337.6 T
279.34 343.68 269.99 335 273.32 347.32 276.33 345.5 4 Y
9 X
V
0.5 H
90 163 144 36 414 335 A
514.64 254.09 502.64 254 512.77 260.44 513.7 257.27 4 Y
11 X
V
486 335 M
 510.83 334.57 532.18 315.43 531.35 290.15 D
 530.94 277.4 524.82 263.34 513.72 257.17 D
0 Z
N
72 72 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "74" 83
%%Page: "75" 83
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(75) 530.01 47.33 T
0 12 Q
(The distributed message queue introduces two new problems with respect to Mach IPC. One) 90 712 T
(problem is a race occurs when initiating a message receive operation with a timeout. Under cer-) 72 698 T
-0.06 (tain circumstances, it is possible for the principal\325) 72 684 P
-0.06 (s message queue to be empty while there is one) 310.1 684 P
-0.41 (or more enqueued messages on one or more proxy message queues. This situation can occur when) 72 670 P
(the principal\325) 72 656 T
(s message queue is drained more quickly than the remote nodes can be noti\336ed and) 135.62 656 T
-0.14 (then respond with their enqueued messages. Furthermore, this situation only arises with MACH_-) 72 642 P
-0.45 (SEND_AL) 72 628 P
-0.45 (W) 124.41 628 P
-0.45 (A) 134.4 628 P
-0.45 (YS messages, i.e., kernel-generated messages or messages sent to send-once rights.) 141.96 628 P
-0.08 (If the timeout expires before a remotely enqueued message arrives at the principal, in some sense) 72 614 P
(the caller has erroneously \322missed\323 a message that was enqueued and available for reception.) 72 600 T
(W) 90 582 T
(e solve the timeout/message receive race as follows. W) 100.36 582 T
(e mandate that) 364.19 582 T
2 10 Q
(DIPC) 437.14 582 T
0 12 Q
( receive a mes-) 461.12 582 T
-0.36 (sage if one is present on the local queue or on any remote queue at the time the receive is initiated.) 72 568 P
(The receive may take a while to complete.) 72 554 T
(The other problem is a way to deliver messages out of order when altering the queue limit on) 90 536 T
(a port that subsequently migrates. Originally) 72 522 T
(, we believed an interface change would be required) 285.09 522 T
-0.14 (to solve this problem. \050The change would be to ban queue limit modi\336cation when the queue was) 72 508 P
-0.19 (non-empty) 72 494 P
-0.19 (.\051 However) 123.19 494 P
-0.19 (, as detailed in Section 6.7.3,) 176.47 494 P
2 10 Q
-0.38 (DIPC) 316.59 494 P
0 12 Q
-0.19 ( eliminates this problem in the implemen-) 340.57 494 P
(tation. No interface change is required.) 72 480 T
1 14 Q
(1) 72 450.67 T
(1.2 No Mor) 78.23 450.67 T
(e Senders) 145.98 450.67 T
0 12 Q
(W) 90 431 T
(e now distinguish between ports that support No More Senders noti\336cations and those that) 100.36 431 T
(do not.) 72 417 T
0 10 Q
(1) 105.32 421.8 T
0 12 Q
( \050Refer to Section 6.2 for the rationale.\051 This distinction is observed on all Mach kernels,) 110.32 417 T
(regardless of con\336guration. At the time a port is allocated, the caller indicates whether the port) 72 403 T
-0.11 (should support NMS detection. It is an error to request NMS detection on a port that does not per-) 72 389 P
(mit it. Finally) 72 375 T
(, ports created by the kernel do not permit the use of NMS.) 136.87 375 T
(The only impact on existing code is that the new) 90 357 T
6 10 Q
(mach_port_allocate_full) 325.85 357 T
0 12 Q
( interface must) 463.77 357 T
-0.15 (be used to allocate a port on which no more senders noti\336cations will be used. Forbidding the use) 72 343 P
-0.06 (of NMS noti\336cations on ports created by the kernel has no impact because NMS noti\336cations are) 72 329 P
(not used by kernel subsystems other than) 72 315 T
2 10 Q
(DIPC) 272.21 315 T
0 12 Q
(.) 296.19 315 T
1 14 Q
(1) 72 285.67 T
(1.3 Send Noti\336cations) 78.23 285.67 T
0 12 Q
-0.09 (Send noti\336cations have been eliminated from the revised Mach speci\336cation.) 90 266 P
0 10 Q
-0.07 (2) 458.98 270.8 P
0 12 Q
-0.09 ( Because DIPC) 463.98 266 P
(is easier to implement by not including the existing support for send noti\336cations, we choose to) 72 252 T
(remove all support for send noti\336cations as part of this project. All of the interfaces that support) 72 238 T
(this feature have already been deleted from the mainline, beginning with NMK17.) 72 224 T
1 14 Q
(1) 72 194.67 T
(1.4 Port Death) 78.23 194.67 T
0 12 Q
(The system is permitted to lazily evaluate port death as it af) 90 175 T
(fects send and send once rights) 375.92 175 T
-0.16 (when a dead name noti\336cation has not been requested. \050See Section 6.6.\051 There are a few implica-) 72 161 P
(tions stemming from this change.) 72 147 T
(Send and send-once rights may be transferred in a message from one task to another or one) 90 129 T
(node to another even though the receive right has died.) 72 115 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 93.33 T
0 10 Q
(In Spec94, this change has been marked as experimental.) 96 89.33 T
0 8 Q
(2) 90 81.33 T
0 10 Q
(This change occurred ef) 96 77.33 T
(fective Spec93 and predates the advent of DIPC.) 192.11 77.33 T
FMENDPAGE
%%EndPage: "75" 84
%%Page: "76" 84
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(76) 530.01 47.33 T
0 12 Q
-0.12 (When a dead name noti\336cation has been requested, as soon as the receive right dies a noti\336ca-) 90 712 P
(tion is sent to each node that requested one. Of course, there is still a race here: the send or send-) 72 698 T
(once right may migrate while the receive right is dying or the dead-name noti\336cation is in transit.) 72 684 T
-0.3 (In all cases, sending a message on what was thought to be an alive send right to what turns out) 90 666 P
(to be a dead receive right always converts the send right to a dead name and causes the message) 72 652 T
-0.03 (transmission to fail. Interrogating a port\325) 72 638 P
-0.03 (s status always returns the correct \050albeit transient\051 infor-) 266.42 638 P
(mation about the port\325) 72 624 T
(s state, contacting the principal\325) 178.27 624 T
(s node if necessary) 330.51 624 T
(.) 420.65 624 T
1 14 Q
(1) 72 594.67 T
(1.5 Copy-On-W) 78.23 594.67 T
(rite Semantics) 172.82 594.67 T
0 12 Q
(W) 90 575 T
(e have de\336ned the following semantics to eliminate as many instances of copy-on-write) 100.36 575 T
(manipulations of out-of-line data as possible.) 72 561 T
0 10 Q
(3) 288.53 565.8 T
0 12 Q
( Whenever data are volatile, the kernel can avoid) 293.53 561 T
-0.36 (performing COW operations, saving considerable time. Some cases may already be accounted for) 72 547 P
(in newer Mach speci\336cations. Refer to Section 4.3.1 for details.) 72 533 T
(\245 All device requests operate on volatile out-of-line data.) 90 515 T
(\245 In an asynchronous message, each out-of-line region with deallocate set to TRUE must be) 90 497 T
(regarded as volatile.) 72 483 T
(\245 When MACH_MSG_RPC is set on a message, all out-of-line data in the message are vola-) 90 465 T
-0.32 (tile. This option may be set by the caller) 72 451 P
-0.32 (. MIG will set this \337ag when sending a message for which) 261.67 451 P
(it will await a reply) 72 437 T
(. \050See Section 1) 164.49 437 T
(1.10.2.4.\051) 239.33 437 T
-0.3 (\245 When MACH_MSG_VOLA) 90 419 P
-0.3 (TILE is set on a message, all out-of-line data in the message are) 234.17 419 P
(volatile. This option is set by the caller when the caller can determine when the data are safe to) 72 405 T
(use again. \050See Section 1) 72 391 T
(1.10.2.5.\051) 191.8 391 T
(\245 When MACH_MSG_SYNC is set on a message, all out-of-line data in the message are vol-) 90 373 T
(atile. This option may be set by the caller) 72 359 T
(. \050See Section 1) 269.54 359 T
(1.10.2.6.\051) 344.38 359 T
(\245 The kernel treats all other asynchronous messages as before,) 90 341 T
3 F
(i.e.) 390.29 341 T
0 F
(, out-of-line data in such a) 404.95 341 T
(message must be marked COW) 72 327 T
(. For the purposes of this discussion,) 222.12 327 T
6 10 Q
(mach_msg) 400.36 327 T
0 12 Q
( invoked in \322RPC) 448.33 327 T
(mode\323 with a simultaneous send and receive request is regarded as sending and receiving asyn-) 72 313 T
(chronous messages.) 72 299 T
1 14 Q
(1) 72 269.67 T
(1.6 Message T) 78.23 269.67 T
(ransmission and Reception) 161.52 269.67 T
(1) 72 239.67 T
(1.6.1 T) 78.23 239.67 T
(ransmission) 118.01 239.67 T
0 12 Q
-0.46 (In) 90 220 P
2 10 Q
-0.92 (DIPC) 102.53 220 P
0 12 Q
-0.46 (, when sending a message the sender may unblock after the message has been logically) 126.52 220 P
-0.29 (enqueued on the principal but before the message contents have left the sending node. This behav-) 72 206 P
(ior is desirable for two reasons. Most important, the message resources are left on the sending) 72 192 T
-0.09 (node until the receiver is ready to take on the burden of receiving the message. This is a \337ow con-) 72 178 P
(trol mechanism. Another reason is performance: the sender can proceed sooner) 72 164 T
(.) 450.69 164 T
-0.05 (On the other hand, this behavior can lead to a situation where the sender believes it has sent a) 90 146 P
(message but by the time the receiver receives it the sending node has failed and the message has) 72 132 T
(become unavailable. T) 72 118 T
(o prohibit this behavior) 180.07 118 T
(, a caller may specify MACH_MSG_SYNC when) 291.86 118 T
72 96 540 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(3) 90 93.33 T
0 10 Q
(The interface changes speci\336ed in this section have been deferred from Spec94; they are present in DIPC) 96 89.33 T
(kernels but are not guaranteed as part of the Mach speci\336cation.) 90 77.33 T
FMENDPAGE
%%EndPage: "76" 85
%%Page: "77" 85
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(77) 530.01 47.33 T
0 12 Q
(sending a message.) 72 712 T
0 10 Q
(4) 164.26 716.8 T
0 12 Q
( In this case, a caller blocks until the message has been enqueued remotely) 169.26 712 T
-0.34 (and the entire message has been moved from the caller) 72 698 P
-0.34 (\325) 332.22 698 P
-0.34 (s node to the receiver) 335.55 698 P
-0.34 (\325) 437.24 698 P
-0.34 (s node. However) 440.57 698 P
-0.34 (, be) 520.35 698 P
(warned that the active involvement of the receiver may be required to receive previous messages) 72 684 T
(and then to receive the SYNC\325d message.) 72 670 T
(Send timeouts continue to work as anticipated.) 90 652 T
1 14 Q
(1) 72 622.67 T
(1.6.2 Reception) 78.23 622.67 T
0 12 Q
(Message reception has changed slightly: the MACH_RCV_LARGE option has been elimi-) 90 603 T
(nated. This option was originally de\336ned for the use of the netmsgserver) 72 589 T
(, a user) 419.28 589 T
(-level agent) 453.34 589 T
-0.14 (responsible for forwarding Mach IPC between nodes. The netmsgserver no longer exists. Further-) 72 575 P
(more, no other use of this option has been identi\336ed: MIG does not use it. The option has been) 72 561 T
(removed from the trusted Mach kernel speci\336cation.) 72 547 T
(The implementation of this feature is very dif) 90 529 T
(\336cult in the presence of scatter lists and that dif-) 307.97 529 T
(\336culty is compounded in the presence of) 72 515 T
2 10 Q
(DIPC) 269.53 515 T
0 12 Q
(. The option\325) 293.52 515 T
(s semantics demand that the message) 355.15 515 T
-0.06 (remain on or be restored to the message queue; but processing the message while it is on the mes-) 72 501 P
(sage queue requires fundamental restructuring of the IPC receive path and restoring the message) 72 487 T
-0.4 (to the message queue while restoring the message to the message queue leads to message ordering) 72 473 P
(and sequence number assignment problems.) 72 459 T
(For all these reasons, MACH_RCV_LARGE has been eliminated.) 90 441 T
1 14 Q
(1) 72 411.67 T
(1.7 Device Operations) 78.23 411.67 T
0 12 Q
(W) 90 392 T
(e have added a limit on the number of outstanding device operations. When exceeding this) 100.36 392 T
(limit, the calling thread \050) 72 378 T
3 F
(e.g.) 190.93 378 T
0 F
(, a) 208.24 378 T
2 10 Q
(DIPC) 222.57 378 T
0 12 Q
( kserver thread\051 is blocked. This applies backpressure to) 246.55 378 T
(senders and prevents the buildup of unbounded device queues.) 72 364 T
(A network device will drop a message \050) 90 346 T
3 F
(i.e.) 280.85 346 T
0 F
(, a packet\051 if the attempt to send the message) 295.51 346 T
(encounters a full queue.) 72 332 T
0 10 Q
(5) 186.57 336.8 T
0 12 Q
( This change is necessary to avoid \337ooding receivers with packets.) 191.57 332 T
(All user) 90 314 T
(-supplied data are mandated to be volatile for the duration of the device operation.) 128.07 314 T
1 14 Q
(1) 72 284.67 T
(1.8 Pagers) 78.23 284.67 T
0 12 Q
(A requirement for all pagers is that they do not create an unlimited number of threads in) 90 265 T
-0.26 (response to incoming pageout requests. Creating an essentially unlimited number of threads, each) 72 251 P
-0.06 (of which then receives a message, defeats the port queue limit and thus defeats an important \337ow) 72 237 P
(control mechanism. When it is taking a long time to process requests because the node is bur-) 72 223 T
-0.46 (dened \050too little memory) 72 209 P
-0.46 (, too little available processor time, too many disk requests, etc.\051, creating) 188.77 209 P
(more threads that accept yet more messages only increases the node\325) 72 195 T
(s burdens.) 401.08 195 T
(It is true that eventually the system will throttle thread creation, when memory becomes) 90 177 T
(unavailable, but it is much better to \337ow control early rather than late.) 72 163 T
72 132 540 147 C
81 145 225 145 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
-0.27 (4) 90 129.33 P
0 10 Q
-0.34 (The MACH_MSG_SYNC option has been deferred from Spec94. This interface is present in DIPC kernels) 95.72 125.33 P
(but is not guaranteed as part of the Mach speci\336cation.) 90 113.33 T
0 8 Q
(5) 90 105.33 T
0 10 Q
(T) 96 101.33 T
(echnically) 101.4 101.33 T
(, this behavior is neither an interface change nor an implementation change. Spec94 will be) 141.83 101.33 T
(clari\336ed on this point: the kernel is free to drop packets from a network device \050speci\336cally mentioning) 90 89.33 T
(queue full processing\051. The implementation of this behavior predates the advent of DIPC.) 90 77.33 T
FMENDPAGE
%%EndPage: "77" 86
%%Page: "78" 86
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(78) 530.01 47.33 T
0 12 Q
(Pagers with VM privilege \050) 90 712 T
3 F
(e.g.) 221.24 712 T
0 F
(, default pagers\051 should not create unbounded numbers of) 238.56 712 T
(threads to avoid overconsumption of the kernel\325) 72 698 T
(s reserved VM page pool. Pagers with VM privi-) 301.84 698 T
(lege should not depend on particular sizes of the kernel\325) 72 684 T
(s reserved VM page pool.) 340.14 684 T
1 14 Q
(1) 72 654.67 T
(1.9 Inter) 78.23 654.67 T
(esting Failur) 129.27 654.67 T
(e Modes) 204.82 654.67 T
1 11 Q
(6) 254.17 660.27 T
0 12 Q
(Aborting an RPC \050see Section 5.1) 90 635 T
(1\051. The issue here is that the send-side of a MACH_MS-) 252.13 635 T
-0.37 (G_RPC is not marked OOL as per an earlier section; the data are volatile. If the RPC is aborted on) 72 621 P
(the received side, the caller will unblock while the send-side data are still volatile. W) 72 607 T
(e mandate) 478.74 607 T
(that, in this situation, it is the caller) 72 593 T
(\325) 241.36 593 T
(s responsibility to decide when the data are safe to use again.) 244.69 593 T
(Conceivably) 90 575 T
(, Mach IPC calls can now return with low-level transport errors. [Expand.]) 149.85 575 T
(OOL data errors: when a pager fails to supply a page, returning an error instead, DIPC will) 90 557 T
(send a page of zeroes. At the end of the transmission, DIPC supplies a page_error structure that) 72 543 T
(tells the receiver which pages are bad. The receiver then removes the erroneous pages and) 72 529 T
(replaces them with pages that have error statuses set. Thus, brie\337y a page of zeroes appears and) 72 515 T
(then disappears. If DIPC is plonking its data directly into the user address space, this \337akiness) 72 501 T
(may be visible to the user) 72 487 T
(. However) 194.26 487 T
(, the user isn\325) 243.73 487 T
(t supposed to be looking until we unblock from) 308.14 487 T
(msg_receive.) 72 473 T
-0.44 (When DIPC discovers a dead node, it converts all send rights to that node into dead names and) 90 455 P
(generates NMS noti\336cations if necessary) 72 441 T
(.) 267.74 441 T
1 14 Q
(1) 72 411.67 T
(1.10 Mach Interface Changes) 78.23 411.67 T
(1) 72 381.67 T
(1.10.1 Device Operations) 78.23 381.67 T
1 11 Q
(7) 226.68 387.27 T
1 14 Q
(1) 72 351.67 T
(1.10.1.1 device_get_status) 78.23 351.67 T
0 12 Q
(This interface recognizes a new \337avor) 90 332 T
(, MDIOCGETL, which returns the current value of the) 272.36 332 T
(device\325) 72 318 T
(s I/O operations limit. This \337avor is de\336ned in) 106.64 318 T
2 10 Q
(ds_status.h) 331.85 318 T
0 12 Q
(.) 397.81 318 T
1 14 Q
(1) 72 288.67 T
(1.10.1.2 device_set_status) 78.23 288.67 T
0 12 Q
-0.32 (This interface recognizes a new \337avor) 90 269 P
-0.32 (, MDIOCSETL, which sets the value of the device\325) 270.75 269 P
-0.32 (s I/O) 513.99 269 P
(operations limit. The proposed value must be greater than or equal to zero and less than IO_IN_-) 72 255 T
(PROGRESS_MAX. If the proposed value is illegal, the returned error is D_INV) 72 241 T
(ALID_OPERA-) 456.52 241 T
(TION. This \337avor is de\336ned in) 72 227 T
2 10 Q
(ds_status.h) 223.57 227 T
0 12 Q
(.) 289.54 227 T
1 14 Q
(1) 72 197.67 T
(1.10.1.3 ds_device_r) 78.23 197.67 T
(ead) 197.68 197.67 T
0 12 Q
(This routine will block until the current number of operations on the device is less than the) 90 178 T
(device\325) 72 164 T
(s I/O operations limit.) 106.64 164 T
72 108 540 123 C
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(6) 90 105.33 T
0 10 Q
(All of these behavioral changes have been deferred from Spec94. They are experimental.) 96 101.33 T
0 8 Q
(7) 90 93.33 T
0 10 Q
(The device operations changes speci\336ed in this section have been included in Spec94 but are marked as) 96 89.33 T
(experimental.) 90 77.33 T
FMENDPAGE
%%EndPage: "78" 87
%%Page: "79" 87
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(79) 530.01 47.33 T
1 14 Q
(1) 72 710.67 T
(1.10.1.4) 78.23 710.67 T
(ds_device_r) 127.2 710.67 T
(ead_inband) 197.68 710.67 T
0 12 Q
(This routine will block until the current number of operations on the device is less than the) 90 691 T
(device\325) 72 677 T
(s I/O operations limit.) 106.64 677 T
1 14 Q
(1) 72 647.67 T
(1.10.1.5 ds_device_r) 78.23 647.67 T
(ead_overwrite_common) 197.68 647.67 T
0 12 Q
(This routine will block until the current number of operations on the device is less than the) 90 628 T
(device\325) 72 614 T
(s I/O operations limit.) 106.64 614 T
1 14 Q
(1) 72 584.67 T
(1.10.1.6 ds_device_write) 78.23 584.67 T
0 12 Q
(This routine will block until the current number of operations on the device is less than the) 90 565 T
(device\325) 72 551 T
(s I/O operations limit.) 106.64 551 T
1 14 Q
(1) 72 521.67 T
(1.10.1.7 ds_device_write_inband) 78.23 521.67 T
0 12 Q
(This routine will block until the current number of operations on the device is less than the) 90 502 T
(device\325) 72 488 T
(s I/O operations limit.) 106.64 488 T
1 14 Q
(1) 72 458.67 T
(1.10.1.8 IO_IN_PROGRESS_DEF) 78.23 458.67 T
(AUL) 282.43 458.67 T
(T) 310.68 458.67 T
0 12 Q
(This is the default number of simultaneous operations permitted on any device. This value is) 90 439 T
(de\336ned in dev_hdr) 72 425 T
(.h.) 161.28 425 T
0 10 Q
(8) 173.27 429.8 T
1 14 Q
(1) 72 395.67 T
(1.10.1.9 IO_IN_PROGRESS_MAX) 78.23 395.67 T
0 12 Q
-0.1 (This is the maximum number of simultaneous operations permitted on any device. This value) 90 376 P
(is de\336ned in dev_hdr) 72 362 T
(.h.) 172.28 362 T
0 10 Q
(9) 184.27 366.8 T
1 14 Q
(1) 72 332.67 T
(1.10.2 mach_msg) 78.23 332.67 T
0 12 Q
(The mach_msg interface has changed in the following ways.) 90 313 T
1 14 Q
(1) 72 283.67 T
(1.10.2.1 MACH_RCV_LARGE) 78.23 283.67 T
0 12 Q
(This option has been eliminated \050see Section 1) 90 264 T
(1.6.2\051.) 313.08 264 T
1 14 Q
(1) 72 234.67 T
(1.10.2.2 MACH_SEND_CANCEL) 78.23 234.67 T
0 12 Q
-0.28 (No one seems to use this feature so we have deleted it to reduce the amount of code that DIPC) 90 215 P
(must support.) 72 201 T
1 14 Q
(1) 72 171.67 T
(1.10.2.3 MACH_SEND_NOTIFY) 78.23 171.67 T
0 12 Q
(The user) 90 152 T
(-level options relating to send noti\336cations \050see mach/message.h\051 are now all obso-) 131.39 152 T
72 120 540 135 C
81 133 225 133 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
-0.19 (8) 90 117.33 P
0 10 Q
-0.24 (This value has not been tested extensively in practice. Therefore, it may change to increase performance. It) 95.81 113.33 P
(may even be necessary to invent separate defaults for separate classes of devices.) 90 101.33 T
0 8 Q
-0.19 (9) 90 93.33 P
0 10 Q
-0.24 (This value has not been tested extensively in practice. Therefore, it may change to increase performance. It) 95.81 89.33 P
(may even be necessary to invent separate maxima for separate classes of devices.) 90 77.33 T
FMENDPAGE
%%EndPage: "79" 88
%%Page: "80" 88
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(80) 530.01 47.33 T
0 12 Q
(lete. These options include) 72 712 T
(MACH_SEND_NOTIFY) 90 694 T
(MACH_SEND_NOTIFY_IN_PROGRESS) 90 676 T
(SEND_NOTIFY) 90 658 T
(SEND_NOTIFY_IN_PROGRESS) 90 640 T
(SEND_WILL_NOTIFY) 90 622 T
(MACH_SEND_INV) 90 604 T
(ALID_NOTIFY) 189.05 604 T
(MACH_SEND_NO_NOTIFY) 90 586 T
(The kernel will never return *NOTIFY_IN_PROGRESS, SEND_WILL_NOTIFY) 90 568 T
(, or) 484.51 568 T
(MACH_SEND_INV) 72 554 T
(ALID_NOTIFY) 171.05 554 T
(.) 248.11 554 T
(The ipc_info_name.iin_marequest \336eld \050see mach_debug/ipc_info.h\051 has been retained for) 90 536 T
-0.17 (user) 72 522 P
-0.17 (-level compatibility but now is always set to F) 91.74 522 P
-0.17 (ALSE. \050Check whether this \336eld has been elim-) 311.36 522 P
(inated in NMK17.\051) 72 508 T
(The MACH_POR) 90 490 T
(T_TYPE_MAREQUEST bit \050see mach/port.h\051 has been eliminated, as no) 176.23 490 T
(port can ever cause this value to be returned.) 72 476 T
(The host_ipc_marequest_info \050see ipc/mach_debug.c\051 interface has been deleted.) 90 458 T
1 14 Q
(1) 72 428.67 T
(1.10.2.4 MACH_MSG_RPC) 78.23 428.67 T
1 11 Q
(10) 246.12 434.27 T
0 12 Q
-0.28 (New) 90 409 P
-0.28 (. Indicates that the caller is sending a true RPC using) 111.86 409 P
6 10 Q
-0.57 (mach_msg) 365.23 409 P
0 12 Q
-0.28 (. Therefore, the caller will) 413.2 409 P
(not unblock until the message being sent has been received, processed, and a reply returned back) 72 395 T
(to the caller) 72 381 T
(.) 127.96 381 T
(All out-of-line data in the message being sent from the caller are regarded as volatile.) 90 363 T
1 14 Q
(1) 72 333.67 T
(1.10.2.5 MACH_MSG_V) 78.23 333.67 T
(OLA) 227.19 333.67 T
(TILE) 256.48 333.67 T
1 11 Q
(1) 289.92 339.27 T
(1) 294.8 339.27 T
0 12 Q
(New) 90 314 T
(. The user proclaims his understanding that OOL data will be regarded as volatile during) 111.86 314 T
-0.08 (this call. It is the user) 72 300 P
-0.08 (\325) 174.67 300 P
-0.08 (s responsibility to determine when the data are safe to use again; the kernel) 178 300 P
-0.08 (will unblock the caller as soon as the message is enqueued or delivered. \050Question: what happens) 72 286 P
(if this option is speci\336ed for a strictly local IPC?\051) 72 272 T
1 14 Q
(1) 72 242.67 T
(1.10.2.6 MACH_MSG_SYNC) 78.23 242.67 T
1 11 Q
(12) 255.45 248.27 T
0 12 Q
(New) 90 223 T
(. The caller blocks until the message has been moved from the calling node to the receiv-) 111.86 223 T
(ing node, in its entirety) 72 209 T
(. In some implementations, the caller may not unblock until the receiver) 182.16 209 T
(actually receives the message. In all implementations, the caller may infer that all previous mes-) 72 195 T
(sages sent by the calling thread to the receiving port have moved from the calling node to the) 72 181 T
(receiving node, in their entirety) 72 167 T
(.) 222.11 167 T
(This option is provided for reasoning about message state in the presence of node failures: a) 90 149 T
(message can be determined to be entirely in the caller) 72 135 T
(\325) 329.91 135 T
(s or receiver) 333.24 135 T
(\325) 392.96 135 T
(s failure domain.) 396.29 135 T
72 108 540 123 C
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(10) 90 105.33 T
0 10 Q
(The MACH_MSG_RPC interface has been deferred from Spec94; it is present only for DIPC.) 100 101.33 T
0 8 Q
(1) 90 93.33 T
(1) 93.7 93.33 T
0 10 Q
(The MACH_MSG_VOLA) 99.7 89.33 T
(TILE interface has been deferred from Spec94; it is present only for DIPC.) 206.02 89.33 T
0 8 Q
(12) 90 81.33 T
0 10 Q
(The MACH_MSG_SYNC interface has been deferred from Spec94; it is present only in DIPC.) 100 77.33 T
FMENDPAGE
%%EndPage: "80" 89
%%Page: "81" 89
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(81) 530.01 47.33 T
0 12 Q
(All OOL data are volatile during this call.) 90 712 T
1 14 Q
(1) 72 682.67 T
(1.10.3 mach_port_allocate) 78.23 682.67 T
0 12 Q
(Ordinary ports allocated with) 90 663 T
6 10 Q
(mach_port_allocate) 233.9 663 T
0 12 Q
( no longer provide No More Senders) 341.84 663 T
0 (detection. It is an error to request NMS detection on a port allocated with) 72 649 P
6 10 Q
0 (mach_port_allocate) 426.06 649 P
0 12 Q
0 (.) 534 649 P
(\050See Section 6.2.\051) 72 635 T
1 14 Q
(1) 72 605.67 T
(1.10.4 mach_port_allocate_full) 78.23 605.67 T
1 11 Q
(13) 262.06 611.27 T
0 12 Q
(New) 90 586 T
(. A new interface,) 111.86 586 T
6 10 Q
(mach_port_allocate_full) 200.45 586 T
0 12 Q
(, provides ports that support full Mach) 338.37 586 T
(semantics, including No More Senders detection. It is possible but not required to request NMS) 72 572 T
(detection on a port allocated with this interface. \050See Section 6.2.\051) 72 558 T
1 14 Q
(1) 72 528.67 T
(1.10.5 mach_port_r) 78.23 528.67 T
(equest_noti\336cation) 194.95 528.67 T
0 12 Q
-0.4 (When invoked with MACH_NOTIFY_NO_SENDERS, the requested receive right must have) 90 509 P
(been allocated with) 72 495 T
6 10 Q
(mach_port_allocate_full) 168.26 495 T
0 12 Q
(. Otherwise, it is an error to request NMS detec-) 306.18 495 T
(tion on a port that does not permit it; the error returned is KERN_INV) 72 481 T
(ALID_RIGHT) 407.23 481 T
(.) 477.62 481 T
1 14 Q
(1) 72 451.67 T
(1.10.6 mach_port_status) 78.23 451.67 T
0 12 Q
(The) 90 432 T
6 10 Q
(mach_port_status) 111.65 432 T
0 12 Q
( call changes slightly when invoked on a port that does not support) 207.6 432 T
(NMS detection. \050See Section 6.2.\051 The mps_srights \336eld in the) 72 418 T
2 10 Q
(mach_port_status_t) 376.15 418 T
0 12 Q
( structure) 484.09 418 T
(returned by) 72 404 T
6 10 Q
(mach_port_status) 129.95 404 T
0 12 Q
( is changed from a boolean to an integer) 225.9 404 T
(. The encoded value) 417.76 404 T
(MPS_UNKNOWN is returned for a port that does not permit no more senders noti\336cations indi-) 72 390 T
-0.1 (cating that it is unknown whether send rights exist. The existing boolean true and false values are) 72 376 P
(encoded as MPS_TRUE and MPS_F) 72 362 T
(ALSE.) 248.35 362 T
-0.13 (Although we permit lazy evaluation of port death, when invoked on a send or send-once right) 90 344 P
6 10 Q
-0.1 (mach_port_status) 72 330 P
0 12 Q
-0.05 ( always returns the \322true\323 status of the port, contacting the principal\325) 167.95 330 P
-0.05 (s node if) 495.84 330 P
(necessary) 72 316 T
(.) 117.84 316 T
1 14 Q
(1) 72 286.67 T
(1.1) 78.23 286.67 T
(1 NORMA Interface Changes) 94.95 286.67 T
1 11 Q
(14) 272.54 292.27 T
1 14 Q
(1) 72 256.67 T
(1.1) 78.23 256.67 T
(1.1 Node Naming) 94.95 256.67 T
1 11 Q
(15) 197.95 262.27 T
0 12 Q
(W) 90 237 T
(e change or abolish the following user) 100.36 237 T
(-level Mach interfaces to eliminate or minimize the) 283.32 237 T
(propagation of node name information to user) 72 223 T
(-level tasks. Node names are replaced with host or) 292.27 223 T
(host_priv ports, where possible.) 72 209 T
(1. routine) 90 191 T
6 10 Q
(task_set_child_node) 180 191 T
0 12 Q
(\050) 293.94 191 T
(tar) 315 191 T
(get_task:) 327.44 191 T
(task_t;) 405 191 T
(child_node:) 315 173 T
(int\051;) 405 173 T
1 F
(ABOLISHED) 90 155 T
0 F
(. This routine does not exist in V2. It exists in V1 only as a historical artifact.) 161.31 155 T
(2. routine) 90 137 T
6 10 Q
(norma_node_self) 180 137 T
0 12 Q
(\050) 269.95 137 T
(host:) 315 137 T
(host_t;) 405 137 T
72 108 540 123 C
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(13) 90 105.33 T
0 10 Q
(This interface has been included in Spec94 but is marked as experimental.) 100 101.33 T
0 8 Q
(14) 90 93.33 T
0 10 Q
(All NORMA interfaces have been deferred from Spec94.) 100 89.33 T
0 8 Q
(15) 90 81.33 T
0 10 Q
(This section is not yet complete.) 100 77.33 T
FMENDPAGE
%%EndPage: "81" 90
%%Page: "82" 90
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(82) 530.01 47.33 T
0 12 Q
(out node:) 315 712 T
(int\051;) 405 712 T
(Retain in current form. Because) 90 694 T
6 10 Q
(norma_get_special_port) 245.88 694 T
0 12 Q
( must exist, we de\336ne) 377.81 694 T
6 10 Q
(norma_n-) 485.08 694 T
(ode_self) 72 680 T
0 12 Q
( to be able to answer the question, \322what node am I?\323) 119.97 680 T
(3. routine) 90 662 T
6 10 Q
(norma_task_create) 180 662 T
0 12 Q
(\050) 281.94 662 T
(tar) 315 662 T
(get_task:) 327.44 662 T
(task_t;) 405 662 T
(inherit_memory:) 315 644 T
(boolean_t;) 405 644 T
(child_node:) 315 626 T
(int;) 405 626 T
(out child_task:) 315 608 T
(task_t\051;) 405 608 T
(Replace node name with host_priv port.) 90 590 T
(4. routine) 90 572 T
6 10 Q
(norma_get_special_port) 180 572 T
0 12 Q
(\050) 311.93 572 T
(host_priv:) 315.92 572 T
(host_priv_t;) 405 572 T
(node:) 315 554 T
(int;) 405 554 T
(which:) 315 536 T
(int;) 405 536 T
(out port:) 315 518 T
(mach_port_t\051;) 405 518 T
-0.28 (Retain in current form. Norma_get_special_port is used to solve the problem of bootstrapping) 90 500 P
(node communications: there must be a way for one node to obtain another node\325) 72 486 T
(s host port \050and) 457.4 486 T
(other special ports\051.) 72 472 T
(5. routine) 90 454 T
6 10 Q
(norma_set_special_port) 180 454 T
0 12 Q
(\050) 311.93 454 T
(host_priv:) 315.92 454 T
(host_priv_t;) 405 454 T
(which:) 315 436 T
(int;) 405 436 T
(port:) 315 418 T
(mach_port_t\051;) 405 418 T
(No change required.) 90 400 T
(6. routine) 90 382 T
6 10 Q
(norma_port_location_hint) 180 382 T
0 12 Q
(\050) 323.92 382 T
(task:) 327.92 382 T
(task_t;) 405 382 T
(port:) 315 364 T
(mach_port_t;) 405 364 T
(out node:) 315 346 T
(int\051;) 405 346 T
(Possibly this routine could return a host_t. Uses of this interface remain to be detailed.) 90 328 T
1 14 Q
(1) 72 298.67 T
(1.12 MIG) 78.23 298.67 T
1 11 Q
(16) 135.75 304.27 T
0 12 Q
(Set the MACH_MSG_RPC bit for all routine\325) 90 279 T
(s and function\325) 310.56 279 T
(s.) 381.85 279 T
(Permit the caller to set MACH_MSG_VOLA) 90 261 T
(TILE.) 306.86 261 T
(Permit the caller to set MACH_MSG_SYNC.) 90 243 T
1 14 Q
(1) 72 213.67 T
(1.13 Kernel Internals) 78.23 213.67 T
(1) 72 183.67 T
(1.13.1 New Page Pinning facility) 78.23 183.67 T
0 12 Q
(A new memory pinning facility is de\336ned and implemented as part of the) 90 164 T
2 10 Q
(DIPC) 444.77 164 T
0 12 Q
( project but is) 468.75 164 T
(available for general use.) 72 150 T
(vm_page_prep) 90 132 T
(vm_page_pin) 90 114 T
72 84 540 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(16) 90 81.33 T
0 10 Q
(These changes are not yet fully speci\336ed, and the MIG modi\336cations are not yet implemented.) 100 77.33 T
FMENDPAGE
%%EndPage: "82" 91
%%Page: "83" 91
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(83) 530.01 47.33 T
0 12 Q
(vm_page_unprep) 90 712 T
(vm_page_unpin) 90 694 T
1 14 Q
(1) 72 664.67 T
(1.13.2 Stealing Context) 78.23 664.67 T
0 12 Q
(Steal context to preserve kernel-generated message ordering.) 90 645 T
1 14 Q
(1) 72 615.67 T
(1.13.3 Abolished Internal NORMA Interfaces) 78.23 615.67 T
0 12 Q
(The following) 90 596 T
2 10 Q
(NORMA IPC Version One) 161.29 596 T
0 12 Q
( internal interfaces have been eliminated from the) 287.22 596 T
2 10 Q
(DIPC) 72 582 T
0 12 Q
( implementation. None of these interfaces was visible at the kernel API, so no applications) 95.99 582 T
(should be af) 72 568 T
(fected by eliminating these calls. \050Where necessary) 130.41 568 T
(, comparable functionality is) 375.76 568 T
(implemented in) 72 554 T
2 10 Q
(DIPC) 149.96 554 T
0 12 Q
( using internal RPC calls.\051 See T) 173.94 554 T
(able 1.) 330.01 554 T
1 14 Q
(1) 72 328.67 T
(1.13.4 Internal XMM Interfaces) 78.23 328.67 T
0 12 Q
-0.24 (This functionality remains essentially unchanged in) 90 309 P
2 10 Q
-0.48 (DIPC) 339.08 309 P
0 12 Q
-0.24 (. A few names have been changed to) 363.06 309 P
(emphasize that the interfaces belong to XMM and not to DIPC or NORMA IPC.) 72 295 T
77.5 378 534.5 384 C
0 0 612 792 C
0 10 Q
0 X
0 K
(a. Paging back-channel.) 95.5 371.33 T
(b. An unfortunate paging back-channel introduced to eliminate certain message storms.) 95.5 359.33 T
0 12 Q
(MiG Interface T) 83.55 522 T
(ype) 161.3 522 T
(Interface Name) 220.62 522 T
(Original Purpose) 391.86 522 T
(routine) 83.5 498 T
(norma_ipc_pull_receive) 190.67 498 T
(Receive right migration \050Section 6.7\051) 336.83 498 T
0 10 Q
(a) 515.72 502.8 T
0 12 Q
(routine) 83.5 476 T
(norma_ipc_stransit_request) 190.67 476 T
(T) 336.83 476 T
(ransit management \050Section 6.3\051) 343.74 476 T
(simpleroutine) 83.5 454 T
(norma_ipc_node_dnrequest) 190.67 454 T
(Dead name request \050Section 6.6\051) 336.83 454 T
(simpleroutine) 83.5 432 T
(norma_ipc_node_dnnotify) 190.67 432 T
(Dead name request \050Section 6.6\051) 336.83 432 T
(routine) 83.5 410 T
(norma_ipc_node_set) 190.67 410 T
(Receive right migration \050Section 6.7\051) 336.83 410 T
0 10 Q
(b) 515.72 414.8 T
1 12 Q
(T) 208.61 388 T
(able 1: Abolished Internal Interfaces) 215.5 388 T
77.5 537.75 77.5 402.25 2 L
V
0.5 H
0 Z
N
184.67 538.25 184.67 401.75 2 L
V
N
330.83 538.25 330.83 401.75 2 L
V
N
534.5 537.75 534.5 402.25 2 L
V
N
77.25 538 534.75 538 2 L
V
N
77.75 513.25 534.25 513.25 2 L
V
N
77.75 510.75 534.25 510.75 2 L
V
N
77.25 490 534.75 490 2 L
V
N
77.25 468 534.75 468 2 L
V
N
77.25 446 534.75 446 2 L
V
N
77.25 424 534.75 424 2 L
V
N
77.25 402 534.75 402 2 L
V
N
FMENDPAGE
%%EndPage: "83" 92
%%Page: "84" 92
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(84) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 12) 72 704 S
0 24 Q
-0.48 (Comparison W) 180 704 S
-0.48 (ith V) 319.2 704 S
-0.48 (ersion One) 362.78 704 S
1 14 Q
(12.1 Corr) 72 580.67 T
(ectness) 129.26 580.67 T
(12.1.1 Message Ordering) 72 550.67 T
0 12 Q
(Use proxy port queues to simulate the behavior of port queues in local Mach IPC.) 90 531 T
1 14 Q
(12.2 Robustness) 72 501.67 T
0 12 Q
(Analysis of failure modes common in V1 that are redressed in V2.) 90 482 T
1 14 Q
(12.2.1 Message Ordering V) 72 452.67 T
(iolations) 233.54 452.67 T
(12.2.2 V) 72 422.67 T
(irtual Memory Exhaustion) 120.06 422.67 T
(12.2.3 Many-to-One Message Overload) 72 392.67 T
(12.2.4 One-to-One Message Overload) 72 362.67 T
(12.2.5) 72 332.67 T
(Paging Flow Contr) 110.48 332.67 T
(ol Analysis) 223.72 332.67 T
0 12 Q
(Elimination of memory_object_data_write_completed constraint.) 90 313 T
2 10 Q
(NORMA IPC) 90 295 T
0 12 Q
( V) 143.97 295 T
(ersion T) 154.3 295 T
(wo has been designed to eliminate the requirement for paging \337ow con-) 193.1 295 T
(trol imposed on V) 72 281 T
(ersion One. This chapter discusses the need for explicit paging \337ow control in) 157.62 281 T
(V) 72 267 T
(ersion One and explains why it is no longer needed in V) 79.33 267 T
(ersion T) 347.48 267 T
(wo.) 386.27 267 T
(Discuss required device subsystem modi\336cations.) 90 249 T
(Discuss pager constraints.) 90 231 T
(In V2, port queue limits will be obeyed as follows.) 90 213 T
(Send right and receive right co-located:) 90 195 T
-0.09 (- MACH_SEND_AL) 90 177 P
-0.09 (W) 191.29 177 P
-0.09 (A) 201.29 177 P
-0.09 (YS means that the message will) 208.84 177 P
-0.09 (always be forced onto the receiver) 364.23 177 P
-0.09 (\325) 529.09 177 P
-0.09 (s) 532.42 177 P
(queue \050this is the regular Mach semantic\051 and the sender will be allowed to proceed immediately) 72 163 T
(- Otherwise, port queue limits are obeyed \050this is the regular Mach semantic\051) 90 145 T
(Send right remote from receive right:) 90 127 T
(- MACH_SEND_AL) 90 109 T
(W) 191.38 109 T
(A) 201.37 109 T
(YS means that the meta-kmsg will be enqueued on the receiver) 208.93 109 T
(\325) 512.48 109 T
(s) 515.81 109 T
(queue IF the queue has not exceed the port queue limit; otherwise, the message will be enqueued) 72 95 T
(on the sender) 72 81 T
(\325) 136.39 81 T
(s proxy queue without regard to queue limit; in both cases, the sender will be) 139.73 81 T
55.8 321.87 64.8 342.89 C
4 14 Q
0 X
0 K
(\321) 55.8 330.89 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "84" 93
%%Page: "85" 93
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(85) 530.01 47.33 T
0 12 Q
(allowed to proceed immediately) 72 712 T
(- Otherwise, the sender attempts to enqueue its meta-kmsg on the receiver; if the receiver) 90 694 T
(\325) 518.44 694 T
(s) 521.78 694 T
(queue is full, the sender is blocked \050this is the regular Mach semantic\051) 72 680 T
(In the case of a remote send right, the meta-kmsg enqueued on the receiver) 90 662 T
(\325) 450.15 662 T
(s message queue) 453.48 662 T
(describes the real kmsg, which continues to live on the sending node until a thread actually) 72 648 T
(\322receives\323 the meta-kmsg. When the receive happens, the data are brought over from the sender) 72 634 T
(.) 531.61 634 T
(Fault isolation implications are discussed elsewhere. \050See section 7.3, \322Behavior of Ordinary) 72 620 T
(Messages\323, on page) 72 606 T
(61.\051) 170.59 606 T
(For pageouts originating from the kernel, which are MACH_SEND_AL) 90 588 T
(W) 435.21 588 T
(A) 445.2 588 T
(YS, a burst of) 452.75 588 T
(pageouts will consume resources on the sending node without killing the receiving node; pages) 72 574 T
(will be brought over only as the pager manages to chew them up. However) 72 560 T
(, there are two impor-) 431.25 560 T
(tant caveats to be observed:) 72 546 T
(1. The vnode pager can\325) 90 528 T
(t create unlimited threads. It doesn\325) 206.01 528 T
(t today) 375.67 528 T
(, but any future multi-) 407.87 528 T
-0.19 (threaded vnode pager must use a \336xed set of threads. Otherwise, the pager can cause thrashing by) 72 514 P
(continually creating threads while trying to keep up with an essentially in\336nite request queue.) 72 500 T
(2. Interrupt completion processing in the device subsystem must be changed slightly) 90 482 T
(. Rather) 494.3 482 T
(than permit unlimited asynchronous I/O to the disk, which can\325) 72 468 T
(t sink data as fast as the pageout) 375.59 468 T
(and vnode pager threads can generate it, after a time the device subsystem must block threads) 72 454 T
-0.21 (when no more asynchronous I/Os can be handled. A \336xed number of operations will be permitted) 72 440 P
-0.51 (for each device, regardless of operation type \050synchronous/asynchronous, read/write\051. When these) 72 426 P
-0.07 (operations have been consumed, requests for asynchronous I/O will be forced to be synchronous,) 72 412 P
(instead. Normal behavior will resume as operations complete.) 72 398 T
(Given this design, today\325) 90 380 T
(s paging \337ow control can be eliminated. Flow control will originate) 209.93 380 T
-0.21 (from the disk and be propagated backwards to the vnode pager threads, thence to message queues) 72 366 P
(and eventually causing resources to accumulate on the sending node\050s\051 rather than the receiver) 72 352 T
(.) 525.3 352 T
(Resource consumption on the sending node\050s\051 is not a problem in the sense that it is identical to) 72 338 T
(the resource consumption of a uniprocessor Mach kernel that overruns an external pager) 72 324 T
(.) 495 324 T
(When compared with V1 paging \337ow control, the \322window\323 for pageouts will be ef) 90 306 T
(fectively) 491.49 306 T
(managed by each disk involved in paging rather than today\325) 72 292 T
(s sender) 358.8 292 T
(-limited window) 397.52 292 T
(. Thus, V2) 476.37 292 T
(\322paging \337ow control\323 will of) 72 278 T
(fer a greater opportunity for increased throughput to multiple disks.) 211.03 278 T
(V2 \337ow control solves the problem of unlimited user) 72 264 T
(-to-user messages by using the port queue) 326.27 264 T
(limit. This feature subsumes the functionality originally proposed in September for \322message) 72 250 T
(queue throttling\323. Additionally) 72 236 T
(, V2 \337ow control solves the general problem of unlimited kernel-) 219.47 236 T
(to-user messages by pushing those messages back onto the sending node WITHOUT causing the) 72 222 T
(sending threads to block -- thus preserving Mach semantics and eliminating the need to rewrite) 72 208 T
(kernel code that depends on sending messages without blocking.) 72 194 T
1 14 Q
(12.3 Port Right Management) 72 164.67 T
0 12 Q
(The existing) 90 145 T
2 10 Q
(NORMA) 152.63 145 T
0 12 Q
( implementation:) 182.61 145 T
-0.19 (\245Always transfers one transit with every send right except the destination right in the message) 90 127 P
(header) 72 113 T
(.) 103.3 113 T
(\245Keeps transit counts with the receive right as well as holders of send rights.) 90 95 T
-0.2 (\245Relies on the global message ordering from the stop and wait transport to avoid associating a) 90 77 P
FMENDPAGE
%%EndPage: "85" 94
%%Page: "86" 94
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(86) 530.01 47.33 T
0 12 Q
(transit with the destination right in the message header \050this is not correct, but very hard to break) 72 712 T
(in practice\051.) 72 698 T
(\245Also implements send once right transit logic for code symmetry reasons \050there is no other) 90 680 T
(good reason for this\051.) 72 666 T
(\245Requires bookkeeping operations to return transits for all ports.) 90 648 T
(The new transit design is superior in all of these areas.) 90 630 T
(The existing) 90 612 T
2 10 Q
(NORMA) 152.63 612 T
0 12 Q
( implementation also contains some confusing code that:) 182.61 612 T
(\245retries origin node if port is not initially found) 90 594 T
(\245resets location of migrated port in origin node before destroying port.) 90 576 T
(This code is no longer necessary because operations on the port during migration will be) 90 558 T
(blocked \050e.g., message enqueues\051. This means that if a principal or forwarding proxy cannot be) 72 544 T
(located for the port on a node where the receive right is known to have existed at some point, the) 72 530 T
(receive right can be assumed to have been destroyed. The existing) 72 516 T
2 10 Q
(NORMA) 392.42 516 T
0 12 Q
( implementation) 422.4 516 T
-0.02 (employed this mechanism to deal with races caused by allowing message to be enqueued while a) 72 502 P
(port was being migrated. Eliminating this code eliminates the need for the norma_ipc_node_set) 72 488 T
(operation and its special treatment in the current) 72 474 T
2 10 Q
(NORMA) 306.49 474 T
0 12 Q
( code.) 336.48 474 T
-0.17 (Receive right migration: When transits are in use, the notion of) 90 456 P
3 F
-0.17 (borr) 393.88 456 P
-0.17 (owing) 414.76 456 P
0 F
-0.17 ( a transit eliminates) 444.09 456 P
(all special-case code that existed in) 72 442 T
2 10 Q
(NORMA IPC Version One) 243.87 442 T
0 12 Q
( for transferring queued messages.) 369.8 442 T
1 14 Q
(12.4 Performance) 72 412.67 T
(12.5 Important Implementation Details) 72 382.67 T
0 12 Q
(Proxy \050and other\051 data structures can be represented considerably more compactly) 90 363 T
(.) 483.56 363 T
(Remote send once rights need not appear in the) 90 345 T
2 10 Q
(NORMA) 320.17 345 T
0 12 Q
( port table except for debugging pur-) 350.15 345 T
(poses.) 72 331 T
FMENDPAGE
%%EndPage: "86" 95
%%Page: "87" 95
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(87) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (CHAPTER 13) 72 704 S
0 24 Q
-0.48 (Implementation Issues) 180 704 S
1 14 Q
(13.1 Implementation Pr) 72 580.67 T
(ocess) 213.6 580.67 T
0 12 Q
(W) 90 561 T
(e expect to divide the project into many smaller tasks. Where possible, a task or collection) 100.36 561 T
(of tasks will correspond to an identi\336able subsystem that may be unit-tested before being inte-) 72 547 T
(grated with other subsystems. W) 72 533 T
(e also expect to push less-critical tasks towards the end of the) 227.94 533 T
(project time-line. For instance, user) 72 519 T
(-level interface modi\336cations may be postponed, and so may) 242.31 519 T
(certain performance optimizations.) 72 505 T
1 14 Q
(13.2 Internal Reorganization) 72 475.67 T
0 12 Q
(norma_internal.defs has been split into kern/norma_task.defs and xmm/xmm.defs.) 90 456 T
-0.03 (XMM has been pulled out of the norma/ directory and moved into a new directory) 90 438 P
-0.03 (, xmm/. As) 483.79 438 P
(part of this reor) 72 424 T
(ganization, XMM has been disentangled from NORMA_IPC and NOR-) 146.06 424 T
(MA_T) 72 410 T
(ASK.) 103.69 410 T
([T) 90 392 T
(o be expanded. Does this section belong in this chapter?]) 100.48 392 T
1 14 Q
(13.3 Platform) 72 362.67 T
0 12 Q
(The initial) 90 343 T
2 10 Q
(NORMA IPC Version Two) 142.64 343 T
0 12 Q
( implementation will tar) 268.57 343 T
(get the Intel Paragon. While) 383.96 343 T
-0.09 (some development and debugging may be done on Intel DOT) 72 329 P
-0.09 (s or even on PCs, the only transport) 366.49 329 P
(we will implement is KKT layered on top of Intel\325) 72 315 T
(s RPC/RDMA. No plan currently exists to) 313.51 315 T
(implement an Ethernet or cluster) 72 301 T
(-oriented transport.) 228.98 301 T
1 14 Q
(13.4 Robustness T) 72 271.67 T
(esting) 179.17 271.67 T
0 12 Q
(T) 90 252 T
(esting for robustness is divided into unit tests, functional tests, system regression tests, and) 96.49 252 T
(system stress tests.) 72 238 T
1 14 Q
(13.4.1 In-Kernel Unit T) 72 208.67 T
(ests) 211.03 208.67 T
0 12 Q
(Where possible, we will write in-kernel unit tests for new pieces of) 90 189 T
2 10 Q
(NORMA IPC) 414.76 189 T
0 12 Q
(. These tests) 468.73 189 T
-0.04 (will be compiled into the kernel itself \050but only in a non-production kernel\051. W) 72 175 P
-0.04 (e will boot the ker-) 448.9 175 P
(nel to a point just before loading the \336rst task, then break into the kernel and invoke the test driv-) 72 161 T
(er\050s\051 directly from the kernel debugger) 72 147 T
(.) 257.51 147 T
(These tests will be con\336ned to a single-node. W) 90 129 T
(e will introduce loopback facilities wherever) 319.22 129 T
(we can to test both message send and receive sides. For instance, we will introduce a debug-only) 72 115 T
(user) 72 101 T
(-level Mach call,) 91.74 101 T
6 10 Q
(norma_debug_proxy_allocate) 175.67 101 T
0 12 Q
(, that allocates a send right based on a) 331.58 101 T
-0.25 (receive right supplied as an ar) 72 87 P
-0.25 (gument. The receive right is entered into) 214.1 87 P
2 10 Q
-0.49 (NORMA) 410.23 87 P
0 12 Q
-0.25 ( as a side-ef) 440.21 87 P
-0.25 (fect, and) 496.2 87 P
FMENDPAGE
%%EndPage: "87" 96
%%Page: "88" 96
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(88) 530.01 47.33 T
0 12 Q
(the send right is created as a proxy for the receive right. Thus, it will be possible to send and) 72 712 T
(receive messages on a single node that traverse) 72 698 T
2 10 Q
(NORMA IPC) 301.15 698 T
0 12 Q
(.) 355.12 698 T
1 14 Q
(13.4.2 Lightweight Performance T) 72 668.67 T
(ests) 275.52 668.67 T
0 12 Q
(At selected milestones, we will perform simple performance tests design to test whether our) 90 649 T
(design and implementation will yield acceptable results. For instance, we will measure simple) 72 635 T
(message transfer by timing our in-kernel unit test; we will do the same thing for out-of-line data) 72 621 T
(transfer) 72 607 T
(.) 107.97 607 T
1 14 Q
(13.4.3 Functional T) 72 577.67 T
(ests) 186.55 577.67 T
0 12 Q
(User) 90 558 T
(-level \322little shop of horrors\323, including migration.) 112.4 558 T
1 14 Q
(13.4.4 Regr) 72 528.67 T
(ession T) 139.75 528.67 T
(ests) 187.06 528.67 T
0 12 Q
(RI NORMA and XMM tests) 90 509 T
(SSD EA) 90 491 T
(T) 129.65 491 T
(s and SA) 136.14 491 T
(T) 178.12 491 T
(s. PROBLEM: ef) 184.6 491 T
(fective use of EA) 267.35 491 T
(T) 349.61 491 T
(s and/or SA) 356.1 491 T
(T) 411.4 491 T
(s requires the use of an) 417.89 491 T
(Intel TNC-based server) 72 477 T
(, which uses typed IPC. NORMA no longer supports typed IPC!) 184.09 477 T
1 14 Q
(13.4.5 Str) 72 447.67 T
(ess T) 128.88 447.67 T
(ests) 157.52 447.67 T
0 12 Q
(SSD EA) 90 428 T
(T) 129.65 428 T
(s and SA) 136.14 428 T
(T) 178.12 428 T
(s. PROBLEM: ef) 184.6 428 T
(fective use of EA) 267.35 428 T
(T) 349.61 428 T
(s and/or SA) 356.1 428 T
(T) 411.4 428 T
(s requires the use of an) 417.89 428 T
(Intel TNC-based server) 72 414 T
(, which uses typed IPC. NORMA no longer supports typed IPC!) 184.09 414 T
(AIM) 90 396 T
(VSX) 90 378 T
1 14 Q
(13.4.6 Performance Characterization) 72 348.67 T
0 12 Q
(There will be a \336nal phase to characterize the performance of the beta-level or production-) 90 329 T
(level) 72 315 T
2 10 Q
(NORMA IPC Version Two) 98.31 315 T
0 12 Q
(.) 224.24 315 T
1 14 Q
(13.5 Dependencies) 72 285.67 T
0 12 Q
(W) 90 266 T
(e have identi\336ed the following dependencies critical to the success of the implementation) 100.36 266 T
(project. These dependencies are:) 72 252 T
(\245 A) 90 234 T
(vailability of an of) 104.97 234 T
(\336cial NMK16 release by project start.) 193.7 234 T
(\245 A) 90 216 T
(vailability of an of) 104.97 216 T
(\336cial NMK17 release as the ultimate code base tar) 193.7 216 T
(get.) 435.29 216 T
(\245 A) 90 198 T
(vailability of an untyped IPC version of AD Rev 1.0.) 104.97 198 T
(\245 A) 90 180 T
(vailability of an of) 104.97 180 T
(\336cial release of the Intel RPC/RDMA transport, with the following sub-) 193.7 180 T
(dependencies:) 99 166 T
(\245 This release may not include the ability to loopback RPC/RDMA requests in software.) 108 148 T
(RI therefore may have to modify the Intel transport to support loopback. This feature is) 117 134 T
(fundamental to our test plan.) 117 120 T
(\245 This release may not have a satisfactory callback mechanism. The RI may have to mod-) 108 102 T
-0.17 (ify the Intel transport to support a more general callback mechanism. This feature is fun-) 117 88 P
FMENDPAGE
%%EndPage: "88" 97
%%Page: "89" 97
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(89) 530.01 47.33 T
0 12 Q
(damental to a correct implementation.) 117 712 T
(\245 Either EA) 90 694 T
(T) 144.16 694 T
(s or SA) 150.65 694 T
(T) 185.3 694 T
(s or both require the use of TNC, but we do not have a plan to obtain a) 191.79 694 T
(version of the TNC server that supports untyped IPC.) 99 680 T
(\245 An adequate SMP testing strategy has yet to be de\336ned.) 90 662 T
(\245 The RI Paragon must be upgraded to support message coprocessor functionality) 90 644 T
(. Currently) 480.15 644 T
(,) 531.33 644 T
-0.02 (the RI\325) 99 630 P
-0.02 (s machine only uses one processor per node. Intel agrees that the theoretical through-) 131.96 630 P
(put available in this con\336guration is around 30MB/sec from node to node. The platform) 99 616 T
(must of) 99 602 T
(fer a much higher theoretical throughput if RI is to satisfactorily demonstrate that) 135.1 602 T
2 10 Q
(NORMA IPC Version Two) 99 588 T
0 12 Q
( achieves its performance goals. Note: we assume that the Intel) 224.93 588 T
(RPC/RDMA transport automatically \322does the right thing\323 and uses the message coproces-) 99 574 T
(sor if it is available.) 99 560 T
FMENDPAGE
%%EndPage: "89" 98
%%Page: "90" 98
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(90) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (APPENDIX A) 72 704 S
0 24 Q
-0.48 (DIPC KKT Summary) 180 704 S
0 12 Q
(This appendix summarizes the use of KKT by) 90 582 T
2 10 Q
(DIPC) 313.85 582 T
0 12 Q
(.) 337.83 582 T
1 14 Q
(A.1 Remote Pr) 72 552.67 T
(ocedur) 159.94 552.67 T
(e Calls) 200.88 552.67 T
2 10 Q
(DIPC) 90 533 T
0 12 Q
( de\336nes the following RPCs.) 113.99 533 T
1 14 Q
(A.1.1 W) 72 503.67 T
(AKEUP_SENDER) 119.03 503.67 T
(A.1.2 POR) 72 454.67 T
(T_PROBE) 135.64 454.67 T
(A.1.3 ACQUIRE_TRANSITS) 72 405.67 T
(A.1.4 YIELD_TRANSITS) 72 356.67 T
(A.1.5 SEND_MET) 72 307.67 T
(A_KMSG) 181.74 307.67 T
(A.1.6 MIGRA) 72 258.67 T
(TE_ST) 155.3 258.67 T
(A) 197.04 258.67 T
(TE) 206.1 258.67 T
(A.1.7 DN_REGISTER) 72 209.67 T
(A.1.8 DN_NOTIFY) 72 160.67 T
(A.1.9 UNBLOCK_POR) 72 111.67 T
(T) 213.38 111.67 T
FMENDPAGE
%%EndPage: "90" 99
%%Page: "91" 99
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(91) 530.01 47.33 T
1 14 Q
(A.1.10 REQUEST_CALLBACK) 72 710.67 T
(A.1.1) 72 661.67 T
(1 UNBLOCK_NODE) 102.32 661.67 T
(A.1.12 GET_SPECIAL_POR) 72 612.67 T
(T) 246.82 612.67 T
(A.1.13 ALIVE_NOTIFY) 72 563.67 T
(A.1.14 BEGIN_RECV_MIGRA) 72 514.67 T
(TE) 261.02 514.67 T
(A.1.15 TEST_SYNC) 72 465.67 T
0 12 Q
(This RPC is only available under the #if KERNEL_TEST con\336guration option.) 90 446 T
1 14 Q
(A.1.16 TEST_INTR_RPC) 72 416.67 T
0 12 Q
(This RPC is only available under the #if KERNEL_TEST con\336guration option.) 90 397 T
1 14 Q
(A.1.17 TEST_THREAD_RPC) 72 367.67 T
0 12 Q
(This RPC is only available under the #if KERNEL_TEST con\336guration option.) 90 348 T
1 14 Q
(A.2 T) 72 318.67 T
(ransport Upcalls) 104.39 318.67 T
2 10 Q
(DIPC) 90 299 T
0 12 Q
( depends on the following transport upcalls.) 113.99 299 T
1 14 Q
(A.2.1 *deliver) 72 269.67 T
FMENDPAGE
%%EndPage: "91" 100
%%Page: "92" 100
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(92) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (APPENDIX B) 72 704 S
0 24 Q
-0.48 (DIPC Threads) 180 704 S
1 14 Q
(B.1 dipc_message_delivery) 72 580.67 T
0 12 Q
(The) 90 561 T
2 10 Q
(DIPC) 111.65 561 T
0 12 Q
( *deliver upcall obtains an incoming) 135.63 561 T
2 10 Q
(meta_kmsg) 313.52 561 T
0 12 Q
( or) 367.49 561 T
2 10 Q
(kmsg) 383.48 561 T
0 12 Q
( from the transport. The) 407.47 561 T
(upcall determines the destination port and, if it exists, attempts to deliver the message directly) 72 547 T
(from interrupt level. If the fast delivery path isn\325) 72 533 T
(t possible, the message is handed of) 304.61 533 T
(f to a) 475.95 533 T
6 10 Q
(dipc_-) 503.6 533 T
(message_delivery) 72 519 T
0 12 Q
( thread to be delivered as if the message originated on the local node.) 167.95 519 T
(The delivery thread attempts to enqueue a message following all of the protocols governing) 90 501 T
(port operations, checking for aliveness, queue limit violations, blocked receivers, etc.) 72 487 T
(This thread has a wired stack and is guaranteed to run.) 90 469 T
0 10 Q
(1) 350.8 473.8 T
1 14 Q
(B.2 T) 72 439.67 T
(ransport Thr) 103.62 439.67 T
(ead) 182.27 439.67 T
(B.3 Kserver Thr) 72 409.67 T
(ead) 170.07 409.67 T
72 84 540 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 8 Q
0 X
0 K
(1) 90 81.33 T
0 10 Q
(Does this thread require VM privilege?) 96 77.33 T
FMENDPAGE
%%EndPage: "92" 101
%%Page: "93" 101
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(93) 530.01 47.33 T
72 747 540 747 2 L
7 X
V
2 H
0 Z
0 X
N
72 630 540 630 2 L
7 X
V
2 Z
0 X
N
0 12 Q
1.2 (APPENDIX C) 72 704 S
0 24 Q
-0.48 (KKT Interface Listing) 180 704 S
0 12 Q
(Calls from a kernel subsystem into the transport:) 90 582 T
2 10 Q
(kkt_return_t) 144 569.33 T
6 F
(KKT_HANDLE_ALLOC) 221.96 569.33 T
2 F
(\050) 317.9 569.33 T
(channel_t) 198 557.33 T
(channel,) 305.97 557.33 T
(/* IN */) 414 557.33 T
(handle_t) 198 545.33 T
(*handle,) 305.97 545.33 T
(/* OUT */) 414 545.33 T
(void) 198 533.33 T
(\050*error\051\050\051,) 305.97 533.33 T
(/* IN */) 414 533.33 T
(boolean_t) 198 521.33 T
(wait,) 305.97 521.33 T
(/* IN */) 414 521.33 T
(boolean_t) 198 509.33 T
(must_request\051;) 305.97 509.33 T
(/* IN */) 414 509.33 T
(kkt_return_t) 144 485.33 T
6 F
(KKT_HANDLE_FREE) 221.96 485.33 T
2 F
(\050) 311.91 485.33 T
(handle_t) 198 473.33 T
(handle\051;) 305.97 473.33 T
(/* IN */) 414 473.33 T
(kkt_return_t) 144 443.33 T
6 F
(KKT_CHANNEL_INIT) 221.96 443.33 T
2 F
(\050) 317.9 443.33 T
(channel_t) 198 431.33 T
(channel,) 305.97 431.33 T
(/* IN */) 414 431.33 T
(unsigned int) 198 419.33 T
(handles,) 305.97 419.33 T
(/* IN */) 414 419.33 T
(unsigned int) 198 407.33 T
(receivers,) 305.97 407.33 T
(/* IN */) 414 407.33 T
(void) 198 395.33 T
(\050*deliver\051\050\051,) 305.97 395.33 T
(/* IN */) 414 395.33 T
(void) 198 383.33 T
(\050*malloc\051\050\051,) 305.97 383.33 T
(/* IN */) 414 383.33 T
(void) 198 371.33 T
(\050*free\051\050\051\051;) 305.97 371.33 T
(/* IN */) 414 371.33 T
(kkt_return_t) 144 347.33 T
6 F
(KKT_SEND_CONNECT) 221.96 347.33 T
2 F
(\050) 317.9 347.33 T
(handle_t) 198 335.33 T
(handle,) 305.97 335.33 T
(/* IN */) 414 335.33 T
(node_name) 198 323.33 T
(node,) 305.97 323.33 T
(/* IN */) 414 323.33 T
(endpoint_t) 198 311.33 T
(endpoint,) 305.97 311.33 T
(/* IN */) 414 311.33 T
(request_block_t) 198 299.33 T
(request,) 305.97 299.33 T
(/* IN */) 414 299.33 T
(boolean_t) 198 287.33 T
(more,) 305.97 287.33 T
(/* IN */) 414 287.33 T
(kern_return_t) 198 275.33 T
(*ret\051;) 305.97 275.33 T
(/* OUT */) 414 275.33 T
(kkt_return_t) 144 251.33 T
6 F
(KKT_CONNECT_REPLY) 221.96 251.33 T
2 F
(\050) 323.9 251.33 T
(handle_t) 198 239.33 T
(handle,) 305.97 239.33 T
(/* IN */) 414 239.33 T
(kern_return_t) 198 227.33 T
(status,) 305.97 227.33 T
(/* IN */) 414 227.33 T
(kern_return_t) 198 215.33 T
(substatus\051;) 305.97 215.33 T
(/* IN */) 414 215.33 T
(kkt_return_t) 144 185.33 T
6 F
(KKT_REQUEST) 221.96 185.33 T
2 F
(\050) 287.92 185.33 T
(handle_t) 198 173.33 T
(handle,) 305.97 173.33 T
(/* IN */) 414 173.33 T
(request_block_t) 198 161.33 T
(request\051;) 305.97 161.33 T
(/* IN */) 414 161.33 T
(kkt_return_t) 144 131.33 T
6 F
(KKT_HANDLE_ABORT) 221.96 131.33 T
2 F
(\050) 317.9 131.33 T
(handle_t) 198 119.33 T
(handle,) 305.97 119.33 T
(/* IN */) 414 119.33 T
(kkt_return_t) 198 107.33 T
(reason\051;) 305.97 107.33 T
(/* IN */) 414 107.33 T
(kkt_return_t) 144 83.33 T
6 F
(KKT_HANDLE_INFO) 221.96 83.33 T
2 F
(\050) 311.91 83.33 T
FMENDPAGE
%%EndPage: "93" 102
%%Page: "94" 102
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(94) 530.01 47.33 T
2 F
(handle_t) 198 713.33 T
(handle,) 305.97 713.33 T
(/* IN */) 414 713.33 T
(handle_info_t) 198 701.33 T
(info\051;) 305.97 701.33 T
(/* OUT */) 414 701.33 T
(kkt_return_t) 144 677.33 T
6 F
(KKT_HANDLE_MIGRATE) 221.96 677.33 T
2 F
(\050) 329.9 677.33 T
(node_name) 198 665.33 T
(node,) 305.97 665.33 T
(/* IN */) 414 665.33 T
(unsigned int) 198 653.33 T
(old_handle,) 305.97 653.33 T
(/* IN */) 414 653.33 T
(handle_t) 198 641.33 T
(new_handle\051;) 305.97 641.33 T
(/* IN */) 414 641.33 T
0 12 Q
( Calls from the transport to the kernel \050indirect via the channel structure\051:) 90 606 T
2 10 Q
(void \050) 144 593.33 T
6 F
(*channel->deliver) 179.98 593.33 T
2 F
(\051\050) 281.92 593.33 T
(channel_t) 198 581.33 T
(channel,) 305.97 581.33 T
(/* IN */) 414 581.33 T
(handle_t) 198 569.33 T
(handle,) 305.97 569.33 T
(/* IN */) 414 569.33 T
(struct transmit) 198 557.33 T
(*transmit,) 305.97 557.33 T
(/* IN */) 414 557.33 T
(boolean_t) 198 545.33 T
(inline\051;) 305.97 545.33 T
(/* IN */) 414 545.33 T
(unsigned char * \050) 144 521.33 T
6 F
(*channel->malloc) 245.94 521.33 T
2 F
(\051\050) 341.89 521.33 T
(channel_t) 198 509.33 T
( channel,) 305.97 509.33 T
(/* IN */) 414 509.33 T
(vm_size_t) 198 497.33 T
( size\051;) 305.97 497.33 T
(/* IN */) 414 497.33 T
(void \050*) 144 473.33 T
6 F
(channel->free) 185.98 473.33 T
2 F
(\051\050) 263.93 473.33 T
(channel_t) 198 461.33 T
(channel,) 305.97 461.33 T
(/* IN */) 414 461.33 T
(unsigned char) 198 449.33 T
(*mem,) 305.97 449.33 T
(/* IN */) 414 449.33 T
(vm_size_t) 198 437.33 T
(size\051;) 305.97 437.33 T
(/* IN */) 414 437.33 T
(Node Map routines:) 90 413.33 T
(kkt_return_t) 144 401.33 T
6 F
(KKT_ADD_NODE) 221.96 401.33 T
2 F
(\050) 293.92 401.33 T
(node_map_t) 198 389.33 T
(map,) 305.97 389.33 T
(/* IN */) 414 389.33 T
(node_name) 198 377.33 T
(node\051;) 305.97 377.33 T
(/* IN */) 414 377.33 T
(kkt_return_t) 144 353.33 T
6 F
(KKT_REMOVE_NODE) 221.96 353.33 T
2 F
(\050) 311.91 353.33 T
(node_map_t) 198 341.33 T
(map,) 305.97 341.33 T
(/* IN */) 414 341.33 T
(node_name) 198 329.33 T
(*node\051;) 305.97 329.33 T
(/* OUT */) 414 329.33 T
(kkt_return_t) 144 305.33 T
6 F
(KKT_MAP_ALLOC) 221.96 305.33 T
2 F
(\050) 299.91 305.33 T
(node_map_t) 198 293.33 T
(map\051;) 305.97 293.33 T
(/* OUT */) 414 293.33 T
(kkt_return_t) 144 269.33 T
6 F
(KKT_MAP_FREE) 221.96 269.33 T
2 F
(\050) 293.92 269.33 T
(node_map_t) 198 257.33 T
(map\051;) 305.97 257.33 T
(/* IN */) 414 257.33 T
0 12 Q
(RPC routines:) 90 216 T
2 10 Q
(kkt_return_t) 144 203.33 T
6 F
(KKT_RPC_INIT) 221.96 203.33 T
2 F
(\050) 293.92 203.33 T
(unsigned int) 198 191.33 T
(channel,) 305.97 191.33 T
(/* IN */) 414 191.33 T
(void) 198 179.33 T
(\050*rpc_deliver\051,) 305.97 179.33 T
(/* IN */) 414 179.33 T
(unsigned int) 198 167.33 T
(send_handles,) 305.97 167.33 T
(/* IN */) 414 167.33 T
(unsigned int) 198 155.33 T
(receive_handles,) 305.97 155.33 T
(/* IN */) 414 155.33 T
(unsigned int) 198 143.33 T
(max_send_size\051;) 305.97 143.33 T
(/* IN */) 414 143.33 T
(kkt_return_t) 144 119.33 T
6 F
(KKT_RPC_HANDLE_ALLOC) 221.96 119.33 T
2 F
(\050) 341.89 119.33 T
(unsigned int) 198 107.33 T
(channel,) 305.97 107.33 T
(/* IN */) 414 107.33 T
(handle_t) 198 95.33 T
(uhandle,) 305.97 95.33 T
(/* OUT */) 414 95.33 T
(vm_size_t) 198 83.33 T
(rpc_buf_size\051;) 305.97 83.33 T
(/* IN */) 414 83.33 T
FMENDPAGE
%%EndPage: "94" 103
%%Page: "95" 103
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(95) 530.01 47.33 T
2 F
(kkt_return_t) 144 701.33 T
6 F
(KKT_RPC_HANDLE_BUF) 221.96 701.33 T
2 F
(\050) 329.9 701.33 T
(handle_t) 198 689.33 T
(handle,) 305.97 689.33 T
(/* IN */) 414 689.33 T
(void) 198 677.33 T
(*userbuff\051;) 305.97 677.33 T
(/* OUT */) 414 677.33 T
(kkt_return_t) 144 653.33 T
6 F
(KKT_RPC_HANDLE_FREE) 221.96 653.33 T
2 F
(\050) 335.89 653.33 T
(handle_t) 198 641.33 T
(handle\051;) 305.97 641.33 T
(/* IN */) 414 641.33 T
(kkt_return_t) 144 629.33 T
6 F
(KKT_RPC) 221.96 629.33 T
2 F
(\050) 263.93 629.33 T
(node_name) 198 617.33 T
(node,) 305.97 617.33 T
(/* IN */) 414 617.33 T
(handle_t) 198 605.33 T
(handle\051;) 305.97 605.33 T
(/* IN */) 414 605.33 T
(Callback support routines:) 90 581.33 T
(kkt_return_t \050*) 144 569.33 T
1 12 Q
(chan->rpc_deliver) 233.95 569.33 T
2 10 Q
(\051\050) 328.06 569.33 T
(channel_t) 198 557.33 T
(channel,) 305.97 557.33 T
(/* IN */) 414 557.33 T
(rpc_buf_t) 198 545.33 T
(rpc_buffer\051;) 305.97 545.33 T
(/* IN */) 414 545.33 T
(User supplied callbacks:) 90 521.33 T
(void \050) 144 509.33 T
6 F
(*handle->error) 179.98 509.33 T
2 F
(\051\050) 263.93 509.33 T
(kkt_return_t) 198 497.33 T
(kr,) 305.97 497.33 T
(/* IN */) 414 497.33 T
(handle_t) 198 485.33 T
(handle,) 305.97 485.33 T
(/* IN */) 414 485.33 T
(request_block_t) 198 473.33 T
(request\051;) 305.97 473.33 T
(/* IN */) 414 473.33 T
(void \050) 144 449.33 T
6 F
(*request->callback) 179.98 449.33 T
2 F
(\051\050) 287.92 449.33 T
(kkt_return_t) 198 437.33 T
(kr,) 305.97 437.33 T
(/* IN */) 414 437.33 T
(handle_t) 198 425.33 T
(handle,) 305.97 425.33 T
(/* IN */) 414 425.33 T
(request_block_t) 198 413.33 T
(request\051;) 305.97 413.33 T
(/* IN */) 414 413.33 T
FMENDPAGE
%%EndPage: "95" 104
%%Page: "96" 104
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(October 14, 1994) 72 47.33 T
1 F
(DRAFT) 288.79 47.33 T
0 F
(96) 530.01 47.33 T
1 18 Q
(NORMA IPC Issues) 228.05 708 T
1 12 Q
(Issue) 90 676 T
(Description) 216 676 T
(Status) 432 676 T
(Owner) 504 676 T
0 F
(Pin/unpin engine review) 90 658 T
(...errors) 216 640 T
(...unaligned transfers) 216 622 T
(KKT request interface) 90 604 T
(fast interrupt delivery path review) 90 586 T
(port migration review) 90 568 T
(blocked senders review) 90 550 T
(Port/UID Conversion) 90 514 T
(UID Format) 216 514 T
(Open) 432 514 T
(!!!!!) 504 514 T
(RPC OOL optimization) 90 496 T
(Reply to an RPC w/OOL is COW!) 216 496 T
(Open) 432 496 T
(norma_port_location) 90 478 T
(De\336ne host_t interface & add to spec) 216 478 T
(Open) 432 478 T
(XMM/paging \337ow) 90 460 T
(Allow XMM to do inline ONL) 216 460 T
(Y msg recv) 363.05 460 T
(Open) 432 460 T
(Kmsg / Port Release) 90 424 T
(Decrementing port ref counts) 216 424 T
(OOL Memory) 90 406 T
(Describe entire OOL delivery path) 216 406 T
(Closing) 432 406 T
(- IPC Format) 108 388 T
(Use entry lists \050document\051) 216 388 T
(Closing) 432 388 T
(alan) 504 388 T
(- Reception) 108 370 T
(Overwrite and alignment issues) 216 370 T
(Closing) 432 370 T
(- V) 108 352 T
(olatility) 122.1 352 T
(MIG; MACH_MSG_RPC/VOLA) 216 352 T
(TILE) 377.59 352 T
(Closing) 432 352 T
(Vnode Pager Reqs) 90 334 T
(Requirements necessary for pfc) 216 334 T
(Open) 432 334 T
(Message Reception) 90 316 T
(Describe entire reception path) 216 316 T
(Open) 432 316 T
FMENDPAGE
%%EndPage: "96" 105
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 104 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-Italic
%%+ Symbol
%%+ Courier-Oblique
%%+ Courier-Bold
%%+ Courier-BoldOblique
%%+ Times-BoldItalic
