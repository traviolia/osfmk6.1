%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 21 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Times-BoldItalic FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
8 0 /Helvetica FMFONTDEFINE
9 0 /Helvetica-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 8, 1994 3:12 pm) 90 46.67 T
(1) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(Real-Time Local and Remote MACH IPC:) 178.34 710.67 T
(Architecture and Design) 230.19 694.67 T
1 11 Q
(1) 376.31 700.27 T
1 14 Q
(Version 1.0) 272.19 656.67 T
(DRAFT) 281.9 616.67 T
2 12 Q
(Franco Travostino \050travos@osf.org\051) 218.03 578 T
(Franklin Reynolds \050fdr@osf.org\051) 226.69 562 T
(OSF Research Institute -) 188.26 546 T
(Advanced Development) 310.17 546 T
(Tim Martin \050tmartin@helix.enet.dec.com\051) 205.38 514 T
(Digital Equipment Corporation) 230.03 498 T
1 F
(Abstract) 283.69 448 T
0 11 Q
0.73 (As part of the real-time program at the OSF Research Institute, we have ex-) 144 423.67 P
-0.11 (tended MACH IPC to become the enabling technology for real-time local and dis-) 126 410.67 P
1.21 (tributed systems. While honoring the MACH IPC semantics, we have designed) 126 397.67 P
0.26 (new subsystems that complement traditional MACH IPC with) 126 384.67 P
2 F
0.26 (predictability) 403.96 384.67 P
0 F
0.26 (,) 463.16 384.67 P
2 F
0.26 (net-) 468.92 384.67 P
(working) 126 371.67 T
0 F
( and) 162.01 371.67 T
2 F
(fault isolation) 183.37 371.67 T
0 F
(.) 244.73 371.67 T
-0.14 (We provide predictability through resource reservations: in a sense, we are in-) 144 352.67 P
0.94 (jecting the notion of quality of service negotiation and classes. We provide net-) 126 339.67 P
0.88 (working support through a powerful framework, based on the object-oriented) 126 326.67 P
2 F
0.88 (x-) 477.46 326.67 P
1.96 (kernel) 126 313.67 P
0 F
1.96 ( technology, from University of Arizona; micro-protocols are easily de-) 153.46 313.67 P
0.96 (signed and configured to meet the requirements of media and quality of service) 126 300.67 P
0.54 (classes. We provide fault isolation through node-liveness and group membership) 126 287.67 P
-0.54 (protocols; we use asynchronous networks as the design center, and we mask timing) 126 274.67 P
0.73 (failures as crash failures. The result is that the traditional MACH IPC semantics) 126 261.67 P
0.99 (\050specifically, connection transitivity, reliability and ordering\051 are seamlessly ex-) 126 248.67 P
(tended across multiple failure domains.) 126 235.67 T
-0.59 (This is a working document, which we will be updating as the project progress-) 144 216.67 P
(es. We are grateful for any comments you may express.) 126 203.67 T
90 94 522 105.98 C
90 98.49 270 98.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
0.49 (1) 108 91.6 P
0 9 Q
0.64 (This research was supported in part by the Defense Advanced Research Projects Agency \050DARPA\051 and the Air) 111.49 88 P
(Force Materiel Command \050AFMC\051.) 90 77 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "ii" 2
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(May 4, 1994) 90 47.33 T
1 F
(ii) 483.22 47.33 T
1 14 Q
(T) 253.4 710.67 T
(able of Contents) 261.44 710.67 T
0 12 Q
(1.) 90 690 T
(Introduction) 108 690 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.91 690 T
(4) 498 690 T
(1.1) 108 676 T
(Goals) 126 676 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 155.91 676 T
(4) 498 676 T
(1.2) 108 662 T
(Deferred goals) 126 662 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.89 662 T
(5) 498 662 T
(2.) 90 648 T
(Local IPC) 108 648 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 158.91 648 T
(7) 498 648 T
(2.1) 108 634 T
(Overview) 126 634 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.9 634 T
(7) 498 634 T
(2.2) 108 620 T
(Is FIFO ordering sufficient?) 126 620 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 263.86 620 T
(7) 498 620 T
(2.3) 108 606 T
(Definitions) 126 606 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.9 606 T
(9) 498 606 T
(2.4) 108 592 T
(Memory allocation) 126 592 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 218.88 592 T
(9) 498 592 T
(2.5) 108 578 T
(Types of messages) 126 578 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 218.88 578 T
(10) 492.01 578 T
(2.6) 108 564 T
(Object lookup) 126 564 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 194.89 564 T
(11) 492.01 564 T
(2.7) 108 550 T
(Thread handoff) 126 550 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.89 550 T
(12) 492.01 550 T
(2.8) 108 536 T
(Notifications) 126 536 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 188.9 536 T
(12) 492.01 536 T
(2.9) 108 522 T
(Other kernel generated messages) 126 522 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 284.84 522 T
(12) 492.01 522 T
(2.10) 108 508 T
(Kernel services) 128.99 508 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.89 508 T
(12) 492.01 508 T
(2.11) 108 494 T
(Messages from Interrupt Service Routine) 128.99 494 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 329.82 494 T
(13) 492.01 494 T
(2.12) 108 480 T
(New Mach IPC interfaces: summary) 128.99 480 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305.83 480 T
(13) 492.01 480 T
(2.13) 108 466 T
(Characterization) 128.99 466 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 209.88 466 T
(13) 492.01 466 T
(2.14) 108 452 T
(Documentation) 128.99 452 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.89 452 T
(13) 492.01 452 T
(3.) 90 438 T
(Remote IPC \050single failure domain\051) 108 438 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 281.85 438 T
(14) 492.01 438 T
(3.1) 108 424 T
(Overview) 126 424 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.9 424 T
(14) 492.01 424 T
(3.2) 108 410 T
(The x-kernel framework) 126 410 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 245.87 410 T
(15) 492.01 410 T
(3.2.1Why the x-kernel?   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 396 T
(. . . . . . . . . . .) 425.77 396 T
(15) 492.01 396 T
(3.2.2Reengineer the x-kernel sources   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 382 T
(16) 492.01 382 T
(3.2.3Drivers, device dependencies   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 368 T
(. .) 479.74 368 T
(17) 492.01 368 T
(3.2.4In-kernel x-kernel implementation revisited   . . . . . . . . . . . . . . . . . . . . .) 126 354 T
(17) 492.01 354 T
(3.2.5Protocol graphs across multiple domains   . . . . . . . . . . . . . . . . . . . . . .) 126 340 T
(.) 485.73 340 T
(18) 492.01 340 T
(3.2.6Packet filter   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 326 T
(. . . . . . . . . . . . . . . .) 395.78 326 T
(19) 492.01 326 T
(3.2.7SMP, preemption   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 312 T
( . . . . . . . . . . .) 422.77 312 T
(20) 492.01 312 T
(3.2.8Resource control   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 298 T
(. . . . . . . . . . . .) 419.77 298 T
(22) 492.01 298 T
(3.2.9Paths   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 284 T
( . . . . . . . . . . . . . . . . . . . . .) 362.8 284 T
(23) 492.01 284 T
(3.2.10Scalability   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 270 T
(. . . . . . . . . . . . . . . .) 395.78 270 T
(26) 492.01 270 T
(3.2.11Miscellaneous   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 256 T
(. . . . . . . . . . . . .) 413.77 256 T
(26) 492.01 256 T
(3.3) 108 242 T
(Distributed IPC) 126 242 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.89 242 T
(27) 492.01 242 T
(3.3.1Data type definition   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 228 T
( . . . . . . . . .) 434.76 228 T
(27) 492.01 228 T
(3.3.2Message delivery and congestion control   . . . . . . . . . . . . . . . . . . . . . .) 126 214 T
(.) 485.73 214 T
(27) 492.01 214 T
(3.3.3Message representation   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 200 T
(. . . . . . .) 449.75 200 T
(29) 492.01 200 T
(3.3.4Message transmission   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 186 T
(. . . . . . . .) 443.76 186 T
(29) 492.01 186 T
(3.3.5Distributed port right management   . . . . . . . . . .  . . . . . . . . . . . . . . . . .) 126 172 T
(30) 492.01 172 T
(3.3.6Memory pinning   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 158 T
(. . . . . . . . . . . .) 419.77 158 T
(30) 492.01 158 T
(3.3.7Miscellaneous   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 144 T
(. . . . . . . . . . . . . .) 407.78 144 T
(30) 492.01 144 T
(3.4) 108 130 T
(Communication protocols) 126 130 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 251.86 130 T
(31) 492.01 130 T
(3.5) 108 116 T
(Configuration server and \322Hello World\323 protocol) 126 116 T
(. . . . . . . . . . . . . . . . . . . . .) 365.8 116 T
(35) 492.01 116 T
(3.6) 108 102 T
(Network name server) 126 102 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 230.87 102 T
(39) 492.01 102 T
(3.7) 108 88 T
(Time server) 126 88 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185.9 88 T
(41) 492.01 88 T
FMENDPAGE
%%EndPage: "ii" 3
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
0 10 Q
0 X
0 K
(May 4, 1994) 90 47.33 T
1 F
(iii) 481.83 47.33 T
0 12 Q
(3.8) 108 712 T
(Predictability) 126 712 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 191.9 712 T
(42) 492.01 712 T
(3.9) 108 698 T
(Characterization) 126 698 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 206.89 698 T
(43) 492.01 698 T
(4.) 90 684 T
(Remote IPC: fault isolation, fault management) 108 684 T
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 332.82 684 T
(44) 492.01 684 T
(4.1) 108 670 T
(Overview) 126 670 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.9 670 T
(44) 492.01 670 T
(4.2) 108 656 T
(Partial Failures) 126 656 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.89 656 T
(44) 492.01 656 T
(4.2.1Asynchronous networks   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 642 T
( . . . . . .) 452.75 642 T
(44) 492.01 642 T
(4.2.2Timing Failures and \322Node-alive\323   . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 628 T
(45) 492.01 628 T
(4.2.3Connection Transitivity and Consistency   . . . .. . . . . . . . . . . . . . . . . . .) 126 614 T
(45) 492.01 614 T
(4.3) 108 600 T
(Mach IPC Guarantees) 126 600 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.87 600 T
(46) 492.01 600 T
(4.4) 108 586 T
(Initial implementation constraints) 126 586 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290.84 586 T
(46) 492.01 586 T
(4.5) 108 572 T
(Related work) 126 572 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 191.9 572 T
(47) 492.01 572 T
(4.6) 108 558 T
(Failure dependency graph) 126 558 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 251.86 558 T
(47) 492.01 558 T
(4.7) 108 544 T
(The fault isolation architecture) 126 544 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275.85 544 T
(49) 492.01 544 T
(4.8) 108 530 T
(Data type definitions) 126 530 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.88 530 T
(50) 492.01 530 T
(4.9) 108 516 T
(Group membership) 126 516 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 221.88 516 T
(50) 492.01 516 T
(4.9.1Group membership characteristics   . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 502 T
(51) 492.01 502 T
(4.9.2Node failure characteristics   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 488 T
( . . .) 470.74 488 T
(51) 492.01 488 T
(4.10) 108 474 T
(Membership mechanism overview) 128.99 474 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 296.84 474 T
(52) 492.01 474 T
(4.11) 108 460 T
(The Hello World process) 128.99 460 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 251.86 460 T
(53) 492.01 460 T
(4.12) 108 446 T
(Sequencer/Census Taker) 128.99 446 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 248.86 446 T
(54) 492.01 446 T
(4.12.1Census taker selection and election   . . . . . . . .. . . . . . . . . . . . . . . . . . .) 126 432 T
(55) 492.01 432 T
(4.12.2Join   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 418 T
( . . . . . . . . . . . . . . . . . . . . .) 362.8 418 T
(55) 492.01 418 T
(4.12.3Maintaining liveness   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 404 T
(. . . . . . . .) 443.76 404 T
(56) 492.01 404 T
(4.13) 108 390 T
(Fault suspector) 128.99 390 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.89 390 T
(56) 492.01 390 T
(4.14) 108 376 T
(Extended Distributed IPC) 128.99 376 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 254.86 376 T
(56) 492.01 376 T
(4.14.1Message delivery and flow control   . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 362 T
(56) 492.01 362 T
(4.14.2Message representation   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 348 T
(. . . . . .) 455.75 348 T
(57) 492.01 348 T
(4.14.3Message transmission   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 334 T
(. . . . . . .) 449.75 334 T
(57) 492.01 334 T
(4.14.4Distributed port right management   . . . . . . . . . . .. . . . . . . . . . . . . . . .) 126 320 T
(59) 492.01 320 T
(4.14.5MACH IPC time-outs   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 126 306 T
(. . . . . . .) 449.75 306 T
(59) 492.01 306 T
(4.15) 108 292 T
(Extended KKT Interface) 128.99 292 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 248.86 292 T
(59) 492.01 292 T
(4.16) 108 278 T
(Implementation) 128.99 278 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 206.89 278 T
(60) 492.01 278 T
(5.) 90 264 T
(Bibliography) 108 264 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.9 264 T
(62) 492.01 264 T
FMENDPAGE
%%EndPage: "iii" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(4) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(1. Intr) 90 710.67 T
(oduction) 127.83 710.67 T
0 11 Q
-0.43 (In December 1994, the OSF RI will release a MACH based microkernel which supports a num-) 108 691.67 P
0.89 (ber of real-time services in local and distributed environments. This microkernel will be the en-) 90 678.67 P
-0.25 (abling technology for a new set of MACH servers and applications, which aim to cover most of the) 90 665.67 P
0.02 (real-time spectrum \050from soft real-time - e.g., multimedia - to hard real-time - e.g., embedded pro-) 90 652.67 P
(cess control\051.) 90 639.67 T
-0.23 (Most of the traditional MACH subsystems and abstractions will see relevant changes: schedul-) 108 620.67 P
(er, threads, locking protocol, IPC.) 90 607.67 T
-0.28 (The goal of this document is to illustrate the design of the IPC extensions. In the MACH termi-) 108 588.67 P
0.2 (nology, IPC has always indicated both the synchronous and asynchronous traffic. The availability) 90 575.67 P
0.02 (of a novel technology \050RPC, or Migrating Threads [Fo93][Co93]\051 for synchronous traffic prompts) 90 562.67 P
-0.5 (for a distinction between the paradigms: the real-time requirements apply to IPC asynchronous traf-) 90 549.67 P
(fic only, the real-time synchronous traffic being entirely conveyed through RPC.) 90 536.67 T
-0.41 (The document is organized as follows: the first section illustrates the scope of the real-time IPC) 108 517.67 P
-0.63 (project. The second section elaborates on the extensions that are required for local IPC services. The) 90 504.67 P
-0.05 (third and fourth section attach the remote IPC services: the former describes real-time services un-) 90 491.67 P
0.19 (der the assumption that node failures can not occur. The latter deals with the same set of services,) 90 478.67 P
(in the presence of failures.) 90 465.67 T
-0.17 (The whole real-time MACH project is covered by a set of companion documents on the differ-) 108 446.67 P
(ent components of the project [Bu94][Ha94][Ca94][Sw94].) 90 433.67 T
1 14 Q
(1.1 Goals) 90 404.67 T
0 11 Q
0.99 (MACH IPC is known to be a secure, location-transparent communication subsystem. In the) 108 385.67 P
0.16 (past, MACH IPC has been seamlessly extended to work across multiple, independent instances of) 90 372.67 P
0.87 (MACH microkernels, which interoperate via conventional communication media \050NORMA IPC) 90 359.67 P
0.28 (Version 1 [Br93]\051. NORMA IPC Version 1 has gone through a major redesign effort \050Distributed) 90 346.67 P
-0.02 (IPC) 90 333.67 P
0 9 Q
-0.02 (1) 107.1 338.07 P
0 11 Q
-0.02 ( [La94]\051, to eliminate most of the shortcomings detected in the first implementation. The new) 111.59 333.67 P
-0.22 (Distributed IPC has not yet addressed the extensions of MACH IPC semantics across multiple fail-) 90 320.67 P
-0.41 (ure domains; the configuration issues that arise from clustering nodes with independent administra-) 90 307.67 P
(tion are still largely unresolved \050most of the redesign effort being focused to multicomputers\051.) 90 294.67 T
-0.29 (Starting from this foundation, the Real-Time IPC project will add new functionalities, motivat-) 108 275.67 P
-0.03 (ed by predictability and interoperability. The whole Real-Time IPC effort can be partitioned into a) 90 262.67 P
(local IPC component and a remote IPC component.) 90 249.67 T
(The goals for local IPC are as follows:) 108 230.67 T
(\245) 108 211.67 T
-0.39 (Identify the IPC semantics which are critical to the developer of real-time applications. Make) 117 211.67 P
(them predictable.) 117 198.67 T
(\245) 108 174.67 T
0.26 (Extend the MACH IPC interface, any time conventional applications and real-time applica-) 117 174.67 P
-0.41 (tions show contrasting needs. If there are contrasting needs, the creation of MACH IPC inter-) 117 161.67 P
0.16 (faces for real-time use only pursues a three-fold goal: it provides a more specialized service) 117 148.67 P
-0.2 (for the forthcoming real-time applications, it does not charge the conventional users with ex-) 117 135.67 P
(tra-processing and it supports the MACH legacy code without changes.) 117 122.67 T
(The goals for remote IPC are as follows:) 108 98.67 T
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(1) 108 80.6 T
0 9 Q
(NORMA IPC Version Two and Distributed IPC are synonyms.) 111.49 77 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(5) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
-0.58 (Identify a strategy to provide network capabilities inside and outside the microkernel, to com-) 117 712.67 P
0.64 (plement the Distributed IPC code with an effective support of various media \050for instance,) 117 699.67 P
-0.2 (Ethernet, ATMs as well as the mesh of a multicomputer\051. This goal prompts for the adoption) 117 686.67 P
0.6 (of a framework which runs in kernel space and in user space, which is object-oriented and) 117 673.67 P
0.19 (highly configurable. The technology selected is the x-kernel, developed at the University of) 117 660.67 P
(Arizona [Hu91][Ma92][Dr93][Or93].) 117 647.67 T
(\245) 108 623.67 T
-0.38 (Provide the support for establishing a computing domain of uniprocessor and tightly-coupled) 117 623.67 P
-0.32 (multiprocessor nodes \050i486s\051 connected through an Ethernet link. Boot order is random. This) 117 610.67 P
-0.26 (goal requires a set of protocols to create, maintain and delete the computing domain \050in addi-) 117 597.67 P
0.62 (tion to the network capabilities mentioned above\051. The configuration of the computing do-) 117 584.67 P
-0.12 (main must be dynamic, discovery oriented. Observe that the resulting computing domain \050or) 117 571.67 P
(cluster\051 has no requirement for single image OS.) 117 558.67 T
(\245) 108 534.67 T
-0.36 (Verify that the transition from local IPC to remote IPC is seamless. Thus, it must result trans-) 117 534.67 P
-0.04 (parent to any application which uses IPC: for instance, queue limits and message order must) 117 521.67 P
0.03 (be effective in the remote case as well as in the local case. If local IPC introduces new, real-) 117 508.67 P
-0.25 (time specific interfaces and semantics, Distributed IPC will be enhanced to provide seamless) 117 495.67 P
(extension of them across the computing domain.) 117 482.67 T
(\245) 108 458.67 T
-0.58 (Make preemptible and MP-efficient all the new code that will run in kernel mode \050Distributed) 117 458.67 P
(IPC extensions, communication protocols\051.) 117 445.67 T
(\245) 108 421.67 T
-0.45 (Provide remote services whose timeliness is guaranteed, within some ranges of resources and) 117 421.67 P
-0.56 (traffic. Although Ethernet is known to produce unbounded delays, there is confidence that the) 117 408.67 P
-0.49 (distribution of timings will be favorable \050as an intermediate step towards media that offer ser-) 117 395.67 P
(vice guarantees\051.) 117 382.67 T
(\245) 108 358.67 T
0.97 (Extend the IPC semantics, the Distributed IPC algorithms and the network support across) 117 358.67 P
0.21 (multiple failure domains. A global strategy will be identified, to deal with a complete set of) 117 345.67 P
0.18 (failures \050permanent failures, transient failures, partitions\051 and to inject fault tolerance hooks) 117 332.67 P
0.49 (\050that will enable service replication\051. The implementation will be limited to a set of benign) 117 319.67 P
0.09 (failures \050fail safe/fail stop\051, with the limited goal of having fault isolation and fault manage-) 117 306.67 P
(ment.) 117 293.67 T
1 14 Q
(1.2 Deferr) 90 264.67 T
(ed goals) 150.35 264.67 T
0 11 Q
-0.09 (A number of activities have been postponed to a second phase of the IPC project, to take place) 108 245.67 P
(in 1995 and later:) 90 232.67 T
(\245) 108 213.67 T
-0.43 (There are at least three alternatives to the Ethernet medium. They would bring the throughput) 117 213.67 P
0.62 (in the 1 Gb/sec ballpark: ATMs, SHRIMP \050in essence, the backplane of an Intel Paragon\051,) 117 200.67 P
0.14 (SCSI. The selection of the x-kernel technology provides a two-fold advantage, while transi-) 117 187.67 P
-0.58 (tioning to new media: the media dependencies are well encapsulated, within a protocol graph;) 117 174.67 P
-0.32 (in addition, there are good chances that off-the-shelf, optimized protocols are available in the) 117 161.67 P
(x-kernel community to cope with a specific medium.) 117 148.67 T
(\245) 108 124.67 T
-0.02 (The concept of computing domain will evolve in several, orthogonal directions: heterogene-) 117 124.67 P
-0.6 (ity \050endianness, and/or word sizes\051, multiple logical and/or physical sub-networks, multicom-) 117 111.67 P
-0.35 (puters as members of the computing domain. These evolutions will require extensions to IPC) 117 98.67 P
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(6) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.37 (\050conversion algorithms [OS91]\051, to the network protocols \050routing, gateways\051 and to the con-) 117 712.67 P
(figuration protocols \050add, remove nodes\051.) 117 699.67 T
(\245) 108 675.67 T
0.02 (By the end of 1994, a node may join the computing domain once \050without rebooting\051. In the) 117 675.67 P
-0.49 (future, more sophisticated clustering techniques will be explored, for an easier administration) 117 662.67 P
(\050re-join any time during life of a system; partition joins\051.) 117 649.67 T
(\245) 108 625.67 T
-0.54 (The timeliness of a remote IPC service can become problematic in case the system experienc-) 117 625.67 P
-0.39 (es resource shortages, or the network experiences episodes of congestion. For instance, a net-) 117 612.67 P
-0.01 (work layer may drop an incoming fragment for lack of resources: whereas correctness is not) 117 599.67 P
0.44 (an issue \050protocols will recover\051, predictability is at risk. In fact, the developer of real-time) 117 586.67 P
-0.4 (applications would like to get performance guarantees: thus, semantics should be extended to) 117 573.67 P
-0.53 (allow the developer to reserve the resources in use at the network layers, and ultimately a por-) 117 560.67 P
(tion of the bandwidth \050if the medium allows it\051.) 117 547.67 T
(\245) 108 523.67 T
0.38 (This design document does not address the problem of converting user space OS servers to) 117 523.67 P
0.21 (take advantage of real-time support. By the end of 1994, the real-time support \050and the new) 117 510.67 P
0.27 (real-time IPC semantics, if any\051 will be validated with ad-hoc applications. Later, it is fore-) 117 497.67 P
0.09 (seeable that OS servers will take advantage of some of the work targeted to distributed real-) 117 484.67 P
(time IPC \050e.g., fault-tolerant single image clusters\051.) 117 471.67 T
(\245) 108 447.67 T
-0.24 (The models of failure addressed are rather benign: fail-safe/fail-stop. There are other failures) 117 447.67 P
-0.15 (which are commonly observed during the lifetime of a computing domain: a number of tran-) 117 434.67 P
0.49 (sient failures may occur, as the consequence of temporary episodes of network congestion,) 117 421.67 P
2.42 (or node overload. Transient failures require more sophisticated node-liveness protocols) 117 408.67 P
0.88 (\050\322fault suspectors\323\051, that are able to handle partitions in the computing domain. In reality,) 117 395.67 P
-0.14 (there are even more disruptive failures \050so-called Byzantine Failures\051, whereby nodes do not) 117 382.67 P
0.64 (halt and communication links do not break: they exhibit instead arbitrary behaviors. In the) 117 369.67 P
-0.16 (future, the models of failure will be extended to deal with some forms of Byzantine Failures.) 117 356.67 P
-0.07 (In addition, fault tolerance will be made available, in the form of replication of software ser-) 117 343.67 P
(vices across multiple failure domains.) 117 330.67 T
(\245) 108 306.67 T
0 (The introduction of a distributed computing domain introduces security and trust issues. Fu-) 117 306.67 P
-0.35 (ture projects will address the problems related to Remote IPCs across multiple trust domains.) 117 293.67 P
(\245) 108 269.67 T
0.35 (In the medium and long term, there are plans for a major redesign of MIG and MACH IPC) 117 269.67 P
-0.34 (semantics: a new object-oriented framework \050dubbed MIG++\051 would incorporate the today\325s) 117 256.67 P
-0.44 (stubs as object\325s methods. This activity is beyond the scope of the real-time IPC project. Dur-) 117 243.67 P
-0.57 (ing 1994, the existing MIG will only be modified to match the IPC interfaces \050in case changes) 117 230.67 P
(occur\051.) 117 217.67 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(7) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(2. Local IPC) 90 710.67 T
(2.1 Overview) 90 680.67 T
0 11 Q
-0.31 (A port consists of a queue of messages. The action of sending a message enqueues the message) 108 661.67 P
-0.52 (to the port queue \050in some cases, messages may be handed out directly to the recipient thread\051. Mes-) 90 648.67 P
0.02 (sages are delivered reliably: they are extracted from the port queue with FIFO ordering. Thus, two) 90 635.67 P
-0.45 (messages sent by any given thread will always be delivered in order; conversely, two messages sent) 90 622.67 P
0.23 (by different threads will be unordered \050the relative order being related to the way the two sending) 90 609.67 P
-0.05 (threads are scheduled\051. A per port maximum number of queued messages \050) 90 596.67 P
3 10 Q
-0.1 (qlimit) 419 596.67 P
0 11 Q
-0.05 (\051 represents the) 454.98 596.67 P
(current congestion control mechanisms.) 90 583.67 T
0.49 (Predictable performances and a powerful programming model, suitable for real-time applica-) 108 564.67 P
(tions, are the goals of our real-time Local IPC effort.) 90 551.67 T
1 14 Q
(2.2 Is FIFO ordering suf\336cient?) 90 522.67 T
0 11 Q
-0.17 (In a real-time system, there is a strong interest in seeing a message as a liaison between the cli-) 108 503.67 P
-0.44 (ent thread and the recipient thread; as such, someone could design a new message layout that would) 90 490.67 P
0.07 (carry some additional meta-data, like the scheduling attributes, to \322influence\323 the recipient thread.) 90 477.67 P
0.5 (Given the lack of ordering among messages originated by different threads, the kernel would de-) 90 464.67 P
0.8 (queue messages from the port queue with an order dictated by the meta-data information, rather) 90 451.67 P
0.41 (than with regular FIFO. This novel approach would solve cases of implicit priority inversion like) 90 438.67 P
0.13 (the following case: a server has a backlog of service requests, with the requests coming from high) 90 425.67 P
-0.22 (priority thread sitting at the bottom of the port queue. FIFO delivery guarantees that none of the re-) 90 412.67 P
(quests will be starved; however, low priority threads may have their requests processed first.) 90 399.67 T
0.63 (Researchers at CMU have extended the MACH IPC model to make it priority inversion free) 108 380.67 P
0.01 ([Ki93]. It is worth mentioning that their work was principally driven by the RPC paradigm \050as op-) 90 367.67 P
0.88 (posed to asynchronous messages\051. In our context, instead, the design is limited to asynchronous) 90 354.67 P
(messages.) 90 341.67 T
-0.62 (To solve cases of implicit priority inversion, originated by message queueing, we have explored) 108 322.67 P
(three different approaches:) 90 309.67 T
(1.) 108 290.67 T
-0.29 (Do not provide anything other than FIFO. It is the user responsibility to design the applica-) 126 290.67 P
0.3 (tions with a priority schema for which FIFO is effective; priority inversions \050if any\051 must) 126 277.67 P
-0.06 (produce limited and/or harmless effects; messages do not inherit any implicit priority con-) 126 264.67 P
(notation.) 126 251.67 T
(2.) 108 227.67 T
-0.41 (Fold scheduling attributes into messages, as meta-data. Use the meta-data to govern queue-) 126 227.67 P
0.4 (ing and dequeueing. In other words, the port queue would become another incarnation of) 126 214.67 P
-0.08 (the thread runqueue: in all cases, the scheduling policy would dequeue what has to be pro-) 126 201.67 P
(cessed next, with no distinction between a message and a thread.) 126 188.67 T
(3.) 108 164.67 T
0.93 (The above solution would give only a partial solution to the priority inversion problem.) 126 164.67 P
-0.37 (Once the message has been dequeued accordingly to meta-data, there is still the problem of) 126 151.67 P
0.51 (the server thread running at a priority which is independent from the message meta-data.) 126 138.67 P
-0.24 (Thus, the third solution adds the following rule: once the message is dequeued accordingly) 126 125.67 P
1.42 (to meta-data, the recipient thread gets contaminated by meta-data, so that the recipient) 126 112.67 P
0.72 (thread has chance to inherit the attributes that the client thread has sent to it through the) 126 99.67 P
(message.) 126 86.67 T
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(8) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.34 ( The three approaches have been listed in order of level of support to the user. Whereas the first) 108 712.67 P
0.18 (approach merely bounces the problem back to the user, the third one attempts to solve all the user) 90 699.67 P
0.8 (problems at the kernel level: it does fetch the message and set the thread priority accordingly to) 90 686.67 P
(meta-data.) 90 673.67 T
0.37 (The second and third approaches introduce a relevant overhead to the IPC mechanisms: mes-) 108 654.67 P
-0.17 (sages must include meta-data, and the port queue must have a structure similar to a runqueue: mul-) 90 641.67 P
(tiple buckets \050one per priority\051, with consequent larger use of kernel wired memory.) 90 628.67 T
0.39 (The behavior described by the third approach mimics the functionality exploited by RPC, for) 108 609.67 P
-0.68 (synchronous messages: in that context, the sender thread actually leaves the client address space and) 90 596.67 P
0.28 (restart execution into the server address space, carrying along all the thread attributes \050scheduling) 90 583.67 P
-0.5 (priority included\051. The analogy with RPC hurts the third solution: it is highly undesirable to provide) 90 570.67 P
0.56 (a mechanism that is very similar to another one, but still distinguishable. Besides, there could be) 90 557.67 P
-0.08 (cases that do not allow a client thread to condition the execution priority within a server \050e.g., trust) 90 544.67 P
-0.17 (reasons, or heterogeneous scheduling domains\051: in this case, the RPC mechanism would be unsuit-) 90 531.67 P
(able, and IPC, in the form of FIFO, would be left as the sole viable alternative.) 90 518.67 T
-0.15 (FIFO has the advantage of simplicity; its model is also starvation free. FIFO and RPC comple-) 108 499.67 P
0.33 (ment each other nicely. The designer of a client/server real-time application can use FIFOs effec-) 90 486.67 P
-0.19 (tively, once a valid end-to-end protocol is established: for example, the user can turn a single FIFO) 90 473.67 P
0.27 (into a set of) 90 460.67 P
2 F
0.27 (n) 145.38 460.67 P
0 F
0.27 ( FIFOs, one per scheduling priority \050typically, the FIFOs may have a linear or loga-) 150.88 460.67 P
0.19 (rithmic distribution\051; per every FIFO there would be a listener thread which is ready to run at that) 90 447.67 P
-0.22 (priority. In addition, a simple relation between the scheduling priorities of client and server threads) 90 434.67 P
(would control the backlog of messages in a FIFO.) 90 421.67 T
0.08 (The shortcomings of a FIFO based approach are highlighted by the following example. Let us) 108 402.67 P
(consider a router; typically, a router which operates in real-time has these characteristics:) 90 389.67 T
(\245) 108 370.67 T
(Messages are asynchronous.) 117 370.67 T
(\245) 108 346.67 T
(The value of data in the messages is known to decay over time.) 117 346.67 T
(\245) 108 322.67 T
(The router threads take advantage of a deadline based scheduling policy.) 117 322.67 T
-0.49 (In this case, the use of a simple FIFO could cause the router to miss a lot of deadlines: the router) 108 298.67 P
0.21 (would be highly ineffective when it is busy processing stale data, and it is doing useless traps and) 90 285.67 P
-0.33 (context switches \050livelock syndrome\051. Only a much more complex use of multiple FIFOs can make) 90 272.67 P
(the router effective:) 90 259.67 T
(\245) 108 240.67 T
0.12 (Use one FIFO per client of the router, and structure the router to have a low-latency listener) 117 240.67 P
(thread per FIFO.) 117 227.67 T
(\245) 108 203.67 T
-0.06 (Use a global event queue inside the router, managed according to deadlines \050the time-to-live) 117 203.67 P
(information carried along with the message\051.) 117 190.67 T
(After evaluating pros and cons, the conclusions can be summarized as follows:) 108 166.67 T
(\245) 108 147.67 T
0.44 (FIFO \050first approach\051 is a mechanism sufficient to address the real-time needs. Sometimes,) 117 147.67 P
-0.49 (the complexity of the problem will severely affect the design of the application. However, the) 117 134.67 P
-0.5 (application has a better context than the kernel, and ultimately it can identify a solution which) 117 121.67 P
(is optimal for the specific case.) 117 108.67 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(9) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
0.12 (More support from the kernel \050second and third approaches\051 might be helpful in some cases) 117 712.67 P
-0.37 (\050e.g., the router above\051. However, overhead, memory space and dualisms with RPC are prob-) 117 699.67 P
(lematic.) 117 686.67 T
(The resulting design choices are:) 108 662.67 T
(\245) 108 643.67 T
0.67 (Provide FIFO only. Adapt the existing kernel processing to provide a predictable behavior) 117 643.67 P
(\050with respect to resource allocation, object lookup\051.) 117 630.67 T
(\245) 108 606.67 T
0.49 (Consider the second approach for a second stage of the project. A new type of port will be) 117 606.67 P
-0.04 (created, and messages will carry scheduling attributes in the already existing message trailer) 117 593.67 P
(\050an extensible, self-describing repository for kernel generated data\051.) 117 580.67 T
(\245) 108 556.67 T
(Discard the third approach, and recommend the use of RPC instead.) 117 556.67 T
1 14 Q
(2.3 De\336nitions) 90 527.67 T
0 11 Q
(We define a) 108 508.67 T
1 F
(real-time port) 163.82 508.67 T
0 F
( to be a MACH IPC port created with the following new interface:) 229.41 508.67 T
0 10 Q
(kern_return_t) 126 490.33 T
4 F
(mach_port_allocate_rt) 182.9 490.33 T
0 F
(\050mach_port_t) 180 478.33 T
2 F
(task,) 431.4 478.33 T
0 F
(mach_port_right_t) 180 466.33 T
2 F
(right,) 428.06 466.33 T
0 F
(mach_port_t*) 180 454.33 T
2 F
(name\051;) 421.7 454.33 T
0 11 Q
-0.58 (Synopsis, description and parameters are the same as in) 108 435.67 P
3 10 Q
-1.27 (mach_port_allocate) 349.91 435.67 P
0 11 Q
-0.58 (\050\051. The new in-) 457.85 435.67 P
0.29 (terface sets up a slightly different in-kernel port structure: the flag) 90 422.67 P
3 10 Q
0.63 (MACH_PORT_RT) 385.78 422.67 P
0 11 Q
0.29 ( tags any) 457.74 422.67 P
3 10 Q
0.63 ( ip-) 497.38 422.67 P
(c_port_t) 90 409.67 T
0 11 Q
(that comes as the result of a successful) 143.97 409.67 T
3 10 Q
(mach_port_allocate_rt) 316.66 409.67 T
0 11 Q
(\050\051 invocation.) 442.6 409.67 T
-0.05 (We define the real-time IPC traffic as the set of MACH IPC messages whose destination ports) 108 390.67 P
(are real-time ports.) 90 377.67 T
1 14 Q
(2.4 Memory allocation) 90 348.67 T
0 11 Q
0.13 (Along the IPC path, we currently allocate virtual memory through zone services \050) 108 329.67 P
3 10 Q
0.28 (zalloc\050\051,) 468.03 329.67 P
2.17 (zget\050\051) 90 316.67 P
0 11 Q
0.99 (\051 or direct VM calls \050) 125.98 316.67 P
3 10 Q
2.17 (kmem_alloc\050\051, vm_allocate\050\051) 224 316.67 P
0 11 Q
0.99 (\051. A utility is available \050) 388.08 316.67 P
3 10 Q
2.17 (kal-) 498.01 316.67 P
0.51 (loc\050\051) 90 303.67 P
0 11 Q
0.23 (\051, that can use either zone services or direct VM calls \050the threshold being) 119.98 303.67 P
3 10 Q
0.51 (kalloc_max_-) 450.04 303.67 P
0.25 (prerounded) 90 290.67 P
0 11 Q
0.12 (\051. For sizes up to) 149.97 290.67 P
3 10 Q
0.25 (kalloc_max_prerounded) 226.84 290.67 P
0 11 Q
0.12 (, the zone package is meant to provide) 352.77 290.67 P
-0.09 (an optimized access to virtual memory. A per-processor cache,) 90 277.67 P
3 10 Q
-0.19 (ikm_cache) 368.38 277.67 P
0 11 Q
-0.09 (, is also used to further) 422.35 277.67 P
(optimize the zone access time.) 90 264.67 T
0.04 (Along the IPC path used for real-time traffic, the allocation of virtual memory has to be deter-) 108 245.67 P
0.08 (ministic, with respect to results \050buffer available or unavailable\051 and timings. This implies the fol-) 90 232.67 P
(lowing rules:) 90 219.67 T
(1.) 108 200.67 T
(Use wired memory only. To access it, use zone services only.) 126 200.67 T
(2.) 108 176.67 T
0.89 (Within IPC semantics, identify the types of messages whose IPC path obeys rule 1 \050see) 126 176.67 P
(2.6\051.) 126 163.67 T
-0.04 (Observe that these rules are not sufficient yet: a non real-time thread \050e.g., a low priority time-) 108 139.67 P
-0.19 (sharing thread\051 could get all the resources out of a zone pool, with the result that a subsequent real-) 90 126.67 P
0.15 (time thread would be stalled \050it does not really matter whether it returns an error or it blocks\051. We) 90 113.67 P
-0.35 (propose then to create an alternative memory pool,) 90 100.67 P
2 12 Q
-0.38 (real-time zones) 313.3 100.67 P
0 11 Q
-0.35 (, to be used for all the real-time) 386.53 100.67 P
(traffic. Thus, we add the following two rules:) 90 87.67 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(10) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(3.) 108 712.67 T
0.48 (Memory for real-time traffic is withdrawn from an alternate memory pool, the) 126 712.67 P
2 12 Q
0.52 (real-time) 478.03 712.67 P
(zones) 126 699.67 T
0 11 Q
(. The maximum size that can be allocated from this pool is) 152.65 699.67 T
3 10 Q
(rt_zone_max) 412.94 699.67 T
0 11 Q
(.) 478.9 699.67 T
(4.) 108 675.67 T
(Pre-expand) 126 675.67 T
2 12 Q
(real-time zones) 178.78 675.67 T
0 11 Q
( up to the limits foreseen for the entire system life.) 252.39 675.67 T
-0.02 (The size of the) 108 651.67 P
2 12 Q
-0.03 (real-time zones) 175.63 651.67 P
0 11 Q
-0.02 ( is an issue to be solved at deployment time. At one end of the) 249.23 651.67 P
-0.09 (spectrum, it is possible to have a configuration where) 90 638.67 P
2 12 Q
-0.1 (real-time zones) 326.59 638.67 P
0 11 Q
-0.09 ( can be) 400.1 638.67 P
1 F
-0.09 (overbooked) 433.7 638.67 P
0 F
-0.09 (: a real-) 488.63 638.67 P
0.21 (time user has a non-zero probability to fail in sending a message \050soft real-time\051. At the other end) 90 625.67 P
0.83 (of the spectrum, overbooking is not allowed \050hard real-time\051: in this case, note that the memory) 90 612.67 P
1.32 (available in) 90 599.67 P
2 12 Q
1.44 (real-time zones) 146.34 599.67 P
0 11 Q
1.32 ( must be equivalent to the sum of the sizes of the single message) 221.39 599.67 P
-0.5 (queues of the ports used for real-time traffic, each message queue being expanded to contain) 90 586.67 P
3 10 Q
-1.08 (qlim-) 492.02 586.67 P
(it) 90 573.67 T
0 11 Q
( messages.) 101.99 573.67 T
0.22 (For the) 108 554.67 P
2 12 Q
0.24 (real-time zones) 142.61 554.67 P
0 11 Q
0.22 ( to be effective, we require that all the threads that generate real-time) 216.46 554.67 P
-0.17 (traffic must cooperate. Further stages of the project will put) 90 541.67 P
2 12 Q
-0.19 (real-time zones) 352.84 541.67 P
0 11 Q
-0.17 ( more under user con-) 426.27 541.67 P
0.03 (trol: the existence of a single memory pool for all the real-time users may appear as a major short-) 90 528.67 P
0.22 (coming to the most sophisticated real-time users. In that case, we will add an additional argument) 90 515.67 P
0.26 (to) 90 502.67 P
4 10 Q
0.57 (mach_port_allocate_rt) 101.56 502.67 P
0 11 Q
0.26 (\050\051, to let the user name the memory pool that messages to that port) 227.49 502.67 P
-0.09 (must use. With additional efforts, we will allow the users to negotiate the use of resources with the) 90 489.67 P
(kernel as part of quality of service classes.) 90 476.67 T
0.65 (If it is not possible to allocate memory from the) 108 457.67 P
2 12 Q
0.71 (real-time zones) 326.94 457.67 P
0 11 Q
0.65 ( \050either because there is no) 401.27 457.67 P
0.2 (memory, or because the size requested exceeds the maximum size\051, the) 90 444.67 P
3 10 Q
0.45 (mach_msg\050\051) 408.03 444.67 P
0 11 Q
0.2 ( call will re-) 467.99 444.67 P
(turn) 90 431.67 T
3 10 Q
(MACH_SEND_NO_BUFFER) 110.45 431.67 T
0 11 Q
( to the user \050without any difference from the standard case\051.) 224.38 431.67 T
-0.14 (The per-processor cache) 108 412.67 P
3 10 Q
-0.31 (ikm_cache) 217.68 412.67 P
0 11 Q
-0.14 (is cloned, for real-time exclusive use. The use of a cache) 274.49 412.67 P
0.53 (may lead to latency jitter: this is not considered to be a problem \050as long as latency has an upper) 90 399.67 P
(bound\051.) 90 386.67 T
-0.11 (To accommodate the memory allocation model introduced for real-time, the existing IPC code) 108 367.67 P
-0.15 (needs to include several changes. Given that the destination port is buried into the message header,) 90 354.67 P
0.16 (the IPC code has to aggressively copy the header, identify and validate the destination port before) 90 341.67 P
0.44 (copying the rest of the message into kernel space \050so that the memory can be billed to the proper) 90 328.67 P
-0.1 (memory pool\051. An alternative form of mach_msg is being evaluated: the goal is to rework the call-) 90 315.67 P
0 (ing signature \050nine arguments, as of today\051, to include the destination port and to exclude other ar-) 90 302.67 P
(guments \050to be prepended to the regular message header\051.) 90 289.67 T
1 14 Q
(2.5 T) 90 260.67 T
(ypes of messages) 119.29 260.67 T
0 11 Q
-0.23 (In real-time IPC, the maximum size of an in-line message is dictated by the maximum size that) 108 241.67 P
(can be allocated from a zone. Thus:) 90 228.67 T
3 10 Q
(maxsize = rt_zone_max - MAX_TRAILER_SIZE - IKM_OVERHEAD) 90 209 T
2 12 Q
(.) 419.82 209 T
0 11 Q
0.21 (A message may include one or more out-of-line regions. Traditional IPC semantics produce a) 108 189.67 P
-0.4 (copy-on-write behavior by default; they also allow to skip copy-on-write \050and other lazy evaluation) 90 176.67 P
2.46 (principles\051 with sender side options \050) 90 163.67 P
3 10 Q
5.37 (dealloc, physicalcopy) 264.93 163.67 P
0 11 Q
2.46 (\051 and receiver side options) 396.23 163.67 P
0.03 (\050) 90 150.67 P
3 10 Q
0.06 (overwrite) 93.66 150.67 P
0 11 Q
0.03 (\051. In real-time IPC, a copy-on-write \050and lazy evaluation\051 behavior is generally unde-) 147.63 150.67 P
0.02 (sirable, in that the timings of the recipient thread are affected by the behavior of the sender thread.) 90 137.67 P
-0.37 (If the sender uses) 90 124.67 P
3 10 Q
-0.8 (physicalcopy) 167.85 124.67 P
0 11 Q
-0.37 (, the maximum size of a single out-of-line region must be limited) 239.81 124.67 P
(to) 90 111.67 T
3 10 Q
(msg_ool_size_small) 101.29 111.67 T
0 11 Q
(, otherwise resource allocation is not guaranteed to be bound.) 209.24 111.67 T
0.15 (A message may also include one or more arrays of port rights out-of-line. For the port manip-) 108 92.67 P
(ulation to be bound in time, an array can contain up to) 90 79.67 T
3 10 Q
( maxport) 328.01 79.67 T
0 11 Q
(port rights:) 378.98 79.67 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(11) 486 46.67 T
90 72 522 720 R
7 X
V
3 10 Q
0 X
(maxport = \050 rt_zone_max / sizeof\050mach_port_t\051 \051) 90 713.33 T
1 14 Q
(2.6 Object lookup) 90 684.67 T
0 11 Q
0.19 (From user space, ports can only be accessed via port names. In the IPC path, the kernel trans-) 108 665.67 P
-0.11 (lates the user port name \050a secure, location-independent capability\051 into a port structure \050the kernel) 90 652.67 P
(object\051; the translation happens within a per-task port name space.) 90 639.67 T
-0.03 (Any message send requires the translation of the destination port name; a similar translation is) 108 620.67 P
-0.67 (also applied to every port name specified in the message. The timeliness of the translations is largely) 90 607.67 P
-0.38 (dependent upon the population of the port name space \050from a minimum of three entries up to thou-) 90 594.67 P
0.65 (sand of entries\051. Today\325s translation algorithms use either an array \050table\051 or a splay-tree \050a self-) 90 581.67 P
0.15 (adjusting binary search tree [Sl90]\051. Kernel generated port names are maintained in the table; port) 90 568.67 P
-0.43 (names selected by the user are maintained in the splay-tree \050to cope with a very sparse name space\051.) 90 555.67 P
(The existing algorithm presents two behaviors that conflict with real-time predictability:) 108 536.67 T
(\245) 108 517.67 T
0.04 (The table needs to be expanded; the costs for the table expansion are charged to the first op-) 117 517.67 P
-0.23 (eration that fails to install a kernel generated port name into the table. Once the table gets ex-) 117 504.67 P
0.38 (panded \050in theory, a blocking operation\051, table and splay-tree interact: some entries may be) 117 491.67 P
(moved from the splay-tree to the table.) 117 478.67 T
(\245) 108 454.67 T
-0.13 (A splay-tree is a tree whereby rebalancing is carried out on access by the splaying operation.) 117 454.67 P
0.6 (Insert or delete operation cause no rebalancing of the tree. First access causes rebalancing;) 117 441.67 P
-0.23 (further accesses happen at no cost. Unfortunately, rebalancing at access time may lead to un-) 117 428.67 P
(predictable lookup times \050e.g., two threads doing lookups and preempting each other\051.) 117 415.67 T
0.24 (To solve these problems, we create a slightly different version of IPC space, suitable for real-) 108 391.67 P
(time use. The real-time IPC space is operated as follows:) 90 378.67 T
(\245) 108 359.67 T
(Real-time tasks can set-up a table, whose size is defined through a new interface:) 117 359.67 T
0 10 Q
(kern_return_t) 126 336.33 T
4 F
(task_set_port_space) 182.9 336.33 T
0 F
(\050mach_port_t) 180 324.33 T
2 F
(task,) 431.4 324.33 T
0 F
(long) 180 312.33 T
2 F
(table_entries\051;) 391.15 312.33 T
0 11 Q
0.9 (Note that real-time tasks may monitor the usage of the table through the existing) 117 293.67 P
3 10 Q
1.97 (mach_-) 486.02 293.67 P
-0.26 (port_names\050\051) 117 280.67 P
0 11 Q
-0.12 (call. Although a real-time task has control over the table, it may still be the) 194.7 280.67 P
-0.62 (victim of a resource attack, which results in the IPC port space being flooded with port names.) 117 267.67 P
-0.2 (We require that all the tasks that communicate via real-time IPC traffic must trust one anoth-) 117 254.67 P
(er.) 117 241.67 T
(\245) 108 222.67 T
0.16 (If the port name space population exceeds the size of the table pre-allocated by the task, the) 117 222.67 P
(kernel will regularly expand the table.) 117 209.67 T
(\245) 108 185.67 T
-0.1 (Splay-tree should never be used in real-time. This implies that a real-time task must avoid to) 117 185.67 P
(set up custom port names. Thus, it must avoid the use of:) 117 172.67 T
4 10 Q
(\245 mach_port_allocate_name) 126 149.33 T
(\245 mach_port_rename) 126 133.33 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(12) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(2.7 Thr) 90 710.67 T
(ead handoff) 134.06 710.67 T
0 11 Q
0.66 (Traditional MACH IPC code makes the following optimization: whenever a simple message) 108 691.67 P
0.72 (\050non) 90 678.67 P
3 10 Q
1.57 (MACH_MSGH_BITS_COMPLEX) 113.6 678.67 P
0 11 Q
0.72 (\051 is sent to initiate a RPC, and there is a thread waiting at the) 245.53 678.67 P
1.41 (RPC destination port, then a thread handoff takes place between the two threads: the recipient) 90 665.67 P
-0.19 (thread gets the CPU, and it inherits the stack from the client thread, without any scheduler involve-) 90 652.67 P
-0.39 (ment. This optimization may be very harmful in a real-time environment: in this context, the sched-) 90 639.67 P
0.3 (uler should never be bypassed \050because only the scheduler has the system-wide knowledge of the) 90 626.67 P
-0.33 (runnable threads and of the priorities associated to them\051. The solution is to inhibit the thread hand-) 90 613.67 P
-0.15 (off on any system to be used for real-time. An alternative solution is to preserve the thread handoff) 90 600.67 P
0.28 (practice, but restricting its use based on the scheduling attributes of the threads involved \050handoff) 90 587.67 P
(only if both threads are time-sharing threads\051.) 90 574.67 T
1 14 Q
(2.8 Noti\336cations) 90 545.67 T
0 11 Q
(To queue a notification message to a port, the kernel must allocate wired memory.) 108 526.67 T
-0.37 (If the notification target port is a real-time port, the memory is allocated from) 108 507.67 P
2 12 Q
-0.41 (real-time zones) 446.05 507.67 P
0 11 Q
-0.37 (.) 519.25 507.67 P
0.38 (Furthermore, the memory must be aggressively allocated when the notifications are requested \050as) 90 494.67 P
0.16 (opposed to when the notifications are actually enqueued\051. Thus, the memory for notifications gets) 90 481.67 P
0.84 (allocated and bound to the port any time a) 90 468.67 P
3 10 Q
1.83 (mach_port_request_notif) 285.18 468.67 P
1.83 (ication\050\051) 423.1 468.67 P
0 11 Q
0.84 ( call is is-) 477.07 468.67 P
0.52 (sued; similarly, memory has to be allocated at) 90 455.67 P
3 10 Q
1.14 (mach_msg_send\050\051) 298.92 455.67 P
0 11 Q
0.52 ( time if the) 388.87 455.67 P
2 F
0.52 (notify) 441.61 455.67 P
0 F
0.52 ( argument is) 466.64 455.67 P
(being used.) 90 442.67 T
1 14 Q
(2.9 Other kernel generated messages) 90 413.67 T
0 11 Q
-0.46 (Similarly to what we do for notifications, we try to use) 108 394.67 P
2 12 Q
-0.5 (real-time zones) 346.5 394.67 P
0 11 Q
-0.46 ( any time the kernel has) 419.62 394.67 P
-0.46 (to conceive a message that has to be enqueued on a real-time port. The two most common cases are:) 90 381.67 P
(\245) 108 362.67 T
(Replies to RPCs) 117 362.67 T
0 9 Q
(1) 189.04 367.07 T
0 11 Q
( to the kernel \050including the device interface\051.) 193.53 362.67 T
(\245) 108 338.67 T
(Exceptions.) 117 338.67 T
(The RPC reply port and the exception port decide whether) 108 314.67 T
2 12 Q
(real-time zones) 367.35 314.67 T
0 11 Q
(must be used) 443.97 314.67 T
2 12 Q
(.) 501.34 314.67 T
0 11 Q
-0.52 (There are some exceptions, however. Consider the case of the) 108 295.67 P
4 10 Q
-1.14 (net_io) 377.35 295.67 P
0 11 Q
-0.52 ( path. A MACH message) 413.33 295.67 P
0.14 (is created before the destination port is known. Furthermore, the MACH packet filter may need to) 90 282.67 P
-0.07 (clone the packet and send it to multiple destination ports. In cases as complex as) 90 269.67 P
4 10 Q
-0.15 (net_io) 444.73 269.67 P
0 11 Q
-0.07 (, it is rec-) 480.71 269.67 P
0.96 (ommended that ad hoc memory pools are used \050like) 90 256.67 P
4 10 Q
2.1 (net_io) 329.02 256.67 P
0 11 Q
0.96 ( already does:) 364.99 256.67 P
4 10 Q
2.1 (net_kmsg_get\050\051) 431.64 256.67 P
0 11 Q
0.96 (\051.) 515.59 256.67 P
1.05 (With ad hoc memory pools, it is possible to implement specific strategies to deal with memory) 90 243.67 P
(shortages \050in the) 90 230.67 T
4 10 Q
(net_io) 165.37 230.67 T
0 11 Q
(case, just drop the incoming packet\051.) 207.34 230.67 T
1 14 Q
(2.10 Kernel services) 90 201.67 T
0 11 Q
-0.61 (Any time the kernel owns a receive right, the messages addressed to it follow a slightly different) 108 182.67 P
0.08 (path: regardless of whether the user asks for a synchronous or an asynchronous service, the kernel) 90 169.67 P
0.78 (steals the context of the sender thread to perform the kernel service. In contrast with the regular) 90 156.67 P
-0.17 (MACH IPC semantics, an asynchronous message to the kernel causes the sender thread to block in) 90 143.67 P
0.64 (user space, until it has finished the kernel processing. This implies also that the kernel service is) 90 130.67 P
(carried out with the same scheduling priority as the sender thread.) 90 117.67 T
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(1) 108 80.6 T
0 9 Q
(This is the traditional MACH RPC, as opposed to the new RPC in [Bu94].) 111.49 77 T
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(13) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
0.42 (This behavior needs to be documented, in that the latency of the message send depends upon) 108 712.67 P
(the type of kernel service invoked.) 90 699.67 T
1 14 Q
(2.1) 90 670.67 T
(1 Messages fr) 106.72 670.67 T
(om Interrupt Service Routine) 187.29 670.67 T
0 11 Q
(TBD) 108 651.67 T
1 14 Q
(2.12 New Mach IPC interfaces: summary) 90 622.67 T
0 11 Q
(Two new kernel interfaces have been introduced:) 108 603.67 T
0 10 Q
(kern_return_t) 126 585.33 T
4 F
(mach_port_allocate_rt) 182.9 585.33 T
0 F
(\050mach_port_t) 180 573.33 T
2 F
(task,) 431.4 573.33 T
0 F
(mach_port_right_t) 180 561.33 T
2 F
(right,) 428.06 561.33 T
0 F
(mach_port_t*) 180 549.33 T
2 F
(name\051;) 421.7 549.33 T
0 F
(kern_return_t) 126 531.33 T
4 F
(task_set_port_space) 182.9 531.33 T
0 F
(\050mach_port_t) 180 519.33 T
2 F
(task,) 431.4 519.33 T
0 F
(long) 180 507.33 T
2 F
(table_entries\051;) 391.15 507.33 T
1 14 Q
(2.13 Characterization) 90 478.67 T
0 11 Q
0.01 (To measure the latency of the IPC path, some of the existing MACH IPC tests will be adapted) 108 459.67 P
0.05 (to take advantage of the real-time scheduling, clock and timers as well as the new interfaces intro-) 90 446.67 P
(duced above. Existing MACH IPC tests include:) 90 433.67 T
(\245) 108 414.67 T
(CMU machipc application.) 117 414.67 T
(\245) 108 390.67 T
(OSF RI\325s microkernel benchmarks [Be93].) 117 390.67 T
1 14 Q
(2.14 Documentation) 90 361.67 T
0 11 Q
0.15 (The MACH3 Server Writer\325s Interface [Lo93b] has to include the two new MACH IPC inter-) 108 342.67 P
(faces.) 90 329.67 T
0.37 (The MACH3 Server Writer\325s Guide [Lo93a] has to include the local real-time IPC semantics) 108 310.67 P
-0.38 (that have been presented above. The same extension must apply to the forthcoming Real-Time Pro-) 90 297.67 P
(gramming Guide.) 90 284.67 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(14) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(3. Remote IPC \050single failur) 90 710.67 T
(e domain\051) 256.47 710.67 T
(3.1 Overview) 90 680.67 T
0 11 Q
0.43 (To bring a set of independent nodes into a single computing domain, and to provide seamless re-) 90 661.67 P
0 (mote IPC facilities that are suitable for real-time applications, a relevant number of services has to) 90 648.67 P
(be added to the today\325s technology.) 90 635.67 T
0.05 (First, the core Distributed IPC subsystem [La94]) 90 616.67 P
0 9 Q
0.04 (1) 304.21 621.07 P
0 11 Q
0.05 ( needs to be complemented with communication) 308.71 616.67 P
-0.55 (services effective over Ethernet, configuration and administration services; for correctness, security) 90 603.67 P
(and performance reasons, some of the services are executed in kernel mode; the other, non-critical) 90 590.67 T
0.89 (services are executed in user mode \050privileged servers\051. All the above services are implemented) 90 577.67 P
(with the x-kernel technology \050see dotted areas\051.) 90 226.67 T
0.35 (Second, the execution paths that are used by real-time applications must exhibit a predictable) 108 207.67 P
(behavior.) 90 194.67 T
0.48 (This entire section of the design assumes that the entire computing domain is a single failure) 108 175.67 P
0.09 (domain \050with the exception of the communication media, which may exhibit omission and perfor-) 90 162.67 P
-0.54 (mance failures\051. The next section \050Section 4\051 will break this assumption, and it will address the fault) 90 149.67 P
(isolation and fault management issues, at every level of the remote IPC services.) 90 136.67 T
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(1) 108 80.6 T
0 9 Q
(NORMA IPC Version Two and Distributed IPC are synonyms.) 111.49 77 T
90 72 522 720 C
128.23 248.67 483.77 574 C
212.75 266.55 392.75 293.55 R
7 X
0 K
V
0 11 Q
0 X
(Figure 1. The big picture) 221.75 276.55 T
136.56 456 460.56 456 2 L
3 H
2 Z
1 X
N
140.56 341 464.56 341 2 L
0 X
N
199.56 357 406.56 384 R
5 X
V
0.5 H
0 X
N
(MACH) 136.67 442 T
173.56 492.33 234.23 539 R
N
(OS personalities) 162.23 548 T
(RT-applications) 275.56 547.33 T
285 491.67 345.67 538.33 R
13 X
V
0 X
N
164.12 485.67 227.12 530.67 R
N
275.56 485 338.56 530 R
13 X
V
0 X
N
266.56 476 329.56 521 R
13 X
V
0 X
N
181.56 429 424.56 456 R
N
(Local IPC) 281.23 438 T
199.56 384 379.23 429 R
12 X
V
0 X
N
(Communication) 236.56 366 T
159.91 475.83 222.91 520.83 R
N
(API) 136.56 429 T
(Services) 310.23 366 T
(HW) 139.23 348.33 T
163.56 340.33 442.56 357.33 R
N
(Driver/Packet filter) 250 347.33 T
388.28 491.59 448.95 538.25 R
5 X
V
0 X
N
(Configuration server,) 361.72 555.92 T
(Time server, net server) 362.39 547.59 T
378.18 484.25 441.18 529.25 R
5 X
V
0 X
N
369.18 475.25 432.18 520.25 R
5 X
V
0 X
N
186.76 464.78 191 476 193.35 464.24 190.06 464.51 4 Y
V
185.23 364.57 181 353.34 178.64 365.11 181.94 364.84 4 Y
V
190.06 464.5 181.94 364.83 2 L
1 H
0 Z
N
201.11 464.68 201.66 476.67 207.54 466.21 204.33 465.45 4 Y
V
224.89 391.33 224.33 379.34 218.45 389.8 221.67 390.56 4 Y
V
204.33 465.44 221.67 390.56 2 L
N
393.59 453.55 403.66 475.34 406.66 451.53 400.12 452.54 4 Y
4 X
V
399.06 401.79 388.99 380.01 385.99 403.82 392.53 402.8 4 Y
V
400.13 452.54 392.54 402.8 2 L
4 H
N
262.67 400.67 335.23 412 R
7 X
V
0.5 H
0 X
N
(Distributed IPC) 266.23 403.33 T
304.78 464.54 308.33 476 311.4 464.4 308.09 464.47 4 Y
V
309.87 390.8 306.33 379.34 303.26 390.94 306.57 390.87 4 Y
V
308.1 464.47 306.57 390.87 2 L
1 H
N
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(15) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(3.2 The x-kernel framework) 90 710.67 T
(3.2.1 Why the x-kernel?) 90 680.67 T
0 11 Q
0.28 (The complexity of the services revolving around IPC prompts for the most pervasive use of a) 108 661.67 P
(framework, to develop the single protocols and to interconnect them in an efficient way.) 90 648.67 T
-0.09 (The x-kernel framework and toolkit, from the University of Arizona, has been carefully evalu-) 108 629.67 P
-0.43 (ated at the OSF RI [Tr93a]. The outcome of the evaluation has pointed out several strengths that are) 90 616.67 P
(extremely important to the project:) 90 603.67 T
(\245) 108 584.67 T
-0.45 (The x-kernel provides a protocol-independent framework that promotes the development and) 117 584.67 P
-0.68 (dynamic configuration of different network services. It provides a consistent development en-) 117 571.67 P
-0.53 (vironment in which to pursue diverse network-related subprojects and will allow to seamless-) 117 558.67 P
0.05 (ly integrate each project into the system upon its completion without adversely affecting the) 117 545.67 P
(integration of the other subprojects.) 117 532.67 T
(\245) 108 508.67 T
0.29 (The x-kernel provides a powerful set of tools that facilitate the development and configura-) 117 508.67 P
1.14 (tion of communication systems. Currently, the x-kernel system includes several protocols) 117 495.67 P
-0.37 (that can be used) 117 482.67 P
5 F
-0.37 (a) 188.76 482.67 P
0 F
-0.37 (\051 in assembling new protocol graphs, and) 194.25 482.67 P
5 F
-0.37 (b) 375.38 482.67 P
0 F
-0.37 (\051 as a basis for creating new pro-) 380.87 482.67 P
0.7 (tocols. The x-kernel also provides a rich toolkit that developers can use to implement new) 117 469.67 P
-0.04 (protocols. These tools allow programmers to reuse existing code and write encapsulated and) 117 456.67 P
(easily maintainable code.) 117 443.67 T
(\245) 108 419.67 T
-0.66 (The x-kernel can be built in both user space and kernel space without differences, with respect) 117 419.67 P
-0.04 (to the protocols. The domain independency allows to use the same framework for building a) 117 406.67 P
0.71 (system-wide protocol graph, which comprehend in-kernel services \050e.g., the transport\051 and) 117 393.67 P
0.48 (user space services \050e.g. the configuration protocol\051. In the longer term, this capability will) 117 380.67 P
-0.69 (be used to unify and reorganize the whole set of communication services present in the system) 117 367.67 P
(\050for instance, [Ma93a].\051) 117 354.67 T
(\245) 108 330.67 T
0.18 (Given the x-kernel\325s emphasis on modularity, it has a high potential with respect to flexible) 117 330.67 P
1.87 (configurability. Today, developers statically define the topology of an x-kernel protocol) 117 317.67 P
-0.3 (graph via a meta language. It is very easy to change a protocol graph at build time \050to accom-) 117 304.67 P
-0.48 (modate, for instance, a change in the underlying network hardware\051. The x-kernel also allows) 117 291.67 P
0.41 (developers to configure protocol graphs that support multiple heterogeneous network inter-) 117 278.67 P
-0.23 (faces. For example, a developer could create a unique flow of protocol processing by config-) 117 265.67 P
-0.2 (uring a protocol graph that merges an unreliable stack over FDDI with a reliable stack over a) 117 252.67 P
-0.28 (mesh) 117 239.67 P
1 F
-0.28 (.) 140.19 239.67 P
0 F
-0.28 (At the OSF RI, an x-kernel protocol graph has been used [TR93b] to provide in-kernel) 145.41 239.67 P
0.19 (network support on three different architectures: on a PC/AT, to communicate via Ethernet,) 117 226.67 P
-0.65 (and on Intel Hypercube and Intel Paragon, to communicate through the inter-nodes mesh. The) 117 213.67 P
-0.3 (amount of code reuse and the limited port effort have appeared as a major win, while moving) 117 200.67 P
(across these three different environments,) 117 187.67 T
(\245) 108 163.67 T
0.23 (The modularity inherent in the x-kernel allows to cleanly separate machine-dependent from) 117 163.67 P
0.55 (machine-independent code, much as it is done with the MACH kernel. This feature, which) 117 150.67 P
-0.55 (has had a profound impact on MACH\325s success to date, will have a similar effect on the forth-) 117 137.67 P
(coming network-related projects.) 117 124.67 T
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(16) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
-0.55 (The x-kernel is free of any encumbrances. Consequently, the x-kernel community is growing.) 117 712.67 P
-0.01 (As a member of this community, the OSF RI and its collaborators expect to have access to a) 117 699.67 P
(large number of protocols from both the research community and industry.) 117 686.67 T
(The evaluation of the x-kernel at the OSF RI has also pointed out) 108 662.67 T
(two major shortcomings:) 397.58 662.67 T
(\245) 108 643.67 T
0.19 (The current version of the x-kernel does not include any resource management mechanisms) 117 643.67 P
-0.11 (and policies. There are two types of resources future versions of the x-kernel must be able to) 117 630.67 P
-0.18 (manage: resources consumed by transient traffic \050messages\051, and resources consumed by the) 117 617.67 P
-0.35 (x-kernel system itself.The existing in-kernel version of the x-kernel assumes that memory al-) 117 604.67 P
-0.32 (location never fails and so makes no provision for memory shortages. Furthermore, when the) 117 591.67 P
0.06 (system overallocates memory from the fixed-size buffer pool at the bottom anchor protocol,) 117 578.67 P
0.29 (the x-kernel silently drops packets and does not attempt to garbage collect or look for more) 117 565.67 P
0.21 (buffers. X-kernel must provide mechanisms to reserve, allocate, garbage collect, prune, and) 117 552.67 P
(deallocate resources.) 117 539.67 T
(\245) 108 515.67 T
0.5 (To provide predictable services suitable for real-time use, the x-kernel will need to accom-) 117 515.67 P
0.62 (modate preemption and multiple scheduling policies. In addition, the real-time IPC project) 117 502.67 P
0.14 (must account for nodes of the computing domain that are UMA multiprocessors. Therefore,) 117 489.67 P
-0.48 (there is a requirement for a protocol framework and associated protocols that can run with the) 117 476.67 P
0.7 (highest level of concurrency supported by the underlying hardware. Today, the x-kernel is) 117 463.67 P
-0.61 (MP-safe in that operations are funneled via a monitor: only a single thread at a time is allowed) 117 450.67 P
(to shepherd a message through the protocol graph.) 117 437.67 T
-0.31 (The next chapters address) 108 413.67 P
-0.31 ( these shortcomings, in addition to all the tasks required to successful) 220.87 413.67 P
(integrate the x-kernel into the MACH kernel.) 90 400.67 T
1 14 Q
(3.2.2 Reengineer the x-kernel sour) 90 371.67 T
(ces) 294.16 371.67 T
0 11 Q
0.51 (A number of activities has to take place before the IPC project can add any value to the x-kernel) 90 352.67 P
(technology:) 90 339.67 T
(\245) 108 320.67 T
0.26 (Integrate the original x-kernel sources into a conventional build environment at OSF RI. At) 117 320.67 P
0.79 (the University of Arizona, developers use two separate archives for x-kernel itself and the) 117 307.67 P
0.25 (guest OS \050in most cases, the two archives do not share the same source management tools\051.) 117 294.67 P
-0.41 (This is clearly unacceptable with respect to the source control practices in use at OSF RI. The) 117 281.67 P
0.03 (x-kernel sources need to become part of the general OSF RI source tree. In particular, the x-) 117 268.67 P
(kernel sources will be logically split in three repositories:) 117 255.67 T
1.84 (\245 Domain independent repository. It contains about 80% of the entire x-kernel source) 126 231.67 P
(code.) 133.2 218.67 T
1.39 (\245 Kernel specific repository. This code, in addition to the domain independent code, is) 126 201.67 P
(used to generate x-kernel configurations which are meant to run in kernel space.) 133.2 188.67 T
0 (\245 User space specific repository. This code, in addition to the domain independent code, is) 126 171.67 P
(used to generate x-kernel configurations which are meant to run in user space.) 133.2 158.67 T
(\245) 108 143.67 T
0.03 (Remove from the x-kernel sources any attempt to preserve OS-independency. The goal is to) 117 143.67 P
(drop the OS-independency in favor of an optimized MACH based implementation.) 117 130.67 T
(\245) 108 106.67 T
-0.67 (Change the x-kernel sources to follow the OSF coding rules \050among others, ANSI C and func-) 117 106.67 P
(tion prototypes must be used\051.) 117 93.67 T
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(17) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
-0.1 (Pursue a seamless integration between x-kernel primitives and MACH primitives: the x-ker-) 117 712.67 P
0.64 (nel primitives will be mapped into the MACH primitives, wherever possible. Consider ex-) 117 699.67 P
(tending the MACH primitives to cover the x-kernel needs \050e.g., queuing utilities\051.) 117 686.67 T
(\245) 108 662.67 T
-0.39 (Honor the x-kernel semantics and internal interfaces, as documented by the University of Ar-) 117 662.67 P
0.62 (izona. Although some of the x-kernel activities will impose changes to the interfaces \050e.g.,) 117 649.67 P
0.52 (resource allocation, SMP\051, there is confidence that University of Arizona and OSF RI may) 117 636.67 P
(agree upon the interfaces \050even though the implementation may differ\051.) 117 623.67 T
-0.45 (The last point is particularly important for the future. In spite of the source reengineering effort,) 108 599.67 P
-0.43 (it will not be difficult to import new protocols from the x-kernel community and integrate them into) 90 586.67 P
0.55 (the OSF source base. The porting effort is deemed to require marginal changes only \050such as the) 90 573.67 P
(include list, function prototypes\051.) 90 560.67 T
1 14 Q
(3.2.3 Drivers, device dependencies) 90 531.67 T
0 11 Q
0.78 (This task applies to the x-kernel protocol graphs that run inside the kernel only \050in that user) 108 512.67 P
-0.29 (space protocol graphs interact with devices through the MACH IPC abstraction, or via explicit ker-) 90 499.67 P
(nel trap\051.) 90 486.67 T
-0.25 (In a x-kernel protocol graph, machine dependencies are limited to drivers, which are in fact the) 108 467.67 P
-0.21 (root of the protocol graph: in x-kernel terminology, a driver is called anchor protocol \050more specif-) 90 454.67 P
0.06 (ically, bottom anchor protocol, to distinguish it  from the top anchor protocol, which sits on top of) 90 441.67 P
0.02 (the protocol graph and interfaces with other subsystem\051. The driver selected for hosting a x-kernel) 90 428.67 P
0.21 (bottom anchor protocol is) 90 415.67 P
3 10 Q
0.46 (i386/AT386/if_ns8390.c.) 206.8 415.67 P
0 11 Q
0.21 (It is expected that other drivers will be) 351.18 415.67 P
(contributed, either through the real-time OSF RI collaborators or from the x-kernel community.) 90 402.67 T
0.59 (It has to be noted that OSF is endorsing a new standard proposed for network device drivers) 108 383.67 P
0.06 (\050CDLI: Common Data Link Interface [CD93]\051: in the CDLI model, the x-kernel adaptor would sit) 90 370.67 P
-0.21 (on top of the invariant portion of the driver \050together with a socket or STREAMS adaptor\051. Drivers) 90 357.67 P
(written accordingly to the CDLI model, however, will not be available in the short term.) 90 344.67 T
0.58 (Sometimes, the network controller introduces a device dependency within the x-kernel shep-) 108 325.67 P
0.12 (herd thread paradigm. There are in fact some devices that require the x-kernel shepherd threads to) 90 312.67 P
-0.21 (gather fragments of a packet, once an entire packet has been received and the x-kernel thread is be-) 90 299.67 P
-0.64 (ing started \050e.g., the Intel Paragon mesh driver has a very large PDU) 90 286.67 P
0 9 Q
-0.53 (2) 382.8 291.07 P
0 11 Q
-0.64 (, composed of 4096 bytes sized) 387.3 286.67 P
0.47 (fragments to be scattered/gathered\051. To support both conventional controllers \050e.g., Ethernet\051 and) 90 273.67 P
-0.29 (controllers with unusually large PDUs, we must evict from the x-kernel thread package any knowl-) 90 260.67 P
0.22 (edge of how the incoming PDU is structured; the scatter/gather operations, if any, must be part of) 90 247.67 P
(the bottom anchor protocol semantics.) 90 234.67 T
1 14 Q
(3.2.4 In-kernel x-kernel implementation r) 90 205.67 T
(evisited) 337.71 205.67 T
0 11 Q
-0.16 (The x-kernel work done at OSF RI has pointed out that the in-kernel use of x-kernel is still im-) 108 186.67 P
0.04 (mature and largely unoptimized. In some cases, the x-kernel code invokes operations that are very) 90 173.67 P
0.45 (expensive when executed within the kernel \050they are not as expensive in user space\051. Two exam-) 90 160.67 P
(ples:) 90 147.67 T
(1.) 108 128.67 T
(Any PDU that comes out of the bottom anchor protocol requires a context switch.) 126 128.67 T
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(2) 108 80.6 T
0 9 Q
(PDU: Protocol Data Unit.) 111.49 77 T
FMENDPAGE
%%EndPage: "17" 18
%%Page: "18" 18
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(18) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(2.) 108 712.67 T
0.82 (Any time an asynchronous x-kernel event is triggered \050e.g., an internal time-out\051, a new) 126 712.67 P
(thread is created from scratch.) 126 699.67 T
0.66 (The above behaviors are acceptable in user space \050cthreads\051; they are unacceptable in kernel) 108 675.67 P
0.45 (space. The first point becomes an issue when throughputs get closer to tens/hundreds of MB/sec:) 90 662.67 P
-0.09 (some processors exhibit a context switch time in the 50-150 usecs range, which makes it compara-) 90 649.67 P
-0.49 (ble to a round trip time. To limit the number of context switches, the following two strategies apply:) 90 636.67 P
(\245) 108 617.67 T
-0.3 (If a shepherd thread per physical processor is already running, queue the PDU: the first shep-) 117 617.67 P
0.54 (herd thread to become idle will grab it. Conversely, if one of the already running shepherd) 117 604.67 P
-0.28 (threads happens to block, poke a new shepherd thread from the shepherd thread pool. Empir-) 117 591.67 P
-0.19 (ical results have shown how this algorithm is efficient: in the most favorable case \050e.g., a un-) 117 578.67 P
-0.2 (iprocessor node of an Intel Paragon, receiving at 30 MB/sec rate, with heavy fragmentation\051,) 117 565.67 P
(the timings have been reduced of 25%.) 117 552.67 T
(\245) 108 528.67 T
0.58 (When a reply to a RPC is being received, there are two thread context switches to account) 117 528.67 P
0.04 (for: the first one is to enter into the protocol graph, the second one is to unblock the initiator) 117 515.67 P
0.35 (of the RPC. It is possible to eliminate the first context switch by charging the protocol pro-) 117 502.67 P
0.58 (cessing to the initiator of the RPC: in practice, the initiator of the RPC executes a) 117 489.67 P
2 F
0.58 (setjmp\050\051) 486 489.67 P
0 F
-0.36 (and blocks \050waiting for reply\051; upon receipt of the reply, the initiator is unblocked, it does the) 117 476.67 P
-0.39 (protocol processing and, rather than waking up the initiator thread, it just) 117 463.67 P
2 F
-0.39 (longjmp\050\051s) 435.82 463.67 P
0 F
-0.39 (. The ag-) 483.42 463.67 P
0.59 (gressive association between reply and initiator of the RPC is made possible by the packet) 117 450.67 P
(filter and by the new path object \050see next sections\051.) 117 437.67 T
-0.28 (The second point \050expensive thread creation\051 can be addressed with the combination of the fol-) 108 413.67 P
(lowing extensions:) 90 400.67 T
(\245) 108 381.67 T
-0.01 (Handle the x-kernel callout table with a fixed number of ancillary threads generated at boot-) 117 381.67 P
(time.) 117 368.67 T
(\245) 108 344.67 T
-0.16 (If the asynchronous action is known not to block \050the vast majority of cases\051, it is possible to) 117 344.67 P
0.15 (\322borrow\323 a thread context from an idle shepherd thread, and use it to perform the asynchro-) 117 331.67 P
(nous action \050the thread context would be returned to the pool upon termination\051.) 117 318.67 T
0.04 (In general, both the number of context switches and the costs of thread creation call for exten-) 108 294.67 P
-0.17 (sions to the traditional x-kernel model: \322one thread per message\323. A couple of alternatives have al-) 90 281.67 P
-0.59 (ready been explored, as presented above. A more radical solution would be to execute x-kernel code) 90 268.67 P
-0.01 (directly on interrupt stack: this programming model would be particularly useful any time the pro-) 90 255.67 P
-0.43 (tocol processing is very limited \050e.g., a fragment that lands into a reassembly queue\051. The drawback) 90 242.67 P
-0.27 (of this model, however, is pretty significant: most of the x-kernel framework code would require to) 90 229.67 P
-0.5 (raise a) 90 216.67 P
2 F
-0.5 (spl\050\051) 120.11 216.67 P
0 F
-0.5 ( protection from interrupts. Besides the latency of the ISRs, this model could be affected) 140.25 216.67 P
(by livelock syndromes too.) 90 203.67 T
1 14 Q
(3.2.5 Pr) 90 174.67 T
(otocol graphs acr) 135.99 174.67 T
(oss multiple domains) 239.12 174.67 T
0 11 Q
-0.03 (It must be possible to extend protocol graphs across the user-kernel boundary, transparently to) 108 155.67 P
0.18 (the protocols. The original x-kernel accomplishes this functionality by inserting at the bottom and) 90 142.67 P
-0.04 (at the top of each portion of the protocol graph a special protocol, called proxy: the proxy protocol) 90 129.67 P
-0.38 (has the responsibility for shuttling the x-kernel traffic through the boundary \050normally, MACH IPC) 90 116.67 P
-0.32 (and MIG are used. As a performance improvement, the former may be replaced by a trap\051. Observe) 90 103.67 P
0.67 (that the scenario becomes recursively defined: a portion of the protocol graph in user space uses) 90 90.67 P
-0.29 (MACH IPC to reach another portion of protocol graph which belongs to the microkernel; however,) 90 77.67 P
FMENDPAGE
%%EndPage: "18" 19
%%Page: "19" 19
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(19) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
1.01 (the two portions of the protocol graph may be on different physical nodes, and Distributed IPC) 90 712.67 P
(\050thus, an x-kernel graph\051 rather than MACH IPC is being used to shuttle the x-kernel traffic.) 90 699.67 T
-0.31 (There is a way to make cross-domain invocations more consistent with the MACH philosophy.) 108 680.67 P
0.28 (X-kernel objects \050sessions\051 would become MACH objects. As such, they may be bound to a port.) 90 667.67 P
-0.41 (The x-kernel framework manages the capabilities \050port names\051 corresponding to x-kernel objects at) 90 654.67 P
-0.18 (the boundary; in addition,) 90 641.67 P
-0.18 (the framework concepts a message and changes protection domain. This) 205.72 641.67 P
0.22 (solution would eliminate the need for a proxy protocol, which is an extra switch and it is likely to) 90 628.67 P
-0.62 (become an \322hot-spot\323. Furthermore, the proxy protocol represents an unwanted accumulation point,) 90 615.67 P
-0.09 (where all traffic gets funneled into \050in fact, there is a single port message queue for all traffic\051: this) 90 602.67 P
(accumulation point may produce races and alter the synchronization of open/close operations.) 90 589.67 T
0.4 (In the future, the MACH3 Kernel Interface should include an interface to the communication) 108 570.67 P
-0.02 (protocols, and to any other protocol graph that is configured in the microkernel. The new interface) 90 557.67 P
0.51 (could be a socket-like interface \050a well understood and commonly available interface\051. However,) 90 544.67 P
1.26 (the primary goal of the interface is to be completely independent from the underlying protocol) 90 531.67 P
0.36 (graph: in other words, a change to the protocol graph should not require a change to the interface) 90 518.67 P
-0.65 (library. The conclusion is that a socket-like interface would be inappropriate \050it is too closely related) 90 505.67 P
0.06 (to a TCP/UDP model\051. To achieve the goal, the most general interface to be exposed to the user is) 90 492.67 P
1.2 (the x-kernel interface itself \050) 90 479.67 P
2 F
1.2 (xOpen\050\051, xClose\050\051, xPush\050\051, xPop\050\051) 219.86 479.67 P
0 F
1.2 (\051: the proof of generality comes) 377.2 479.67 P
-0.51 (from the fact that this interface is being used as the internal methods to connect the x-kernel objects.) 90 466.67 P
0.67 (In case of upstream traffic, it is possible to have the x-kernel shepherd threads making an upcall) 90 453.67 P
-0.53 ([Bu94] to user space: this is an interesting alternative to the traditional) 90 440.67 P
2 F
-0.53 (poll\050\051/select\050\051) 395.54 440.67 P
0 F
-0.53 ( interfaces \050and) 455.33 440.67 P
-0.6 (it is in line with the Migrating Thread [Bu94] kind of paradigm\051. The new interface presented would) 90 427.67 P
0.51 (require a name service, to map protocol names \050numbers\051 to x-kernel object capabilities \050MACH) 90 414.67 P
(ports\051.) 90 401.67 T
-0.41 (University of Arizona has proposed an interesting technology, with respect to the cross-domain) 108 382.67 P
-0.03 (transfers: fbufs [Dr93b]. Fbufs allow to send data across different domains without having to copy) 90 369.67 P
-0.13 (it. This design does not account for the introduction of fbufs, which is deemed to be a performance) 90 356.67 P
0.52 (specific action item. However, if there is a clear indication that performances are a show-stopper) 90 343.67 P
0.22 (and jeopardize any of the goals, the introduction of fbufs must be anticipated.) 90 330.67 P
0.22 ( The introduction of) 433.15 330.67 P
-0.42 (fbufs does require extensions to the MACH IPC interface \050fbufs would become a new flavor of out-) 90 317.67 P
(of-line regions\051.) 90 304.67 T
1 14 Q
(3.2.6 Packet \336lter) 90 275.67 T
0 11 Q
(An x-kernel protocol graph may require one or more packet filters. Packet filtering is used to:) 108 256.67 T
(\245) 108 237.67 T
0.34 (Decompose a unique stream of traffic into multiple sub-streams. For instance, the in-kernel) 117 237.67 P
-0.65 (networking support must exclude all the traffic which is not related to Distributed IPC or clus-) 117 224.67 P
-0.18 (ter operations, and forward it to the network services \050thus, to a OS personality, or a network) 117 211.67 P
(server\051.) 117 198.67 T
(\245) 108 174.67 T
0.13 (Within the sub-streams that make their way through the x-kernel protocol graph, further de-) 117 174.67 P
-0.13 (multiplexing is required to identify channels \050or virtual circuits, or paths\051. An eager demulti-) 117 161.67 P
0.54 (plexing, exploited by a packet filter at the bottom of the x-kernel protocol graph, allows to) 117 148.67 P
0.01 (timely bill the right resources to the proper objects \050an x-kernel object being a memory allo-) 117 135.67 P
(cator, or a shepherd thread\051.) 117 122.67 T
-0.54 (A key requirement for a packet filter to be effective in a real-time environment is that the packet) 108 98.67 P
0.74 (filter latency has to be bound. The packet filter MPF [Yu94] is an improvement of the Berkeley) 90 85.67 P
FMENDPAGE
%%EndPage: "19" 20
%%Page: "20" 20
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(20) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.58 (packet filter \050BPF\051: unlike BPF, the new packet filter has a constant latency with respect to the num-) 90 712.67 P
(ber of virtual circuits.) 90 699.67 T
-0.42 (Another requirement is that the demultiplexing pattern used by the packet filter be an aggregate) 108 680.67 P
(of multiple inputs, which are \322pushed\323 in turn by different layers \050protocols\051.) 90 667.67 T
0.37 (The packet filter \050as specified above\051 can be degenerated to a VCI \050Virtual Circuit Identifier\051) 108 648.67 P
-0.05 (protocol, to be inserted in the protocol graph anytime two or more stream of traffic need to be sep-) 90 635.67 P
-0.31 (arated. A VCI protocol typically add an extra field \05032 bits\051 to the header. VCIs can be successfully) 90 622.67 P
-0.66 (used if the protocol graph is simple \050one demultiplexing point only\051, and if interoperability with oth-) 90 609.67 P
(er softwares is not a requirement.) 90 596.67 T
1 14 Q
(3.2.7 SMP) 90 567.67 T
(, pr) 149.73 567.67 T
(eemption) 170.47 567.67 T
0 11 Q
0.41 (Today\325s kernel supports both SMP and preemption based on fine-grain locks [Tr93c][Sw94].) 108 548.67 P
0.44 (Although SMP does not imply preemptibility, and vice versa, and although SMP and preemption) 90 535.67 P
0.42 (have contrasting goals \050low latency versus scalability\051, the synergism between them is very high:) 90 522.67 P
(the same set of locks are used to provide both SMP and preemption.) 90 509.67 T
-0.37 (The x-kernel code which runs in the kernel must conform to the locks and locking protocol dic-) 108 490.67 P
-0.18 (tated by SMP and preemption. As far as lock granularity is concerned, the design center is a UMA,) 90 477.67 P
(fully symmetric hardware that scales to 32 processors.) 90 464.67 T
-0.46 (There are two behaviors specific to the x-kernel that will make the locking protocol particularly) 108 445.67 P
(challenging:) 90 432.67 T
(\245) 108 413.67 T
-0.09 (A given message is shepherd through the protocol graph by a single thread. When the thread) 117 413.67 P
-0.48 (calls from one module \050call it Module A\051 down to another module \050call it Module B\051, and that) 117 400.67 P
-0.16 (call returns, the thread continues protocol processing in Module A under the assumption that) 117 387.67 P
(all actions defined in Module B and all modules below Module B, have been executed.) 117 374.67 T
(\245) 108 350.67 T
0.26 (Threads pursue complex paths through the protocol graph. Consider the situation where the) 117 350.67 P
-0.16 (completion of a message-receive operation requires the sending of an acknowledgment mes-) 117 337.67 P
0.68 (sage. This is a case where a send operation is nested within a receive operation. When the) 117 324.67 P
-0.12 (message is received, the x-kernel assigns the message a thread at the bottom anchor protocol) 117 311.67 P
-0.3 (and this thread shepherds the message up to the source of traffic via the intervening modules.) 117 298.67 P
-0.01 (Then, from the source of traffic, the thread carries out the acknowledgment operation by de-) 117 285.67 P
0.33 (scending through the modules back to the anchor protocol. From the bottom, the thread be-) 117 272.67 P
0.09 (gins to unwind its stack, going up the protocols first, and then back down them. By the time) 117 259.67 P
0.8 (the thread reaches the anchor protocol for the last time, it will have traversed the protocol) 117 246.67 P
(graph four times.) 117 233.67 T
0.8 (These two aspects of the x-kernel show that the design and implementation of SMP support) 108 209.67 P
1.01 (must be careful to avoid deadlocking and significant lock contention between protocol modules) 90 196.67 P
(while at the same time preserving the x-kernel\325s performance.) 90 183.67 T
(Three complementary approaches to the SMP problem:) 108 164.67 T
(\245) 108 145.67 T
(Concurrency without SMP by statically partitioning the protocol graph among processors.) 117 145.67 T
(\245) 108 121.67 T
(Implicit locking model.) 117 121.67 T
(\245) 108 97.67 T
(Explicit locking model.) 117 97.67 T
FMENDPAGE
%%EndPage: "20" 21
%%Page: "21" 21
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(21) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(The static partition model has been rejected for the following reasons:) 108 712.67 T
(\245) 108 693.67 T
0.77 (Forcing a given protocol module to execute on a specific processor means that the perfor-) 117 693.67 P
(mance of that module will be adversely affected when that processor is under heavy load.) 117 680.67 T
(\245) 108 656.67 T
-0.44 (Protocol graphs tend to funnel traffic coming from different sources to a single point \050the net-) 117 656.67 P
0.05 (work driver\051. The static partition model does not scale well with large fan in and large num-) 117 643.67 P
(bers of processors.) 117 630.67 T
(\245) 108 606.67 T
(Inter-processor interrupts can be expensive.) 117 606.67 T
-0.08 (Ideally, the locking protocol would provide both implicit) 108 582.67 P
2 F
-0.08 (and) 360.35 582.67 P
0 F
-0.08 ( explicit mechanisms so that pro-) 376.83 582.67 P
-0.45 (tocol developers could choose the mechanism that best suits their needs. Unfortunately, the implicit) 90 569.67 P
-0.15 (locking mechanism will not work well in the x-kernel. The x-kernel\325s flexibility allows developers) 90 556.67 P
-0.31 (to create many different paths through the protocol graph; in order to provide MP protection for the) 90 543.67 P
-0.03 (most general of protocols, the protocol-independent framework would have to take on the order of) 90 530.67 P
(twenty locks each time a shepherd thread invokes a new protocol object.) 90 517.67 T
0.04 (Consequently, the support of SMP and preemption can be based on the explicit locking model) 108 498.67 P
(only. The milestones are as follows:) 90 485.67 T
(\245) 108 466.67 T
-0.63 (Identify areas within the protocol-independent code and protocol modules code that need pro-) 117 466.67 P
0.36 (tection and specify a locking hierarchy with respect to these areas. The latter is particularly) 117 453.67 P
(important. A hierarchy can be derived from the following fundamental principles:) 117 440.67 T
2 F
0.92 (\245 The protocol-independent code never references locks from the protocol modules, and) 126 416.67 P
(vice versa.) 133.2 403.67 T
0.4 (\245 When protocol modules code is being executed, no locks from the protocol independent) 126 386.67 P
(code must be held.) 133.2 373.67 T
2.29 (\245 When a protocol module issues a call to another protocol module \050via xPush\050\051 or) 126 356.67 P
(xPop\050\051\051, no protocol locks must be held.) 133.2 343.67 T
0 F
-0.34 (Experimental work [Bj93] has been done with a hierarchy based upon these principles. Other) 117 328.67 P
(research activity is ongoing at UMass [Na94].) 117 315.67 T
(\245) 108 296.67 T
0.31 (The x-kernel locking protocol will be based upon non-blocking locks. Once entered into an) 117 296.67 P
-0.52 (x-kernel protocol graph, a thread cannot block while holding a lock. This implies that the pro-) 117 283.67 P
0.06 (tocol-independent part of the x-kernel must be carefully inspected, to detect execution paths) 117 270.67 P
(that would block \050e.g., a memory allocation which fails\051.) 117 257.67 T
(\245) 108 233.67 T
-0.12 (The microkernel is fully preemptible, with preemptibility based on locks [Sw94]. This effort) 117 233.67 P
-0.56 (has produced a new set of synchronization primitives. Among the non-blocking locks, we can) 117 220.67 P
0.2 (choose between locks that disable preemption \050) 117 207.67 P
3 10 Q
0.44 (spinlock_t) 326.3 207.67 P
0 11 Q
0.2 (\051 and don\325t \050) 386.27 207.67 P
3 10 Q
0.44 (mutex_t) 441.49 207.67 P
0 11 Q
0.2 (\051. The x-) 483.46 207.67 P
1.16 (kernel framework and protocols will be made MP-safe and preemptible using) 117 194.67 P
3 10 Q
2.53 (mutex_t) 473 194.67 P
0 11 Q
1.16 (s.) 514.98 194.67 P
-0.24 (Only a fraction of the x-kernel framework requires the use of) 117 181.67 P
3 10 Q
-0.53 (spinlock_t) 385.56 181.67 P
0 11 Q
-0.24 (s \050to handle time-) 445.52 181.67 P
(outs and asynchronous internal events in general\051.) 117 168.67 T
(\245) 108 144.67 T
0.11 (There are portions of protocol processing that need to be atomic; thus, they are protected by) 117 144.67 P
-0.21 (a single) 117 131.67 P
3 10 Q
-0.45 (mutex_t) 153.2 131.67 P
0 11 Q
-0.21 (. In few cases, however, a single atomic portion belongs to two different x-) 195.18 131.67 P
-0.11 (kernel protocols: as an example, a bytestream type of service requires that a single) 117 118.67 P
3 10 Q
-0.25 (mutex_t) 480.02 118.67 P
0 11 Q
0.02 (is held across part of TCP and part of the socket layer. This needs contrasts with the locking) 117 105.67 P
-0.43 (protocol introduced above \050rule 3\051. To solve the problem, we must relax rule 3: either we pre-) 117 92.67 P
0.17 (serve the same) 117 79.67 P
3 10 Q
0.38 (mutex_t) 184.94 79.67 P
0 11 Q
0.17 ( across protocol boundaries, or we establish a new synchronization) 226.92 79.67 P
FMENDPAGE
%%EndPage: "21" 22
%%Page: "22" 22
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(22) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.56 (primitive, which allows to release a first) 117 712.67 P
3 10 Q
-1.23 (mutex_t) 292.46 712.67 P
0 11 Q
-0.56 ( and acquire a second) 334.44 712.67 P
3 10 Q
-1.23 (mutex_t) 428.93 712.67 P
0 11 Q
-0.56 ( in an atom-) 470.91 712.67 P
(ic way.) 117 699.67 T
(\245) 108 675.67 T
0.41 (Document rules for protocol developers. In the course of establishing locks for the existing) 117 675.67 P
(protocols, a complete locking schema for x-kernel protocols will be documented.) 117 662.67 T
0.65 (The explicit locking model is deemed to deliver lock granularity and lock contention figures) 108 638.67 P
-0.06 (that fit well with most of the commercial UMA architectures. However, we must consider the case) 90 625.67 P
-0.15 (of an architecture where the lock granularity proves to be excessive: the cost of a single synchroni-) 90 612.67 P
-0.62 (zation primitive \050a test-and-set, or a LL/SC loop\051 may be high, if compared to the maximum number) 90 599.67 P
-0.17 (of cycles that the processing of a PDU can take. For instance, most of the modern RISC processors) 90 586.67 P
-0.49 (use a weakly ordered storage access protocol, with the consequence that any LL/SC implies a mem-) 90 573.67 P
0.51 (ory barrier as well \050to flush the pending writes to memory\051. The cycles spent in memory barriers) 90 560.67 P
0.74 (could become noticeable, while processing PDUs coming in at MB/sec or GB/sec rates. To deal) 90 547.67 P
0.24 (with these cases, an alternative form of locking will be explored: the lock granularity can become) 90 534.67 P
0.46 (coarse to the extreme that an entire path through the protocol graph is protected by a single lock.) 90 521.67 P
0.05 (This approach is being tested by independent research \050processor-per-connection model in [Bj93],) 90 508.67 P
-0.22 ([Na93]\051. The coarse lock granularity model fits nicely with the new \322path\323 framework, designed to) 90 495.67 P
(support resource reservations \050see 3.2.9\051.) 90 482.67 T
-0.1 (As a consequence of x-kernel being fully preemptible, x-kernel shepherd threads may preempt) 108 463.67 P
-0.33 (other shepherd threads. The usual priority inheritance methods will be used to address collisions on) 90 450.67 P
0.63 (the same lock; in cases of coarse locking, a roll-back approach may be interesting \050if the current) 90 437.67 P
0.29 (activity may be safely aborted - i.e., idempotent PDU - just drop the PDU received - it will be re-) 90 424.67 P
-0.53 (transmitted\051. It will be responsibility of the real-time user to set scheduling attributes of the x-kernel) 90 411.67 P
0.51 (shepherd threads. Observe that the user can use preemption to have access to a sort of privileged) 90 398.67 P
(traffic \050expedited packets\051.) 90 385.67 T
1 14 Q
(3.2.8 Resour) 90 356.67 T
(ce contr) 163.98 356.67 T
(ol) 211.51 356.67 T
0 11 Q
0.5 (The x-kernel framework must be enhanced with a sophisticated resource control mechanism:) 108 337.67 P
-0.53 (in fact, fundamental system services \050such as paging\051 will flow from Distributed IPC to the x-kernel) 90 324.67 P
(based communication services. This consideration leads to two distinct requirements:) 90 311.67 T
(\245) 108 292.67 T
0.26 (The x-kernel framework must have resource control mechanisms, so that protocols can rely) 117 292.67 P
0.39 (upon memory being) 117 279.67 P
1 F
0.39 (guaranteed) 209.41 279.67 P
0 F
0.39 (. Alternately, other protocols may need to be supported by) 262.5 279.67 P
1.81 (the framework with) 117 266.67 P
1 F
1.81 (overbooking) 211.82 266.67 P
0 F
1.81 ( policies \050protocols are asynchronously notified by the) 270.42 266.67 P
0.09 (framework once a high water mark is hit\051. In both cases, the x-kernel framework is required) 117 253.67 P
(to provide powerful semantics to the protocol designer.) 117 240.67 T
(\245) 108 216.67 T
0.48 (The x-kernel semantics must be extended, to propagate the congestion control mechanisms) 117 216.67 P
-0.42 (which come from layers above x-kernel \050e.g., Distributed IPC\051, through the x-kernel protocol) 117 203.67 P
(graph.) 117 190.67 T
-0.41 (The rest of the chapter addresses the first requirement. The latter is the subject of the next chap-) 108 166.67 P
(ter \050Paths\051.) 90 153.67 T
1.45 (An x-kernel protocol graph consumes memory for a variety of reasons \050messages, objects,) 108 134.67 P
-0.58 (shepherd threads, driver queues\051; messages and shepherd threads represent transient traffic and they) 90 121.67 P
(introduce dependencies on the protocol graph\325s congestion control facilities.) 90 108.67 T
-0.68 (Researchers at the University of Arizona have come up with a multi-level resource control mod-) 108 89.67 P
-0.59 (el [Pe94]. In principle, protocol modules allocate memory via) 90 76.67 P
2 F
-0.59 (allocators) 358.35 76.67 P
0 F
-0.59 (that are used to fetch mem-) 405.07 76.67 P
FMENDPAGE
%%EndPage: "22" 23
%%Page: "23" 23
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(23) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.17 (ory from) 90 712.67 P
2 F
-0.17 (pools) 131.16 712.67 P
0 9 Q
-0.14 (3) 154.96 717.07 P
0 11 Q
-0.17 (. There are a small number of independent pools \050e.g., wired pool, pageable pool, a) 159.46 712.67 P
-0.08 (pool dedicated to paging traffic\051, and a large number of allocators, one per protocol object and one) 90 699.67 P
1.14 (per session object. Each allocator allocates its memory from a single, assigned pool. Typically,) 90 686.67 P
0.95 (memory is credited and debited from allocator to allocator as a given message is demultiplexed) 90 673.67 P
(while travelling through a protocol graph.) 90 660.67 T
(Allocators may be used in two ways:) 108 641.67 T
(1.) 108 622.67 T
0.2 (Protocols reserve memory by configuring their allocators to provide a minimal amount of) 126 622.67 P
0.84 (bytes in a reliable manner. The congestion control facilities within the protocol can rely) 126 609.67 P
(upon this guarantee. This is referred to as the synchronous, or protocol-centric approach.) 126 596.67 T
(2.) 108 572.67 T
0.19 (Protocols allocate memory as though there is an unlimited supply. When a given pool be-) 126 572.67 P
-0.04 (gins to reach a point where it cannot satisfy its allocators, the system calls back to the pro-) 126 559.67 P
0.25 (tocols to reclaim resources. When a protocol receives such a notification asynchronously,) 126 546.67 P
1.13 (it performs the appropriate operations to release unneeded memory \050garbage collection,) 126 533.67 P
0.23 (connection pruning, congestion control tuning, and so on\051. This is referred to as the asyn-) 126 520.67 P
(chronous, or system-centric approach.) 126 507.67 T
0.28 (It is up to the protocol designer to decide which way fits better with the logic and complexity) 108 483.67 P
(of the protocol. We can also imagine protocols that use both policies at the same time.) 90 470.67 T
0.19 (Shepherd threads need to be considered among resources used for incoming traffic: they need) 108 451.67 P
0.24 (a preallocated kernel stack. X-kernel uses a model whereby a message is associated to a shepherd) 90 438.67 P
0.34 (thread at the bottom anchor protocol level. In case shepherd threads are all busy, incoming PDUs) 90 425.67 P
-0.09 (are queued. Eventually, PDUs are dropped \050after the queue maximum limit has been reached\051: this) 90 412.67 P
0.56 (is legitimate, since we are assuming to work in environments where communication reliability is) 90 399.67 P
0.66 (ensured with software. Although legitimate, protocol-wise, PDUs dropping may have some rele-) 90 386.67 P
1.29 (vant side effect: a deadlock condition may arise from the fact that all the shepherd threads are) 90 373.67 P
0.15 (blocked within the protocol graph, and incoming PDUs get rejected \050whereas they might unlock a) 90 360.67 P
-0.27 (blocked shepherd thread\051. To solve this deadlock case, the protocol designer needs to be given new) 90 347.67 P
-0.31 (rules: shepherd threads can not block waiting on events that depends on other PDUs being received) 90 334.67 P
-0.35 (\050e.g., acknowledgments\051; they may block on events internal to the framework \050e.g., an allocator ex-) 90 321.67 P
(hausted, or a race between two opens being propagated upstream\051.) 90 308.67 T
-0.46 (In addition, the protocol designer may take advantage of new semantics, which allow to reserve) 108 289.67 P
-0.23 (memory and threads for special traffic, which has to be immune from resource crisis \050e.g., a simple) 90 276.67 P
0.49 (handshaking between sender and receiver to relieve receiver from pressure\051. These semantics are) 90 263.67 P
(provided through the new notion of \322path\323.) 90 250.67 T
1 14 Q
(3.2.9 Paths) 90 221.67 T
0 11 Q
0.06 (Consider the following example. A subsystem is layered on top of an x-kernel protocol graph.) 108 202.67 P
-0.29 (The subsystem manages a number of connections \050virtual circuits\051. It sees the entire protocol graph) 90 189.67 P
1.06 (as a collection of opaque connections: it has no knowledge of the inner details of the protocols) 90 176.67 P
-0.55 (which compose the graph below. The subsystem has also a congestion control mechanism: the chal-) 90 163.67 P
0.24 (lenge is to reserve resources \050namely memory and threads\051 for the incoming traffic, on a per-con-) 90 150.67 P
(nection basis.) 90 137.67 T
90 116 522 127.98 C
90 120.49 270 120.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
0.28 (3) 108 113.6 P
0 9 Q
0.36 (To be more specific, the model in [Pe94] is based upon a three level architecture: allocators, accounts and pools.) 111.49 110 P
-0.12 (Accounts store the Min, Current and Max type of information. Allocators are the front-end to accounts. A single account) 90 99 P
-0.29 (may manage different kind of memory \050i.e., wired or pageable\051: in that case, there would be at least one allocator per type) 90 88 P
(of memory.) 90 77 T
FMENDPAGE
%%EndPage: "23" 24
%%Page: "24" 24
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(24) 486 46.67 T
90 50 522 698 R
7 X
V
0 X
0.23 (To address this case, the OSF RI has designed a new x-kernel object, the path object [Tr93d],) 108 690.67 P
-0.31 (which is meant to complement the other first-class x-kernel objects, such as protocols and sessions.) 90 677.67 P
-0.04 (The path object is the abstraction that represents a virtual circuit to the external layers; through the) 90 664.67 P
0.25 (path object, a subsystem layered on top of an x-kernel protocol graph can identify resources to be) 90 651.67 P
(used in processing a single virtual circuit.) 90 638.67 T
(More specifically, with the path object:) 108 619.67 T
(1.) 108 600.67 T
0.49 (We group together all session objects that must be invoked to pass a message from a top) 126 600.67 P
(anchor session to the bottom anchor protocol.) 126 587.67 T
(2.) 108 563.67 T
0.21 (We collect and centralize into the path object attributes that have hitherto been associated) 126 563.67 P
-0.52 (with the individual actors \050the messages, the shepherd thread, and the x-kernel objects\051. For) 126 550.67 P
0.06 (instance, an allocator \050as defined in the previous chapter\051 would be bound to the path, and) 126 537.67 P
(it would play the role of initial allocator at the bottom anchor protocol level.) 126 524.67 T
(3.) 108 500.67 T
0.34 (The x-kernel user can specify when it opens a path, the associated attributes, and level of) 126 500.67 P
0.16 (associativity of the sessions that make up this path \050by level of associativity, we mean the) 126 487.67 P
(extent to which the path\325s sessions may merge or fork with one another\051.) 126 474.67 T
0.3 (In practice, the developer will call the xOpen routine \050xOpenEnable\051 with an additional argu-) 108 450.67 P
-0.38 (ment which points to a path structure whose attributes have been initialized with the class of servic-) 90 437.67 P
0.02 (es required \050alternately, a built-in default path may be used\051. Among attributes, the developer may) 90 424.67 P
(specify whether an \322absolute\323 or a \322relative\322 notion of path is required.) 90 411.67 T
-0.34 (The absolute path implies no associativity among sessions: the xOpen call is propagated down-) 108 392.67 P
0.08 (stream and new session objects are always created; they cannot be merged or forked. \050The session) 90 379.67 P
0.14 (objects are logically distinct, but the implementation will allow them to share some data.\051 When a) 90 366.67 P
-0.05 (message destined for the path\325s endpoint is received, it is routed to the absolute path at the level of) 90 353.67 P
-0.44 (the bottom anchor protocol. The resources that will be required by the message are debited from the) 90 340.67 P
(allocator defined by the path before any protocol processing begins.) 90 327.67 T
-0.61 (The relative path allows sessions to merge; every relative path is associated with a priority num-) 108 308.67 P
0.46 (ber. When two sessions merge, the resulting session acquires its attributes from the path with the) 90 295.67 P
-0.12 (higher priority. Whenever an allocator is changed as a result of a merge/fork operation, the flow of) 90 282.67 P
-0.44 (messages through the sessions requires that memory be debited/credited from allocator to allocator.) 90 269.67 P
FMENDPAGE
%%EndPage: "24" 25
%%Page: "25" 25
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(25) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(The actual list of attributes that are associated with the path abstraction is as follows:) 108 404 T
(1.) 108 385 T
(The type \050Absolute or Relative\051 and priority \050Relative only\051.) 126 385 T
(2.) 108 361 T
-0.26 (A filter command list specific to the path. This list will instruct the packet filter on how the) 126 361 P
(incoming traffic has to be dispatched among paths.) 126 348 T
(3.) 108 324 T
0.06 (A pointer to a structure which defines the entire class of service; its fields are read/written) 126 324 P
0.01 (by the application and by the underlying protocols. RFC 1363 is an example of how a ser-) 126 311 P
(vice may be specified.) 126 298 T
(4.) 108 274 T
(The definition of memory resources \050allocator\051) 126 274 T
(5.) 108 250 T
(A linked list of XObjs \050the session objects that are part of the path\051.) 126 250 T
(6.) 108 226 T
(The definition of a garbage collection policy \050optional\051.) 126 226 T
(7.) 108 202 T
(A set of shepherd threads \050optional\051.) 126 202 T
(8.) 108 178 T
(A queue for incoming traffic \050optional\051.) 126 178 T
(9.) 108 154 T
(Scheduling attributes \050optional\051.) 126 154 T
(10.) 108 130 T
(A lock \050optional\051.) 126 130 T
(11.) 108 106 T
(Binding data \050optional\051.) 126 106 T
90 72 522 720 C
135.23 424.33 476.77 709 C
180.9 551 369.9 659 18 RR
6 X
0 K
V
0.5 H
2 Z
0 X
N
223.08 434.88 403.08 461.88 R
7 X
V
0 11 Q
0 X
(Figure 2.) 232.08 444.88 T
243.9 478.33 387.9 514.33 R
261.9 478.33 369.9 505.33 R
0 Z
N
(Driver) 305.22 488.84 T
(Packet filter) 288.9 514.33 T
261.9 505.33 369.9 532.33 13.5 RR
N
432.45 650.91 441.88 658.34 437.82 647.04 435.14 648.98 4 Y
V
351.9 532.33 435.15 648.98 2 L
1 H
2 Z
N
279.9 532.33 261.9 568.33 2 L
4 H
N
261.9 568.33 279.9 595.33 2 L
3 H
N
261.9 568.33 243.9 595.33 2 L
N
279.9 595.33 297.9 631.33 2 L
1 H
N
279.9 595.33 279.9 631.33 2 L
N
279.9 595.33 261.9 631.33 2 L
N
243.9 595.33 252.9 631.33 2 L
N
243.9 595.33 225.9 631.33 2 L
N
225.9 631.33 198.9 676.33 2 L
0.5 H
N
252.9 631.33 270.9 676.33 2 L
N
261.9 631.33 225.9 676.33 2 L
N
261.9 631.33 252.9 676.33 2 L
N
279.9 631.33 261.9 676.33 2 L
N
297.9 631.33 297.9 676.33 2 L
N
297.9 631.33 288.9 676.33 2 L
N
297.9 631.33 279.9 676.33 2 L
N
279.9 631.33 270.9 676.33 2 L
N
225.9 631.33 243.9 676.33 2 L
N
225.9 631.33 216.9 676.33 2 L
N
(Virtual Circuit Abstraction) 216.9 687.33 T
(x-kernel) 189.9 577.33 T
(protocol) 189.9 568.33 T
(graph) 189.9 559.33 T
(Network) 432.9 622.33 T
(User Traffic) 414.9 613.33 T
(\050to OS servers,) 405.9 604.33 T
(network servers\051) 396.9 595.33 T
2 K
(Absolute) 336.9 577.33 T
(Path) 336.9 568.33 T
0 K
(Relative) 144.9 667.33 T
(Paths) 144.9 658.33 T
2 K
(s) 354.9 568.33 T
217.08 621.48 225.89 613.34 214.1 615.58 215.59 618.53 4 Y
0 K
V
153.9 649.33 215.6 618.53 2 L
N
(X-kernel paths and packet filter) 279.9 442.33 T
261.33 568.33 321.33 596.33 2 L
3 H
N
310.67 631.67 322.67 597 2 L
1 H
N
340 631.67 323.33 596.33 2 L
N
308 675.67 311.33 633 2 L
0.5 H
N
325.33 676.33 311.33 632.33 2 L
N
332.67 675.67 340 632.33 2 L
N
358.67 676.33 340 633 2 L
N
235.33 676.33 253.33 633.67 2 L
N
252.67 557.67 284.67 575.67 9 RR
N
321.33 624.67 353.33 642.67 9 RR
N
263.33 587.33 295.33 605.33 9 RR
N
225.33 587.33 257.33 605.33 9 RR
N
207.33 625.33 239.33 643.33 9 RR
N
240 626 272 644 9 RR
N
271.33 626 288.67 644 8.67 RR
N
289.33 625.33 321.33 643.33 9 RR
N
304 587.33 336 605.33 9 RR
N
208 676.33 290.67 531.67 2 L
1 H
8 X
2 K
N
316.67 675.67 310.67 531 2 L
N
276 675.67 302.67 531 2 L
N
365.33 676.33 322 531 2 L
N
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "25" 26
%%Page: "26" 26
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(26) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
0.5 (We have added the lock and binding information attributes to take advantage of features that) 108 712.67 P
0.13 (may be available in the future with respect to SMP. Whereas paths have been initially designed to) 90 699.67 P
(reserve memory and threads, we can extend them to reserve processor cycles as well:) 90 686.67 T
(\245) 108 667.67 T
-0.25 (The path lock may be used to implement a locking model that is not fine grain \050coarse to me-) 117 667.67 P
(dium grain locking\051.) 117 654.67 T
(\245) 108 630.67 T
-0.32 (The path lock may be used to exploit a convey effect to minimize lock contention \050paths may) 117 630.67 P
(be \322released\323 in some order\051.) 117 617.67 T
0.46 (The binding data may be used to bind the shepherd thread to processors \050or processor sets, if) 108 593.67 P
0 (they are available\051, creating dynamic partitions of the protocol graph, with the granularity of paths) 90 580.67 P
(\050this type of partitioning is much more efficient than static protocol-based partitioning\051.) 90 567.67 T
0.35 (In summary, paths have been introduced as the enabling technology for doing resource reser-) 108 548.67 P
-0.35 (vation \050whereby resource means memory, threads and processor cycles\051. They will be used in com-) 90 535.67 P
-0.15 (bination with the Distributed IPC congestion control, to realize a receiver-pull model \050whereby the) 90 522.67 P
0.61 (receiver has responsibility for starting/stopping the data exchange\051: in this way, the receiver gets) 90 509.67 P
-0.36 (relieved, and back-pressure can be applied to the sender\050s\051. In the future, the notion of resource res-) 90 496.67 P
-0.66 (ervation will be propagated all the way up to the user, in the context of the service guaranteed frame-) 90 483.67 P
(work: real-time programming will get a great benefit from it.) 90 470.67 T
1 14 Q
(3.2.10 Scalability) 90 441.67 T
0 11 Q
-0.65 (The size of the x-kernel objects is not minimal. The fundamental data type,) 108 422.67 P
2 F
-0.65 (XOBJ) 432.42 422.67 P
0 F
-0.65 (, which is used) 458.65 422.67 P
-0.36 (for both protocols and sessions, requires 152 bytes on a 32 bit architecture. On a 64 bit architecture,) 90 409.67 P
-0.24 (the size almost doubles \050most of the fields are pointers\051. To reduce the size of a) 90 396.67 P
2 F
-0.24 (XOBJ) 437.35 396.67 P
0 F
-0.24 (, the methods) 463.58 396.67 P
0.36 (\050the pointers to disciplines\051 need to be evicted from each) 90 383.67 P
2 F
0.36 (XOBJ) 345.63 383.67 P
0 F
0.36 (, and centralized into one or more) 371.86 383.67 P
(tables \050e.g., like) 90 370.67 T
2 F
(vnodes) 162.62 370.67 T
0 F
( do with the file system dependent methods, defined in) 193.13 370.67 T
2 F
(vnodeops) 436.33 370.67 T
0 F
( table\050s\051\051.) 477.83 370.67 T
-0.29 (For every x-kernel object that is allocated at run-time, and whose allocation may fail, it is man-) 108 351.67 P
0.51 (datory to define the failure semantics. The objective is that the creation of a new connection will) 90 338.67 P
-0.25 (fail in a graceful way \050e.g., similarly to the way traditional in-kernel networking is used to deny the) 90 325.67 P
0.74 (creation of new sockets\051. Obviously, the concept of failure semantics is far more ambitious than) 90 312.67 P
(cobbling a set of compile-time constants that are supposed to reflect typical traffic.) 90 299.67 T
1 14 Q
(3.2.1) 90 270.67 T
(1 Miscellaneous) 117.21 270.67 T
0 11 Q
-0.44 (The layout of the x-kernel protocol graph is specified at compile time, through a meta-language) 108 251.67 P
-0.68 (file \050) 90 238.67 P
3 10 Q
-1.48 (graph.comp) 110.37 238.67 P
0 11 Q
-0.68 (\051. As part of the meta-language, the name of the interface to be used by the bottom) 170.34 238.67 P
(anchor protocol must be specified \050e.g.,) 90 225.67 T
3 10 Q
(wd0) 266.66 225.67 T
0 11 Q
(\051.) 284.65 225.67 T
0.04 (The name of the interface should come instead from a configuration command \050in principle, it) 108 206.67 P
-0.2 (is comparable to a ifconfig command, see 3.5\051. A privileged user \050the configuration server\051 sends a) 90 193.67 P
0.99 (message to the kernel, which carries along the name of the interface, together with the order of) 90 180.67 P
-0.65 (building and activating the x-kernel protocol graph \050specified in) 90 167.67 P
3 10 Q
-1.42 (graph.comp) 368.23 167.67 P
0 11 Q
-0.65 (, as before\051. The user-) 428.2 167.67 P
0.34 (to-kernel interface has to be specified as part of the new set of invocations that extend a single x-) 90 154.67 P
(kernel protocol graph across multiple virtual domains \050see 3.2.5\051.) 90 141.67 T
-0.41 (As a deferred goal, we entertain the idea of a x-kernel protocol graph that can be defined at run-) 108 122.67 P
(time.) 90 109.67 T
-0.33 (It must be possible to build x-kernel protocol graphs that live in user space and that do not have) 108 90.67 P
(any dependency on UNIX services. All symbols must be resolved within) 90 77.67 T
3 10 Q
(libmach_sa) 412.83 77.67 T
0 11 Q
(.) 472.8 77.67 T
FMENDPAGE
%%EndPage: "26" 27
%%Page: "27" 27
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(27) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(3.3 Distributed IPC) 90 710.67 T
0 11 Q
0.14 (The design and implementation of Distributed IPC [La94][Se94] has been done in the context) 108 691.67 P
-0.03 (of the OSF RI multicomputer program. As a consequence, the first versions of Distributed IPC are) 90 678.67 P
0.54 (expected to be tailored to the multicomputer reference platform, the Intel Paragon. This platform) 90 665.67 P
0.4 (takes advantage of a reliable mesh capable of a 200 MB/sec throughput. Distributed IPC must be) 90 652.67 P
(MP-efficient, and it must scale up to several thousands of nodes.) 90 639.67 T
(It is up to the real-time IPC project to:) 108 620.67 T
(\245) 108 601.67 T
0.53 (Equip Distributed IPC with communication protocols, which run effectively over Ethernet.) 117 601.67 P
(Communication protocols are implemented using the x-kernel framework.) 117 588.67 T
(\245) 108 564.67 T
0.03 (If necessary, modify Distributed IPC\325s inner mechanisms \050e.g. congestion control\051, to be ef-) 117 564.67 P
(fective over Ethernet.) 117 551.67 T
(\245) 108 527.67 T
(Make paths through Distributed IPC predictable. Verify preemptibility.) 117 527.67 T
0.02 (These activities are described in the remaining part of this section. Section 4 introduces an ad-) 108 503.67 P
(ditional, major task:) 90 490.67 T
(\245) 108 471.67 T
(Adapt the Distributed IPC abstractions and protocols to support multiple failure domains.) 117 471.67 T
(The order of the following paragraphs mimics the organization of the [La94] document.) 90 447.67 T
1 14 Q
(3.3.1 Data type de\336nition) 90 418.67 T
0 11 Q
0.51 (The) 108 399.67 P
3 10 Q
1.1 (node_name) 128.34 399.67 P
0 11 Q
0.51 (type is a 32-bit quantity. Communication protocols are responsible for con-) 185.86 399.67 P
-0.32 (verting a node_name to a NAP \050Network Access Point\051. Thus, there is no need for a) 90 386.67 P
3 10 Q
-0.71 (node_name) 457.06 386.67 P
0 11 Q
-0.32 ( to) 511.03 386.67 P
0.38 (be, for instance, an IP number: this characteristic will be useful to cope with more complex com-) 90 373.67 P
0 (puting domains \050e.g., clusters of multicomputers, whose nodes are completely inter-connected\051. In) 90 360.67 P
0.42 (case multiple communication interfaces are provided, the relation between) 90 347.67 P
3 10 Q
0.91 (node_name) 423.87 347.67 P
0 11 Q
0.42 ( and NAP) 477.84 347.67 P
(becomes a one-to-many relation.) 90 334.67 T
-0.19 (The) 108 315.67 P
3 10 Q
-0.42 (handle_t) 127.64 315.67 P
0 11 Q
-0.19 ( type is a 32-bit quantity, and it represents the SAP \050Service Access Point\051. The) 175.61 315.67 P
-0.45 (communication protocol will return a) 90 302.67 P
3 10 Q
-0.98 (handle_t) 254.66 302.67 P
0 11 Q
-0.45 ( upon establishment of a connection. A) 302.64 302.67 P
3 10 Q
-0.98 (handle_t) 474.03 302.67 P
0 11 Q
0.45 (will correspond to an x-kernel session and some more data that describes the status of the handle) 90 289.67 P
-0.09 (\050in practice, an handle_t will be the pointer to a XK-KKT control block, XK-KKT being the top x-) 90 276.67 P
(kernel protocol, mapping the KKT interface [Se94] to x-kernel calls\051.) 90 263.67 T
1 14 Q
(3.3.2 Message delivery and congestion contr) 90 234.67 T
(ol) 351.31 234.67 T
0 11 Q
0.3 (Distributed IPC addresses the congestion control issues with a receiver-pull model. The basic) 108 215.67 P
-0.35 (idea is that the receiver notifies the sender node\050s\051 whether resources are available for the transmis-) 90 202.67 P
0.65 (sion to complete. In case of resource shortages, the sender node\050s\051 hold the transmission \050sender) 90 189.67 P
(back-pressure\051; the receiver node unlocks the sender node\050s\051 once the resources are available.) 90 176.67 T
0.87 (The receiver-pull model is particularly effective on a reliable medium, because it makes the) 108 157.67 P
-0.31 (combination of software and hardware reliable, without extra costs due to retransmissions \050e.g., the) 90 144.67 P
(software never drops a packet\051. The advantages are the following:) 90 131.67 T
(\245) 108 112.67 T
(Sender node\050s\051 do not need time-outs.) 117 112.67 T
(\245) 108 88.67 T
0.42 (Sender node\050s\051 can dispose of bits right after transmission \050when bits are still \322warm\323: less) 117 88.67 P
(cache misses, less TLB misses\051.) 117 75.67 T
FMENDPAGE
%%EndPage: "27" 28
%%Page: "28" 28
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(28) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
-0.14 (Simple handshaking between sender and receiver nodes are known to be cheap and bound in) 117 712.67 P
(time.) 117 699.67 T
(\245) 108 675.67 T
1.07 (With receiver-pull, the load pressure flows naturally from the receiver node to the sender) 117 675.67 P
0.15 (node\050s\051. In case of a many to one relation between sender nodes and receiver nodes \050typical) 117 662.67 P
(on a MACH IPC scenario\051, the load appears to spread well among nodes.) 117 649.67 T
(The use of an unreliable medium like Ethernet introduces a completely different scenario:) 108 625.67 T
(\245) 108 606.67 T
-0.37 (Retransmissions may occur, because frames are corrupted \050dropped\051 by the hardware. At this) 117 606.67 P
0.17 (point, the presence of a complex software which never drops a frame is less worthy. Sender) 117 593.67 P
(nodes do need time-outs, and they can dispose of data only when it is acknowledged.) 117 580.67 T
(\245) 108 556.67 T
(Simple handshaking and RPCs in general are expensive \050up to several milliseconds\051.) 117 556.67 T
(\245) 108 532.67 T
-0.48 (Sender and receiver nodes are not synchronized at the link layer \050the synchronization is a typ-) 117 532.67 P
(ical characteristic of a mesh, which makes resource reservation easier\051.) 117 519.67 T
0.44 (For a medium like Ethernet, a sender-push model seems more appropriate. However, there is) 108 495.67 P
-0.05 (still some advantage in taking some principles from the receiver-pull model, namely the capability) 90 482.67 P
-0.53 (to apply back-pressure to the sender node\050s\051. The resulting model appears as a combination of send-) 90 469.67 P
(er-push and receiver-pull:) 90 456.67 T
(\245) 108 437.67 T
-0.07 (The sender node folds as many bytes as possible into a) 117 437.67 P
3 10 Q
-0.15 (KKT_SEND_CONNECT) 359.44 437.67 P
0 11 Q
-0.07 ( call \050the maxi-) 455.39 437.67 P
0.52 (mum size being dictated by the fragmentation protocol: typically, a handful of VM pages\051.) 117 424.67 P
3 10 Q
(KKT_SEND_CONNECT) 117 411.67 T
0 11 Q
( is implemented as an at-most-once RPC.) 212.95 411.67 T
(\245) 108 387.67 T
0.31 (Communication protocols own memory. Additional memory flows from Distributed IPC to) 117 387.67 P
-0.06 (the communication protocols, through the) 117 374.67 P
3 10 Q
-0.13 (KKT_RECV) 303.47 374.67 P
0 11 Q
-0.06 ( interface. The x-kernel path semantics) 351.44 374.67 P
(allow to assign memory on a per handle basis.) 117 361.67 T
(\245) 108 337.67 T
0.18 (At the lowest level of the communication protocols, a packet filter is run. The goal is to bill) 117 337.67 P
0.04 (the PDU to the right path \050memory is debited to paths, without incurring in copies\051. A set of) 117 324.67 P
1.37 (reserved paths have a fixed amount of memory and threads reserved \050to satisfy ancillary) 117 311.67 P
(handshaking such as) 117 298.67 T
3 10 Q
(KKT_ADD_NODE) 210.07 298.67 T
0 11 Q
(\051.) 282.03 298.67 T
(\245) 108 274.67 T
0.53 (The decision of queueing a) 117 274.67 P
3 10 Q
1.16 (meta-kmsg) 241.4 274.67 P
0 11 Q
0.53 ( rather than a kmsg is made by the communication) 295.37 274.67 P
-0.28 (protocols at the receiver side \050and not at the sender side\051: the receiver node may decide to ac-) 117 261.67 P
-0.17 (cept the whole packet, or to turn the packet into a) 117 248.67 P
3 10 Q
-0.38 (meta-kmsg) 334.8 248.67 P
0 11 Q
-0.17 ( \050with most of the memory be-) 388.77 248.67 P
(ing timely released\051, or to drop the packet entirely \050a NAK may be sent\051.) 117 235.67 T
-0.27 (To implement such a model, an important change to the Distributed IPC design and implemen-) 108 211.67 P
0.64 (tation needs to be made: for the sender node to be eager in sending, before any handshaking has) 90 198.67 P
0.94 (happened, it must be possible to fold more than one physical page into a) 90 185.67 P
3 10 Q
2.06 (KKT_SEND_CONNECT) 423.31 185.67 P
0 11 Q
0.94 (.) 519.25 185.67 P
-0.18 (Consider the following example: a MACH message which carries an out-of-line region, equivalent) 90 172.67 P
0.45 (to a VM page size. The regular Distributed IPC design requires two distinct interactions between) 90 159.67 P
1.17 (sender and receiver \050a sender-initiated handshake, and a receiver-initiated pull of data from the) 90 146.67 P
-0.66 (sender\051. This design proposes to have only one interaction \050the data being aggressively piggybacked) 90 133.67 P
1.38 (to the handshaking\051. Tracers have shown that the type of message presented in the example is) 90 120.67 P
(among the most common types.) 90 107.67 T
-0.43 (The use of an unreliable medium, and the consequent retransmissions that may occur, introduc-) 108 88.67 P
0.26 (es a potential problem in handling messages that break queue limits \050) 90 75.67 P
3 10 Q
0.57 (MACH_SEND_ALWAYS) 396.5 75.67 P
0 11 Q
0.26 (\051. Cur-) 492.45 75.67 P
FMENDPAGE
%%EndPage: "28" 29
%%Page: "29" 29
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(29) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.53 (rently, the threads that send these messages \050typically, kernel threads\051 are not supposed to block \050or,) 90 712.67 P
0.03 (if they do, their latency is very small\051. Over Ethernet, this requirement can not be honored: for ex-) 90 699.67 P
0.46 (ample, there are no guarantees that the round trip time \050including retransmissions and congestion) 90 686.67 P
0.1 (control effects\051 is bounded in time. All the occurrences of) 90 673.67 P
3 10 Q
0.21 (MACH_SEND_ALWAYS) 347.56 673.67 P
0 11 Q
0.1 ( have to be evalu-) 443.51 673.67 P
-0.42 (ated, assuming a potentially high latency: cases of deadlock \050no more kernel threads available\051 may) 90 660.67 P
(arise.) 90 647.67 T
1 14 Q
(3.3.3 Message r) 90 618.67 T
(epr) 181.45 618.67 T
(esentation) 201.41 618.67 T
0 11 Q
0.07 (As observed in the local IPC case, the time spent in object lookups must be predictable. In the) 108 599.67 P
(remote IPC case, the conversion port/UID requires an additional table lookup.) 90 586.67 T
1 14 Q
(3.3.4 Message transmission) 90 557.67 T
0 11 Q
-0.31 (Due to the congestion control mechanisms, a typical port message queue will contain a number) 108 538.67 P
-0.06 (of messages that have been completely received and a number of) 90 525.67 P
3 10 Q
-0.13 ( meta-kmsgs) 374.98 525.67 P
0 11 Q
-0.06 (\050whose transmis-) 446.69 525.67 P
-0.09 (sion is still in progress\051. The fact that messages are extracted from the queue in a FIFO order guar-) 90 512.67 P
0.24 (antees ordering \050between two messages sent by the same thread\051 and no starvation. Consider now) 90 499.67 P
-0.23 (the case of a multithreaded server, whose threads issue concurrent) 90 486.67 P
3 10 Q
-0.49 (mach_msg_receive\050\051) 380.94 486.67 P
0 11 Q
-0.23 (: it may) 488.88 486.67 P
0.19 (happen that one of the threads receives the N-1 message earlier than the thread which is receiving) 90 473.67 P
-0.56 (message N \050even though message N has been dequeued before message N-1\051) 90 460.67 P
0 9 Q
-0.46 (4) 422.76 465.07 P
0 11 Q
-0.56 (. This would typically) 427.25 460.67 P
0.67 (happen any time N is a) 90 447.67 P
3 10 Q
1.46 (meta-kmsg) 197.76 447.67 P
0 11 Q
0.67 ( which is being delayed for congestion control reasons. This) 251.73 447.67 P
0.74 (behavior is not a problem, and there is no violation of the MACH IPC semantics, as long as the) 90 434.67 P
3 10 Q
-1.25 (meta-kmsg) 90 421.67 P
0 11 Q
-0.57 ( is turned into a completely received message within a finite amount of time. As we will) 143.97 421.67 P
-0.44 (see, this behavior will represent a significant problem as soon as we relax the assumption of the sin-) 90 408.67 P
0.15 (gle failure domain: in fact, if the meta-kmsg transmission fails \050sender node failure\051, we are at the) 90 395.67 P
(presence of a violation of MACH IPC ordering rules.) 90 382.67 T
-0.16 (In addition to the behaviors dictated by the congestion control mechanisms, message transmis-) 108 363.67 P
(sion introduces an interesting topic: what is the most appropriate agent for it?) 90 350.67 T
0.14 (The more sophisticated the medium, the higher is the chance that the software layers that deal) 108 331.67 P
-0.62 (directly with it are simple. On a Intel Paragon, for instance, the communication protocols have some) 90 318.67 P
0.49 (paths that are optimized to the point that can be executed in interrupt context. As a consequence,) 90 305.67 P
-0.68 (most of the upcalls to Distributed IPC must not assume a thread context. Conversely, service threads) 90 292.67 P
0.23 (\050) 90 279.67 P
3 10 Q
0.5 (norma_message_delivery) 93.66 279.67 P
0 11 Q
0.23 (\051 must be used, to provide a thread context any time there is such a) 225.59 279.67 P
(need.) 90 266.67 T
-0.23 (In the Ethernet case, there is not a path through the communication protocols that is executable) 108 247.67 P
0.65 (without thread context: both complexity of the protocols and capability to block require a thread) 90 234.67 P
0.2 (context. Given that all the upcalls to Distributed IPC have a thread context \050the x-kernel shepherd) 90 221.67 P
0.65 (thread\325s one\051, it is undesirable to poke a) 90 208.67 P
3 10 Q
1.41 (norma_message_delivery) 273.66 208.67 P
0 11 Q
0.65 ( thread and make an extra) 405.59 208.67 P
0.39 (context switch. It is desirable instead to do all of the Distributed IPC processing in the context of) 90 195.67 P
-0.08 (the upcall. Obviously, we must worry about the latency of the upcall: a shepherd thread could start) 90 182.67 P
0.3 (from the bottom anchor protocol, make an upcall to Distributed IPC, discover that the destination) 90 169.67 P
-0.09 (port is mapped into the kernel port space, initiate a kernel service, whose complexity is out of con-) 90 156.67 P
-0.29 (trol. Even worse, a shepherd thread could block within Distributed IPC, thus limiting the capability) 90 143.67 P
0.38 (of x-kernel to sustain incoming traffic \050a deadlock may arise\051. A firewall needs to be established,) 90 130.67 P
-0.29 (beyond which another thread must do the work, relieving the communication thread \050which returns) 90 117.67 P
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(4) 108 80.6 T
0 9 Q
(The multithreaded server would use the message sequence number to reconstruct the proper order.) 111.49 77 T
FMENDPAGE
%%EndPage: "29" 30
%%Page: "30" 30
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(30) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.22 (to the shepherd thread pool\051. The most natural firewall appears to be the action of queueing a kmsg) 90 712.67 P
(\050or a meta-kmsg\051 to a port.) 90 699.67 T
1 14 Q
(3.3.5 Distributed port right management) 90 670.67 T
0 11 Q
-0.02 (In the absence of failures, we can rely upon the protocols for port right management described) 108 651.67 P
(in [La94].) 90 638.67 T
-0.29 (A new protocol has to be created, as a consequence of the introduction of a new type of port. In) 108 619.67 P
-0.02 (2.3, we have described how a real-time port can be created. In the remote case, we must propagate) 90 606.67 P
-0.36 (the real-time attribute of the port from the principal to the proxy\050ies\051. Such an attribute will be fold-) 90 593.67 P
(ed into the) 90 580.67 T
3 10 Q
(mach_msg_port_descriptor_t) 139.13 580.67 T
0 11 Q
( \050defined in Untyped IPC [Re93]\051.) 295.05 580.67 T
1 14 Q
(3.3.6 Memory pinning) 90 551.67 T
0 11 Q
0.37 (The seamless extension of MACH IPC semantics to the remote case imposes a very sophisti-) 108 532.67 P
0.11 (cated VM support: for instance, up to gigabytes of out-of-line regions may be transferred between) 90 519.67 P
-0.23 (nodes. This implies that Distributed IPC must map these regions into kernel wired memory, handle) 90 506.67 P
-0.31 (the send/receive cycles and eventually install the regions into the target address space; in some cas-) 90 493.67 P
-0.15 (es, the amount of memory involved requires that Distributed IPC throttles the operations described) 90 480.67 P
(above.) 90 467.67 T
-0.62 (The Distributed IPC designers have assumed that the communication protocols underneath Dis-) 108 448.67 P
-0.06 (tributed IPC were not capable of any VM operation. Whereas the idea of limiting the VM process-) 90 435.67 P
2.01 (ing to Distributed IPC is a good principle in general \050as incarnation of the protocol layering) 90 422.67 P
0.22 (principles\051, in practice the model can be counterproductive in the Ethernet context. Given that the) 90 409.67 P
0.23 (time needed to successfully complete a transmission is unbounded, in theory memory can live for) 90 396.67 P
-0.23 (long time inside the communication protocols, in the pinned state. It would be better if the commu-) 90 383.67 P
0.22 (nication protocols were empowered by Distributed IPC to pin and unpin the memory at their con-) 90 370.67 P
(venience \050e.g., respectively before and after a send operation\051.) 90 357.67 T
-0.01 (Communication protocols capable to pin and unpin memory require major changes in the Dis-) 108 338.67 P
0.14 (tributed IPC protocols, and in the interfaces between Distributed IPC and the communication pro-) 90 325.67 P
-0.29 (tocols \050KKT layer\051. These changes, however, are not in the critical path of real-time remote IPC: in) 90 312.67 P
-0.1 (fact, the real-time traffic will be limited to \050a small amount of\051 data that is wired in both the source) 90 299.67 P
(and destination address spaces.) 90 286.67 T
1 14 Q
(3.3.7 Miscellaneous) 90 257.67 T
0 11 Q
-0.5 (NORMA and Distributed IPC have always supported single image OSs, whereby the single im-) 108 238.67 P
-0.29 (age properties were provided through MACH IPC and, thus, NORMA or Distributed IPC. This im-) 90 225.67 P
2.5 (plies that NORMA and Distributed IPC have always been started at boot time, without the) 90 212.67 P
(capability to rely upon information that was present in the file system, for instance.) 90 199.67 T
-0.33 (We intend to relax this design assumption. In the real-time computing domain, a node may join) 108 180.67 P
-0.35 (the computing domain any time during the system lifetime. Thus, we must adapt Distributed IPC to) 90 167.67 P
0.54 (be initialized and activated upon an operator request: in particular, the x-kernel protocol graph is) 90 154.67 P
0.25 (assembled first, then Distributed IPC is started, and eventually the user-space servers which com-) 90 141.67 P
(plement Distributed IPC are spawned \050see 3.5 for the detailed list of operations\051.) 90 128.67 T
-0.02 (At the other end of the spectrum, the traditional way to start Distributed IPC must not be com-) 108 109.67 P
0.15 (pletely evicted \050single image clusters are among the deferred goals\051. To perform a traditional Dis-) 90 96.67 P
0.06 (tributed IPC start-up, the configuration services will be enhanced with RARP-like support to get a) 90 83.67 P
FMENDPAGE
%%EndPage: "30" 31
%%Page: "31" 31
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(31) 486 46.67 T
90 72 522 720 R
7 X
V
3 10 Q
0 X
1.1 (node_name) 90 712.67 P
0 11 Q
0.5 ( \050thus, in a way not dissimilar in principle from the ND services that equip NORMA) 143.97 712.67 P
(IPC Version 1\051.) 90 699.67 T
1 14 Q
(3.4 Communication pr) 90 670.67 T
(otocols) 224.62 670.67 T
0 11 Q
(The communication protocols interface directly with two types of agents:) 108 651.67 T
(\245) 108 632.67 T
(Distributed IPC) 117 632.67 T
(\245) 108 608.67 T
-0.6 (User space services, such as configuration server and time server. They access kernel services) 117 608.67 P
(through the x-kernel semantics provided for crossing protection domains.) 117 595.67 T
0.02 (The goal of the communication protocols is to provide reliable, ordered delivery of data. Mes-) 108 571.67 P
(sage boundaries are preserved \050no byte stream-like service is required\051.) 90 558.67 T
(Communication protocols must include:) 108 539.67 T
(\245) 108 520.67 T
(An at-most-once RPC protocol.) 117 520.67 T
(\245) 108 496.67 T
(An efficient bulk data transfer protocol, with selective retransmissions.) 117 496.67 T
-0.14 (The set of off-the-shelf x-kernel protocols available from University of Arizona \050about 30 pro-) 108 472.67 P
-0.31 (tocols\051 covers the requirements. There is a protocol which implements SPRITE RPC \050CHAN\051. An-) 90 459.67 P
2.33 (other protocol has been implemented to blast large chunks of data, and to provide selective) 90 446.67 P
0.52 (retransmissions: BLAST. In the future, new x-kernel protocols may be developed to refine or re-) 90 433.67 P
-0.37 (place the existing ones, with minimal disruptions to the protocol graph \050as a consequence of the ob-) 90 420.67 P
(ject-oriented framework\051.) 90 407.67 T
FMENDPAGE
%%EndPage: "31" 32
%%Page: "32" 32
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(32) 486 46.67 T
90 72 522 720 R
7 X
V
1 F
0 X
(XK-KKT) 108 186.67 T
0 F
-0.42 (Maps the KKT interface invocations to x-kernel semantics. Given that some of) 180 186.67 P
-0.08 (the KKT calls require a synchronous behavior, and some require an asynchro-) 180 173.67 P
0.44 (nous behavior, XK-KKT must interface with CHAN and with DATAGRAM) 180 160.67 P
(directly. The pointer to a XK-KKT control block is a) 180 147.67 T
3 10 Q
(handle_t) 415.25 147.67 T
0 11 Q
(.) 463.22 147.67 T
1 F
(CHAN) 108 130.67 T
0 F
0.09 (Original x-kernel protocol \050with some changes to evict the dependencies with) 180 130.67 P
0.5 (BID, BIDCTL\051. It implements Sprite RPC []: at most once logic, request ac-) 180 117.67 P
-0.34 (knowledgment piggybacked to the reply data. As an optimization, a VCACHE) 180 104.67 P
-0.5 (protocol may precede CHAN, to cache the sessions that appear to be used most) 180 91.67 P
(often.) 180 78.67 T
90 72 522 720 C
90.33 219 521.67 709 C
330.02 477.83 M
 298.66 472.31 261.07 477.95 231.68 458.17 D
 212.32 445.12 211.46 407 235.02 398.75 D
 272.09 385.76 310.7 394.02 348.35 389.34 D
 383.3 385 387.33 426.23 378.32 450.17 D
 371.45 468.41 350.11 473.45 332.35 477.5 D
6 X
0 K
V
0.5 H
2 Z
0 X
N
306.33 547 324.33 529.28 306.33 511.56 288.33 529.28 4 Y
7 X
V
0 X
N
287.67 351.15 328.17 366.33 R
7 X
V
0 X
N
0 8 Q
(VSIZE) 294.78 527.07 T
(ETHERNET) 288.19 355.24 T
216.33 232 396.33 268 R
7 X
V
0 11 Q
0 X
(Distributed IPC) 279.33 673 T
234.33 646 378.33 700 R
N
162.33 637 450.33 637 2 L
1 H
N
0 8 Q
(IP) 262.55 400.07 T
306.33 430 270.33 412 2 L
0.5 H
N
279.33 412 288.33 412 243.33 412 243.33 394 288.33 394 288.33 412 6 L
N
(BLAST) 253 481.33 T
306.33 511 270.33 493 2 L
N
270.33 475 306.33 466 2 L
N
306.33 511 306.33 466 2 L
N
279.33 493 288.33 493 243.33 493 243.33 475 288.33 475 288.33 493 6 L
N
(VMUX) 294.67 445.73 T
306.33 466 288.33 448 306.33 430 324.33 448 4 Y
N
(PACKET) 292.33 337.55 T
(FILTER) 292.33 329.55 T
161.67 287.72 449.67 287.72 2 L
1 H
N
0 11 Q
(KKT interface) 171.33 628 T
(Ethernet) 170.67 278.72 T
216.33 241 396.33 268 R
7 X
V
0 X
(Figure 3. The protocol graph) 225.33 251 T
(Optional) 387.33 446 T
0 8 Q
(XK-KKT) 293.69 612.38 T
0 11 Q
(To configuration and) 99.33 684.38 T
(administration services) 99.33 675.38 T
287.67 294.33 328.17 312.33 R
7 X
V
0.5 H
0 X
N
0 8 Q
(DRIVER) 294.17 302 T
305.67 294.33 305.67 285.33 2 L
N
261.33 601 351.33 628 R
0 Z
N
306.33 646 306.33 628 2 L
2 Z
N
294.8 550.31 306.33 547 294.8 543.69 294.8 547 4 Y
V
132.03 661.46 135.33 673 138.64 661.46 135.33 661.46 4 Y
V
294.8 547 135.33 547 135.33 661.46 3 L
0 Z
N
306.33 565 351.33 583 R
N
261.33 565 297.33 583 R
N
(DATAGRAM) 306.33 571.33 T
(CHAN) 267.67 572 T
333.33 565 333.33 556 306.33 547 3 L
2 Z
N
279.33 565 279.33 556 306.33 547 3 L
N
279.33 601 279.33 583 2 L
N
333.33 601 333.33 583 2 L
N
141.03 661.46 144.33 673 147.64 661.46 144.33 661.46 4 Y
V
144.33 661.46 144.33 592 2 L
N
270.33 583 270.33 583 2 L
0 Z
N
267.8 595.31 279.33 592 267.8 588.69 267.8 592 4 Y
V
144.33 592 267.8 592 2 L
2 Z
N
321.8 595.31 333.33 592 321.8 588.69 321.8 592 4 Y
V
288.33 592 321.8 592 2 L
N
0 11 Q
(sync) 270.33 601 T
(async) 324.33 601 T
287.67 312.67 328.33 351.33 R
N
1 14 Q
(/) 319 328.29 T
0 8 Q
(VCI) 292.33 321.67 T
306.33 430.67 306.33 366.67 2 L
N
270.33 394 306.33 366.67 2 L
N
180.27 502 189.33 502 144 502 144 475.33 189.33 475.33 189.33 502 6 L
N
(HELLO) 154.33 492 T
166.33 475.33 306.33 466 2 L
N
209.67 338 277.67 366 R
N
(ADDRESS) 220.33 355 T
(RESOLUTION) 219.67 345 T
(WORLD) 152 482 T
123.36 660.46 126.67 672 129.97 660.46 126.67 660.46 4 Y
V
160.65 511.49 168 502.01 156.74 506.16 158.69 508.83 4 Y
V
126.67 660.46 126.67 532 158.69 508.82 3 L
0 Z
N
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "32" 33
%%Page: "33" 33
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(33) 486 46.67 T
90 72 522 720 R
7 X
V
1 F
0 X
(DATAGRAM) 108 712.67 T
0 F
2.44 (New x-kernel protocol. It implements an asynchronous, reliable protocol,) 180 712.67 P
0.02 (which moves datagrams. Only one outstanding datagram per) 180 699.67 P
3 10 Q
0.04 (handle_t) 449.58 699.67 P
0 11 Q
0.02 ( is al-) 497.55 699.67 P
(lowed.) 180 686.67 T
1 F
(VSIZE) 108 669.67 T
0 F
-0.42 (Original x-kernel virtual protocol. It multiplexes messages based on the size of) 180 669.67 P
-0.38 (the message being sent. If size is greater than threshold, the fragmentation pro-) 180 656.67 P
-0.03 (tocol \050BLAST\051 gets activated. If size is less or equal than threshold, messages) 180 643.67 P
-0.03 (can go directly to the Ethernet driver \050header padding may be added, to facili-) 180 630.67 P
(tate the packet filtering operations\051.) 180 617.67 T
1 F
(BLAST) 108 600.67 T
0 F
0.68 (Original x-kernel protocol. It implements the Sprite fragmentation algorithm) 180 600.67 P
-0.31 (\050unreliable\051. The blast PDU size is determined by the product of the maximum) 180 587.67 P
0.35 (number of outstanding fragments and the Ethernet PDU size. Blast PDU size) 180 574.67 P
(is configurable at compile-time.) 180 561.67 T
1 F
(VMUX) 108 544.67 T
0 F
0.3 (Original x-kernel virtual protocol. It is used at connection establishment time) 180 544.67 P
0.43 (to bypass the IP protocol, if local node and destination node happen to be on) 180 531.67 P
0 (the same local network \050header padding may be added, to facilitate the packet) 180 518.67 P
(filtering operations\051. The presence of this protocol in the graph is optional.) 180 505.67 T
1 F
(IP) 108 488.67 T
0 F
0.36 (Original x-kernel Internet protocol.The presence of this protocol in the graph) 180 488.67 P
(is optional.) 180 475.67 T
1 F
(HELLO WORLD) 108 458.67 T
0 F
0.06 (New x-kernel protocol. It implements the fundamental component of the con-) 180 441.67 P
0.27 (figuration services. It is used to register new nodes in the computing domain.) 180 428.67 P
(If solicited, is able to advertise the node identity to the other nodes.) 180 415.67 T
1 F
(ETHERNET) 108 398.67 T
0 F
-0.35 (Original x-kernel protocol. Hardware independent Ethernet packet processing.) 180 398.67 P
1 F
(ADDRESS RESOLUTION) 108 381.67 T
0 F
0.55 (New x-kernel protocol, in the Control realm. Similarly to ARP, it caches the) 180 364.67 P
-0.28 (translations of addresses in use within Distributed IPC and the communication) 180 351.67 P
(protocols to Ethernet addresses.) 180 338.67 T
1 F
(PACKET FILTER) 108 321.67 T
0 F
-0.44 (New x-kernel protocol. In the first implementation, it will be degenerated to be) 180 304.67 P
-0.59 (a simple VCI protocol. The demultiplexing action exploited by the packet filter) 180 291.67 P
-0.43 (\050or VCI\051 is intended to be executed on interrupt stack \050before actually connect-) 180 278.67 P
(ing to the x-kernel graph and using some of its resources\051.) 180 265.67 T
-0.55 (Other protocols may be inserted, to deal with multiple interface controllers. It is worth mention-) 108 231.67 P
-0.63 (ing that the protocol graph presented in Figure 3 will be significantly extended, to deal with multiple) 90 218.67 P
(failure domains \050node-liveness, membership, see section 4\051.) 90 205.67 T
0.04 (While designing the XK-KKT logic, a fundamental choice has to be made: shall the XK-KKT) 108 186.67 P
-0.09 (protocol synchronize KKT_SEND with KKT_RECV? On a multicomputer\325s mesh, it is likely that) 90 173.67 P
-0.12 (sender and receiver are synchronized at the link layer, so that no further explicit synchronization is) 90 160.67 P
0.42 (required \050if the receiver does not issue a KKT_RECV, bits will be held, and further KKT_SEND) 90 147.67 P
-0.09 (will block\051. Over Ethernet, there is not an implicit synchronization. Thus, we must decide between) 90 134.67 P
(two alternatives:) 90 121.67 T
(\245) 108 102.67 T
0.11 (The KKT_RECV operation goes across the wire, to inform the other endpoint that it is enti-) 117 102.67 P
0.25 (tled to send the data. This model matches the definition of a) 117 89.67 P
1 F
0.25 (receiver-pull) 385.83 89.67 P
0 F
0.25 ( model. If the) 445.63 89.67 P
1 F
0.25 (re-) 508.58 89.67 P
(ceiver-pull) 117 76.67 T
0 F
( model is adopted, some protocols \050e.g., DATAGRAM\051 need to be aware of it.) 167.04 76.67 T
FMENDPAGE
%%EndPage: "33" 34
%%Page: "34" 34
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(34) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(\245) 108 712.67 T
0.38 (Sender node eagerly send, regardless of the state of the receiver. If the receiver has already) 117 712.67 P
-0.2 (entered into a KKT_RECV state, bits will be copied to the right buffer \050associated to a path\051.) 117 699.67 P
-0.46 (Otherwise, the communication protocols may hold the data \050if communication resources may) 117 686.67 P
0.04 (be loaned\051, or simply NAK it. This model is not a) 117 673.67 P
1 F
0.04 (receiver-pull) 338.71 673.67 P
0 F
0.04 ( model, even though the op-) 398.51 673.67 P
0.62 (eration is largely driven by the receiver: to avoid confusion, we define this model to be an) 117 660.67 P
1 F
0.56 (early-drop) 117 647.67 P
0 F
0.56 ( model. The) 167.04 647.67 P
1 F
0.56 (early-drop) 224.27 647.67 P
0 F
0.56 ( model does not have any implications on the protocols) 274.32 647.67 P
(\050in that the) 117 634.67 T
1 F
(early-drop) 167.35 634.67 T
0 F
( happens at the lowest level of the protocol graph\051.) 217.39 634.67 T
-0.28 (The choice between the) 108 610.67 P
1 F
-0.28 (receiver-pull) 213.64 610.67 P
0 F
-0.28 ( and) 273.44 610.67 P
1 F
-0.28 (early-drop) 294.22 610.67 P
0 F
-0.28 ( models will be made comparing the em-) 344.27 610.67 P
3.39 (pirical data that comes from typical patterns of traffic and load. At this point, a generic) 90 597.67 P
-0.05 (\322CLEAR_TO_SEND\323 condition marks the state transition at the sender side. The next two figures) 90 584.67 P
0.2 (present the state transitions that involve Distributed IPC, the XK_KKT module and the rest of the) 90 571.67 P
(x-kernel protocol graph.) 90 558.67 T
90 72 522 720 C
122.45 191.33 489.55 555 C
211.12 200.33 391.12 227.33 R
7 X
0 K
V
0 11 Q
0 X
(Figure 4. XK_KKT, TX side) 220.12 210.33 T
230.45 501 230.45 294 2 L
3 H
2 Z
N
215.97 484.03 227.5 480.72 215.97 477.41 215.97 480.72 4 Y
V
128.5 480.72 215.97 480.72 2 L
0.5 H
N
3 10 Q
(KKT_HANDLE_ALLOC) 125.5 485.07 T
(Returns) 236.5 474.79 T
(Allocate control) 236.5 482.79 T
(handle_t) 282.5 474.15 T
215.97 448.03 227.5 444.72 215.97 441.41 215.97 444.72 4 Y
V
128.5 444.72 215.97 444.72 2 L
N
(KKT_SEND_CONNECT) 126.33 449.33 T
365.45 501 365.45 294 2 L
3 H
N
(xOpen) 239.67 445.33 T
353.46 445.31 365 442 353.46 438.69 353.46 442 4 Y
V
237 442 353.46 442 2 L
0.5 H
N
(xCall) 242.33 430 T
354.8 429.31 366.33 426 354.8 422.69 354.8 426 4 Y
V
237.67 426 354.8 426 2 L
N
437.45 501 437.45 294 2 L
3 H
N
426.8 429.98 438.33 426.67 426.8 423.36 426.8 426.67 4 Y
V
365.67 426.67 426.8 426.67 2 L
0.5 H
N
377.23 407.47 365.67 410.67 377.17 414.08 377.2 410.77 4 Y
V
437.67 411.33 377.2 410.77 2 L
N
(KKT_DATA_SENT) 239 407.33 T
(KKT_SUCCESS) 239 399.33 T
239.2 368.69 227.67 372 239.2 375.31 239.2 372 4 Y
V
364.33 372 239.2 372 2 L
N
(\050If KKT_SUCCESS, store) 231.67 392 T
(callback\051) 238.33 386 T
(\050CHAN\051) 271.67 431.33 T
(block) 335 483.33 T
(\050blocking\051) 138.33 435.33 T
241.2 344.69 229.67 348 241.2 351.31 241.2 348 4 Y
V
365.67 348 241.2 348 2 L
N
(\322CLEAR_TO_SEND\323) 241.67 352.67 T
139.87 344.03 128.33 347.33 139.87 350.64 139.87 347.33 4 Y
V
231.67 347.33 139.87 347.33 2 L
N
(\050*callback\051\050\051) 131 354 T
220.13 331.98 231.67 328.67 220.13 325.36 220.13 328.67 4 Y
V
131.67 328.67 220.13 328.67 2 L
N
(KKT_SEND) 128.33 334 T
352.13 326.64 363.67 323.33 352.13 320.03 352.13 323.33 4 Y
V
237.45 323.33 352.13 323.33 2 L
N
(xPush\050DATAGRAM\051) 242.78 335.76 T
(\050store callback\051) 241 327.33 T
424.8 326.64 436.33 323.33 424.8 320.03 424.8 323.33 4 Y
V
364.33 323.33 424.8 323.33 2 L
N
452.13 429.98 463.67 426.67 452.13 423.36 452.13 426.67 4 Y
V
437.67 426.67 452.13 426.67 2 L
N
448.61 407.67 437 410.67 448.44 414.28 448.53 410.97 4 Y
V
462.33 411.33 448.53 410.97 2 L
N
449.2 300.69 437.67 304 449.2 307.31 449.2 304 4 Y
V
461.67 304 449.2 304 2 L
N
241.98 299.69 230.45 303 241.98 306.31 241.98 303 4 Y
V
437.45 303 241.98 303 2 L
N
376.98 299.69 365.45 303 376.98 306.31 376.98 303 4 Y
V
437.45 303 376.98 303 2 L
N
0 11 Q
(xPop) 244.33 307.33 T
140.54 300.03 129 303.33 140.54 306.64 140.54 303.33 4 Y
V
229.67 303.33 140.54 303.33 2 L
N
3 10 Q
(\050*callback\051\050\051) 131.67 310.67 T
0 11 Q
(Distributed IPC) 141.67 522.67 T
(XK-KKT) 267 522.67 T
(GRAPH) 385 510.67 T
(WIRE) 456.33 524.67 T
(X-KERNEL) 381.67 524 T
3 10 Q
(unlock caller) 240 376.67 T
230.45 294 230.45 240 2 L
3 H
N
365.45 294 365.45 240 2 L
N
437.45 294 437.45 240 2 L
N
(\050ACK\051) 268 308 T
219.13 270.64 230.67 267.33 219.13 264.03 219.13 267.33 4 Y
V
132.67 267.33 219.13 267.33 2 L
0.5 H
N
(KKT_HANDLE_FREE) 126.67 272 T
(Remove control block) 236.67 268.67 T
451.13 326.64 462.67 323.33 451.13 320.03 451.13 323.33 4 Y
V
436.33 323.33 451.13 323.33 2 L
N
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "34" 35
%%Page: "35" 35
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(35) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.36 (To improve the stability and effectiveness of communication services, the Distributed IPC traf-) 108 330.67 P
0.13 (fic and state transitions \050leftmost part of Figure 4 and 5\051 will be simulated via a new x-kernel pro-) 90 317.67 P
-0.39 (tocol, XK-NORMA. XK-NORMA will sit on top of XK-KKT, and it will honor the KKT interface.) 90 304.67 P
0.61 (The use of a framework like x-kernel allows us to make a number of experiments in a quick) 108 285.67 P
0.73 (way: after all, the definition of the protocol graph of Figure 3 is limited to a meta-language file,) 90 272.67 P
0.46 (graph.comp. Among other things, it will be interesting to replace CHAN and DATAGRAM with) 90 259.67 P
0.17 (TCP \050preceeded by a caching protocol, VCACHE, to minimize the costs of connection set-up and) 90 246.67 P
0.88 (tear-down\051. TCP would bring a sophisticated window-based congestion control: this mechanism) 90 233.67 P
0.5 (has a slow-start, and it is driven by the receiver; both principles fit well with the Distributed IPC) 90 220.67 P
-0.64 (congestion control mechanisms. Distributed IPC could then delegate some of the congestion control) 90 207.67 P
0.12 (mechanisms to the communication services; however, it is important to note that only a portion of) 90 194.67 P
-0.45 (the congestion control mechanisms can be scaled down from Distributed IPC to the communication) 90 181.67 P
-0.63 (services: in fact, for congestion control to be effective, some Distributed IPC context is still required) 90 168.67 P
0.38 (\050e.g., to have messages queued to a proxy port\051; thus, congestion control can not be evicted com-) 90 155.67 P
(pletely from Distributed IPC.) 90 142.67 T
1 14 Q
(3.5 Con\336guration server and \322Hello W) 90 113.67 T
(orld\323 pr) 320.89 113.67 T
(otocol) 370 113.67 T
0 11 Q
0.58 (The combination of configuration server and \322Hello World\323 protocol allows a node to join a) 108 94.67 P
0.32 (computing domain; as in the previous sections, the working assumption is that the computing do-) 90 81.67 P
90 72 522 720 C
122.45 346 489.55 709 C
211.12 355 391.12 382 R
7 X
0 K
V
0 11 Q
0 X
(Figure 5. XK_KKT, RX side) 220.12 365 T
230.45 653 230.45 446 2 L
3 H
2 Z
N
217.3 578.69 228.84 575.38 217.3 572.08 217.3 575.38 4 Y
V
129.84 575.38 217.3 575.38 2 L
0.5 H
N
3 10 Q
(KKT_CONNECT_REPLY) 125.67 578.67 T
365.45 655.67 365.45 448.67 2 L
3 H
N
353.46 579.31 365 576 353.46 572.69 353.46 576 4 Y
V
237 576 353.46 576 2 L
0.5 H
N
437.45 655.67 437.45 448.67 2 L
3 H
N
426.8 579.31 438.33 576 426.8 572.69 426.8 576 4 Y
V
365.67 576 426.8 576 2 L
0.5 H
N
377.23 545.47 365.67 548.67 377.17 552.08 377.2 548.77 4 Y
V
437.67 549.33 377.2 548.77 2 L
N
377.87 492.69 366.33 496 377.87 499.31 377.87 496 4 Y
V
439 496 377.87 496 2 L
N
241.87 506.69 230.33 510 241.87 513.31 241.87 510 4 Y
V
366.33 510 241.87 510 2 L
N
139.2 592.69 127.67 596 139.2 599.31 139.2 596 4 Y
V
231 596 139.2 596 2 L
N
(\050*deliver\051\050\051) 137 600.67 T
218.13 560.64 229.67 557.33 218.13 554.03 218.13 557.33 4 Y
V
129.67 557.33 218.13 557.33 2 L
N
(KKT_RECV) 124.33 560.67 T
350.13 535.97 361.67 532.67 350.13 529.36 350.13 532.67 4 Y
V
235.45 532.67 350.13 532.67 2 L
N
426.8 535.97 438.33 532.67 426.8 529.36 426.8 532.67 4 Y
V
366.33 532.67 426.8 532.67 2 L
N
451.46 579.97 463 576.67 451.46 573.36 451.46 576.67 4 Y
V
437 576.67 451.46 576.67 2 L
N
453.46 535.97 465 532.67 453.46 529.36 453.46 532.67 4 Y
V
453.46 532.67 439.67 532.67 2 L
N
450.54 546.03 439 549.33 450.54 552.64 450.54 549.33 4 Y
V
463 549.33 450.54 549.33 2 L
N
139.2 506.69 127.67 510 139.2 513.31 139.2 510 4 Y
V
228.33 510 139.2 510 2 L
N
(\050*callback\051\050\051) 135.67 514 T
0 11 Q
(Distributed IPC) 141.67 677.33 T
(XK-KKT) 267 677.33 T
(GRAPH) 385 665.33 T
(WIRE) 456.33 679.33 T
(X-KERNEL) 381.67 678.67 T
230.45 448.67 230.45 394.67 2 L
3 H
N
365.45 448.67 365.45 394.67 2 L
N
437.45 448.67 437.45 394.67 2 L
N
219.13 441.97 230.67 438.67 219.13 435.36 219.13 438.67 4 Y
V
132.67 438.67 219.13 438.67 2 L
0.5 H
N
3 10 Q
(KKT_HANDLE_FREE) 125.33 444 T
448.2 622.03 436.67 625.33 448.2 628.64 448.2 625.33 4 Y
V
462.67 625.33 448.2 625.33 2 L
N
375.54 622.03 364 625.33 375.54 628.64 375.54 625.33 4 Y
V
437.33 625.33 375.54 625.33 2 L
N
240.87 592.69 229.33 596 240.87 599.31 240.87 596 4 Y
V
366 596 240.87 596 2 L
N
(xCallPop \050CHAN\051) 239.33 600.67 T
(set-up handle_t) 239.33 609.33 T
(xPop \050DATAGRAM\051) 239.33 514 T
(store callback) 238 542.67 T
(xPush \050ACK\051) 239.45 535.33 T
448.98 493.36 437.45 496.67 448.98 499.97 448.98 496.67 4 Y
V
448.98 496.67 462 496.67 2 L
N
351.46 479.31 363 476 351.46 472.69 351.46 476 4 Y
V
236.78 476 351.46 476 2 L
N
(xPush \050NAK\051) 239.45 480 T
(Remove control block) 238 436 T
(Allocate control block) 232.67 617.33 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "35" 36
%%Page: "36" 36
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(36) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.57 (main is a single failure domain. The configuration strategy presented hereafter is grossly inadequate) 90 712.67 P
-0.09 (for deployments that are beyond small scale prototypes: as a matter of fact, it is meant only to help) 90 699.67 P
-0.33 (the real-time IPC team in making progresses towards the real configuration schema, which is based) 90 686.67 P
0.26 (on services designed for fault isolation and fault management; the next section will introduce two) 90 673.67 P
-0.46 (key services, membership and node-liveness, upon which an effective configuration strategy can be) 90 660.67 P
(built. As far as the user interfaces are concerned, there are no problems in taking the ideas and ter-) 90 647.67 T
-0.08 (minology proposed in [Pa93]; they seem capable to span configurations that exceed the immediate) 90 634.67 P
0.04 (goals of the real-time IPC project \050single image clusters and multicomputers\051; the IPC project will) 90 621.67 P
(monitor any activity that may come out of the explorative work presented in [Pa93].) 90 608.67 T
0.51 (The merit of this paragraph is to introduce the addressing schema, to be preserved across the) 108 589.67 P
-0.29 (evolutionary path through membership and node-liveness. It introduces also the semantics for join-) 90 576.67 P
0.34 (ing new nodes, and the mechanisms used to activate the protocol graph, the Distributed IPC code) 90 563.67 P
(and the other user-space services that create the real-time IPC realm.) 90 550.67 T
0.9 (A computing domain is defined by a string,) 108 531.67 P
3 10 Q
1.97 (norma_domain_name) 308.98 531.67 P
0 11 Q
0.9 (. The) 410.92 531.67 P
3 10 Q
1.97 (norma_domain_-) 438.05 531.67 P
(name) 90 518.67 T
0 11 Q
( string may be wildcarded to be the NULL string.) 113.99 518.67 T
0.72 (Upon boot, a node may join a computing domain only once. To join a computing domain, a) 108 499.67 P
0.12 (node must be free of any Distributed IPC state concerning nodes which are already part of the do-) 90 486.67 P
0.43 (main \050amnesia join\051. Communication omission failures create the premises for the following sce-) 90 473.67 P
1.01 (nario: two or more computing domains with the same) 90 460.67 P
3 10 Q
2.2 (norma_domain_name) 337.39 460.67 P
0 11 Q
1.01 ( may start without) 439.33 460.67 P
-0.62 (gaining knowledge of one another. To deal with this situation, the configuration services must allow) 90 447.67 P
0.18 (to coalesce a domain A whose cluster state and Distributed IPC state are completely disjoint from) 90 434.67 P
-0.6 (domain B \050group join\051. As we will see, the membership services can make sure that a quiescent state) 90 421.67 P
-0.17 (may still be reached, whereby a majority agreement holds among the computing domain members.) 90 408.67 P
0.12 (Any node that participates to a computing domain has a symbolic name associated to it,) 108 389.67 P
3 10 Q
0.27 (nor-) 498.01 389.67 P
-1.16 (ma_node_name.) 90 376.67 P
0 11 Q
-0.53 ( The configuration server is a user space privileged application that manages a da-) 167.96 376.67 P
FMENDPAGE
%%EndPage: "36" 37
%%Page: "37" 37
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(37) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.12 (tabase whose entries are the <) 90 712.67 P
3 10 Q
-0.26 (norma_node_name, node_name) 220.99 712.67 P
0 11 Q
-0.12 (> tuples. The database is updated) 376.65 712.67 P
-0.16 (with information coming from the \322Hello World\323 protocol. The database is queried by those appli-) 90 296.67 P
(cations that are interested to one or both of the following operations:) 90 283.67 T
(\245) 108 264.67 T
(Determine whether a node is a member of the computing domain.) 117 264.67 T
(\245) 108 240.67 T
(Given a) 117 240.67 T
3 10 Q
(norma_node_name,) 154.22 240.67 T
0 11 Q
(determine the equivalent) 256.17 240.67 T
3 10 Q
( node_name.) 364.79 240.67 T
0 11 Q
(Typically, the network name server is an application that depends on both these operations.) 108 216.67 T
0.63 (It is worth mentioning that the configuration server does not keep track of network topology) 108 197.67 P
-0.36 (related information. In addition, the configuration server has to be totally protocol-independent and) 90 184.67 P
(machine-independent.) 90 171.67 T
-0.02 (The) 108 152.67 P
3 10 Q
-0.04 (node_name) 127.81 152.67 P
0 11 Q
-0.02 (is used by Distributed IPC, to build UIDs and to provide node indications to) 187.74 152.67 P
(the KKT calls \050node addresses are stored in the) 90 139.67 T
3 10 Q
(norma_ipc_port) 300.21 139.67 T
0 11 Q
( structure\051.) 384.17 139.67 T
(The configuration of the computing domain takes place in the following steps:) 108 120.67 T
(1.) 108 101.67 T
-0.27 (We assume that the Distributed IPC operations can be started after the file system has been) 126 101.67 P
-0.67 (accessed, and after the OS personality has been activated \050at this point, we assume that there) 126 88.67 P
0.3 (are no requirements for supporting a distributed OS personality and a distributed file sys-) 126 75.67 P
90 72 522 720 C
145 316.33 467 709 C
143.33 493 464.67 493 2 L
1 H
2 Z
0 X
0 K
N
252.67 646.33 252.67 358.33 2 L
0.5 H
N
0 11 Q
(CONFIGURATION) 154.67 603.67 T
(SERVICES) 156 592 T
(DISTRIB) 155.33 526.33 T
(COMMUNICATION) 155.33 459 T
(SERVICES) 157.33 448.67 T
(NETWORK) 156.67 387 T
(INTERFACE) 156.67 375.33 T
252.67 709 252.67 641 2 L
N
360.67 709 360.67 359 2 L
N
216 321.5 396 348.5 R
7 X
V
0 X
(Figure 6. The addressing schema) 225 331.5 T
(COMPUTING) 156.67 675.67 T
(DOMAIN) 156.67 664 T
(IPC) 232.57 525.84 T
3 10 Q
(norma_domain_name) 256 673 T
(norma_node_name) 257.33 601 T
0 11 Q
(node_name) 278.67 529 T
(NAP) 295.33 457.67 T
(802.2) 296.67 385 T
(\050char *\051) 288.67 655.67 T
(\050char *\051) 288.67 585.67 T
(\05032 bits\051) 288.67 513.67 T
(\05032 bits\051) 290 443 T
(\05048 bits\051) 289.33 370.33 T
309.97 625.87 306.67 614.33 303.36 625.87 306.67 625.87 4 Y
V
306.67 651 306.67 625.87 2 L
1 H
N
309.97 554.54 306.67 543 303.36 554.54 306.67 554.54 4 Y
V
306.67 579 306.67 554.54 2 L
N
309.31 482.54 306 471 302.69 482.54 306 482.54 4 Y
V
306 507 306 482.54 2 L
N
309.76 410.6 306.66 399.01 303.14 410.48 306.45 410.54 4 Y
V
306 435 306.45 410.53 2 L
N
322.83 482.74 325.33 471.01 316.99 479.64 319.91 481.19 4 Y
4 X
V
306 507.67 319.91 481.18 2 L
N
295.54 479.75 287.33 471 289.66 482.78 292.6 481.26 4 Y
V
306 507.67 292.6 481.26 2 L
N
0 X
(Symbolic name of) 364 677 T
(the computing domain) 364 666 T
(Symbolic name of a) 364 610.33 T
(single participant to) 364 599.33 T
(the computing domain) 364 588.33 T
(Transport dependent) 366 475 T
(address. With multiple) 366 464 T
(comm. interfaces,) 366 453 T
(a one-to-many) 366 442 T
(pondence) 366 431 T
(corres-) 433.33 441 T
(is needed.) 413.33 431.67 T
142.67 637 464.67 637 2 L
N
145.33 565 467.33 565 2 L
N
144.67 421 466.67 421 2 L
N
(Unique node identifier) 366 528 T
(UTED) 197.33 526 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "37" 38
%%Page: "38" 38
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(38) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.12 (tem, which would require to start Distributed IPC before\051. The operator inputs a command) 126 712.67 P
(line, with the following synopsis:) 126 699.67 T
(2.) 108 537 T
-0.57 (If multiple) 126 537 P
3 10 Q
-1.24 (<NAP, interface_name) 174.3 537 P
0 11 Q
-0.57 (> are configured in the system, for real-time IPC use,) 292.99 537 P
-0.15 (multiple) 126 524 P
2 12 Q
-0.16 (cfg_server) 165.23 524 P
0 11 Q
-0.15 ( commands must be issued \050both) 215.85 524 P
3 10 Q
-0.32 ( NAP) 358.84 524 P
0 11 Q
-0.15 ( and) 382.5 524 P
3 10 Q
-0.32 (interface_name) 403.56 524 P
0 11 Q
-0.15 ( have to) 487.52 524 P
(be different\051.) 126 511 T
(3.) 108 487 T
0.53 (The configuration server starts the process of building the x-kernel protocol graph. From) 126 487 P
-0.2 (the bottom anchor protocol \050whose input parameter is) 126 474 P
3 10 Q
-0.43 (interface_name\051,) 363.03 474 P
0 11 Q
-0.2 (x-kernel pro-) 464.54 474 P
0.07 (tocols are assembled, according to the relations specified in the compile-time x-kernel de-) 126 461 P
(scription file) 126 448 T
3 10 Q
(graph.comp) 184.59 448 T
0 11 Q
(.) 244.56 448 T
(4.) 108 424 T
-0.65 (If a) 126 424 P
3 10 Q
-1.42 (node_name) 142.39 424 P
0 11 Q
-0.65 ( is not specified as part of the command line, a) 196.36 424 P
3 10 Q
-1.42 (node_name) 396.7 424 P
0 11 Q
-0.65 ( is automatically) 450.67 424 P
0.12 (selected, by taking the lower 32 bits of the lowest) 126 411 P
3 10 Q
0.27 (802.2) 347.86 411 P
0 11 Q
0.12 ( number that is configured in the) 377.84 411 P
0.25 (system.) 126 398 P
3 10 Q
0.56 (802.2) 162.27 398 P
0 11 Q
0.25 ( numbers are 48 bits entities that are known to be unique. Observe that the) 192.25 398 P
0.5 (reduction to a 32 bits number breaks the uniqueness: other steps must make sure that the) 126 385 P
3 10 Q
(node_name) 126 372 T
0 11 Q
( is unique within the computing domain.) 179.97 372 T
(5.) 108 348 T
-0.13 (If a) 126 348 P
3 10 Q
-0.28 (NAP) 146.53 348 P
0 11 Q
-0.13 (is not specified, the) 170.24 348 P
3 10 Q
-0.28 (NAP) 257.92 348 P
0 11 Q
-0.13 ( is assumed to be equivalent to a) 275.9 348 P
3 10 Q
-0.28 (node_name) 420.13 348 P
6 F
-0.28 (.) 474.1 348 P
0 11 Q
-0.13 (This ex-) 485.82 348 P
(cludes a priori any support of different controllers.) 126 335 T
(6.) 108 311 T
1.43 (The \322Hello World\323 protocol broadcasts the <) 126 311 P
3 10 Q
3.12 (norma_domain_name, norma_node_-) 332.98 311 P
0.93 (name, node_name,) 126 298 P
0.93 (NAP,) 226.05 298 P
0.93 (802.2) 253.21 298 P
0 11 Q
0.43 (> tuple on every) 283.2 298 P
3 10 Q
0.93 (interface_name) 359.45 298 P
0 11 Q
0.43 ( that may be used) 443.4 298 P
-0.19 (for real-time IPC \050) 126 285 P
3 10 Q
-0.41 (NAP) 206.89 285 P
0 11 Q
-0.19 (s and) 224.88 285 P
3 10 Q
-0.41 (802.2) 250.13 285 P
0 11 Q
-0.19 (s will be different for different) 280.12 285 P
3 10 Q
-0.41 (interface_name) 415.66 285 P
0 11 Q
-0.19 (s\051. In) 499.61 285 P
-0.12 (addition, the Hello World protocol \322pops\323 the) 126 272 P
3 10 Q
-0.27 (<norma_node_name, node_name) 329.57 272 P
0 11 Q
-0.12 (> tuple) 491.21 272 P
0.41 (to the configuration server database. At any point in time, during the system lifetime, the) 126 259 P
0.36 (Hello World protocol is responsible for receiving other) 126 246 P
3 10 Q
0.79 ( <norma_domain_name, nor-) 370.5 246 P
0.39 (ma_node_name, node_name,NAP,) 126 233 P
0.39 (802.2) 297.22 233 P
0 11 Q
0.18 (> tuples from the network \050new nodes join\051.) 327.2 233 P
(The information carried with the tuples is used in different ways:) 126 220 T
(\245 The <) 126 196 T
3 10 Q
(norma_node_name, node_name) 158.62 196 T
0 11 Q
(> part is popped to the configuration server, to) 314.53 196 T
(keep the configuration database up to date.) 133.2 183 T
-0.15 (\245 The <) 126 166 P
3 10 Q
-0.33 (node_name, NAP) 158.32 166 P
0 11 Q
-0.15 (> part is recorded in a in-kernel table, to be used by the commu-) 241.94 166 P
(nication services \050only if) 133.2 153 T
3 10 Q
(node_name) 244.88 153 T
0 11 Q
( differs from) 298.85 153 T
3 10 Q
(NAP) 357.12 153 T
0 11 Q
(\051.) 375.11 153 T
0.75 (\245 The <) 126 136 P
3 10 Q
1.65 (NAP, 802.2) 160.13 136 P
0 11 Q
0.75 (> part is stored in the Address Resolution table \050in a ARP fashion;) 221.74 136 P
2.36 (unlike ARP, however, the entries are always persistent. The node-liveness protocol) 133.2 123 P
(introduced later will refine this model\051.) 133.2 110 T
(7.) 108 95 T
0.07 (The Hello World protocol is able to solicit any other node to perform step 6. Note that the) 126 95 P
-0.35 (server personality - which replies to Hello World solicitations - is lumped together with the) 126 82 P
90 72 522 720 C
189 570.33 423 671 C
2 12 Q
0 X
0 K
(# cfg_server [-d) 203.67 652.33 T
6 10 Q
(norma_domain_name) 283.94 652.33 T
2 12 Q
(]) 388.33 651.67 T
(\134) 398.33 651.67 T
(-n) 271 637 T
6 10 Q
(norma_node_name) 283.99 637 T
2 12 Q
(\134) 397 636.33 T
([ -a) 262.33 619 T
6 10 Q
(node_name) 282.99 619 T
2 12 Q
(]) 342.95 619 T
(\134) 396.33 618.33 T
(-i) 269 582.33 T
6 10 Q
(interface_name) 279.33 582.33 T
2 12 Q
(-N) 269.67 599 T
6 10 Q
(NAP) 284.66 599 T
2 12 Q
([) 262.33 597 T
(]) 304.33 597 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "38" 39
%%Page: "39" 39
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(39) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
0.15 (client personality - which advertises node identities or solicit other Hello World protocols) 126 712.67 P
(- to represent a unique protocol.) 126 699.67 T
(8.) 108 675.67 T
0.09 (The Hello World protocol must also detect collisions on the) 126 675.67 P
3 10 Q
0.2 (node_name) 392.39 675.67 P
0 11 Q
0.09 ( that may happen) 446.36 675.67 P
-0.24 (\050configuration errors\051: the \322owner\323 of a) 126 662.67 P
3 10 Q
-0.52 (node_name) 300.89 662.67 P
0 11 Q
-0.24 ( must crash its own system if the same) 354.86 662.67 P
3 10 Q
-0.18 (node_name) 126 649.67 P
0 11 Q
-0.08 ( happens to be advertised by another node, at any point in time \050clearly, this is) 179.97 649.67 P
0.7 (a very) 126 636.67 P
2 12 Q
0.77 (primitive) 157.3 636.67 P
0 11 Q
0.7 ( placeholder for a sophisticated membership protocol, whereby) 200.61 636.67 P
3 10 Q
1.53 (node_-) 486.02 636.67 P
(name) 126 623.67 T
0 11 Q
( negotiation may take place, and majority consensus may be reached\051.) 149.99 623.67 T
(9.) 108 599.67 T
1.36 (Given a) 126 599.67 P
3 10 Q
2.96 (node_name) 165.93 599.67 P
0 11 Q
1.36 (, Distributed IPC can be initialized. Eventually, the network name) 219.9 599.67 P
-0.07 (server and the time server are spawned. Note that Distributed IPC may have knowledge of) 126 586.67 P
0.47 (other) 126 573.67 P
3 10 Q
1.03 (node_name) 151.8 573.67 P
0 11 Q
0.47 (s \050for instance, a kernel configuration file which indicates where nodes) 205.77 573.67 P
-0.43 (with special properties are\051. In that case, Distributed IPC will process the special port in the) 126 560.67 P
0.75 (standard way; at the time the communication services are invoked, the translation of the) 126 547.67 P
6 10 Q
(node_name) 126 534.67 T
0 11 Q
( to a) 179.97 534.67 T
6 10 Q
(NAP) 201.63 534.67 T
0 11 Q
( and a) 219.62 534.67 T
6 10 Q
(802.2) 248.61 534.67 T
0 11 Q
( may require the execution of step 7.) 278.59 534.67 T
(10.) 108 510.67 T
0.48 (Any time a PDU is received and routed through the Distributed communication services,) 126 510.67 P
0.48 (the) 126 497.67 P
3 10 Q
1.06 (NAP) 142.65 497.67 P
0 11 Q
0.48 ( \050or) 160.65 497.67 P
3 10 Q
1.06 (node_name) 179.92 497.67 P
0 11 Q
0.48 (\051 need to be authenticated, as a legal member of the) 233.89 497.67 P
3 10 Q
1.06 (norma_do-) 468.03 497.67 P
-1.12 (main_name) 126 484.67 P
0 11 Q
-0.51 ( computing domain. Given that communication medium may experience omis-) 179.97 484.67 P
-0.32 (sion failures, we must account for the event that step 7. has not taken place yet \050once again,) 126 471.67 P
-0.64 (the membership protocol introduced later will make sure that step7 does take place, and that) 126 458.67 P
-0.31 (the information is consistent\051. As a temporary remedy to these failures, the communication) 126 445.67 P
(services are able to make an explicit request for step7 to happen.) 126 432.67 T
(11.) 108 408.67 T
0.22 (Any time Distributed IPC has to send a message across the wire,) 126 408.67 P
3 10 Q
0.49 (node_name) 415.19 408.67 P
0 11 Q
0.22 ( needs to be) 469.16 408.67 P
-0.39 (converted to a) 126 395.67 P
3 10 Q
-0.86 (NAP) 189.8 395.67 P
0 11 Q
-0.39 ( and then to a) 207.79 395.67 P
3 10 Q
-0.86 (802.2) 267.77 395.67 P
0 11 Q
-0.39 ( number. The information required for both conver-) 297.75 395.67 P
0.09 (sions should be found in the appropriate tables \050as presented in step 6\051. If they are not, we) 126 382.67 P
(make an explicit request for step 7 to happen.) 126 369.67 T
(12.) 108 345.67 T
-0.05 (A privileged user-space server typically issues a local query to the configuration server, to) 126 345.67 P
-0.17 (get a) 126 332.67 P
3 10 Q
-0.38 (norma_node_name) 149.45 332.67 P
0 11 Q
-0.17 ( translated to a) 239.4 332.67 P
6 10 Q
-0.38 (node_name) 305.84 332.67 P
0 11 Q
-0.17 (. Once name resolution has been per-) 359.81 332.67 P
-0.52 (formed, the user-space server forwards the remote query \050based upon) 126 319.67 P
6 10 Q
-1.14 (node_name) 427.97 319.67 P
0 11 Q
-0.52 (\051 through) 481.94 319.67 P
(the in-kernel protocol graph.) 126 306.67 T
(13.) 108 282.67 T
-0.59 (If the assumption at 1. becomes invalid, a RARP-like service complements the Hello World) 126 282.67 P
-0.47 (protocol \050to convert a full 48-bits) 126 269.67 P
3 10 Q
-1.02 (802.2) 272.1 269.67 P
0 11 Q
-0.47 ( number into a stack of addresses\051. The RARP-like) 302.08 269.67 P
1.44 (process is activated through a boot option. RARP-like queries are addressed to special) 126 256.67 P
1.47 (nodes within the computing domain \050\322master\323 servers\051; they must be issued on all the) 126 243.67 P
3 10 Q
(802.2) 126 230.67 T
0 11 Q
( configured in the system.) 155.98 230.67 T
-0.58 (Additional features of the configuration server and of the) 108 206.67 P
3 10 Q
-1.26 (cfg_server) 356.35 206.67 P
0 11 Q
-0.58 ( application offer the ca-) 416.31 206.67 P
0.24 (pability to evict a node from a computing domain. Later refinements include the support for a da-) 90 193.67 P
(tabase of nodes which are allowed to join the computing domain \050node ACLs\051.) 90 180.67 T
1 14 Q
(3.6 Network name server) 90 151.67 T
0 11 Q
-0.59 (This design aims to a network name service which is location-aware. Similarly to what has been) 108 132.67 P
-0.24 (done in the CMU\325s MachMessageServer and in the UofA\325s MachNetIPC [Or93], there will be per-) 90 119.67 P
0.23 (node name spaces visible to one another. Location information is explicitly passed to the network) 90 106.67 P
1.22 (name server \050NNS\051 through the standard interface) 90 93.67 P
3 10 Q
2.65 (netname_look_up\050\051) 320.91 93.67 P
0 11 Q
1.22 ( [Lo93a][Lo93b]. The) 422.86 93.67 P
FMENDPAGE
%%EndPage: "39" 40
%%Page: "40" 40
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(40) 486 46.67 T
90 72 522 720 R
7 X
V
3 10 Q
0 X
-0.64 (host_name) 90 712.67 P
0 11 Q
-0.29 (parameter matches the) 149.32 712.67 P
3 10 Q
-0.64 (norma_node_name) 250.03 712.67 P
0 11 Q
-0.29 (as defined in 3.5.) 345.33 712.67 P
3 10 Q
-0.64 (Norma_node_name) 422.27 712.67 P
0 11 Q
-0.29 ( is) 512.22 712.67 P
(translated to a) 90 699.67 T
3 10 Q
(node_name) 154.38 699.67 T
0 11 Q
( using the data maintained by the configuration software.) 208.35 699.67 T
0.26 (The NNS will be implemented as a user-space portion of the x-kernel protocol graph. As part) 108 680.67 P
-0.07 (of the MachNetIPC effort, UofA has already produced an x-kernel protocol that provide name ser-) 90 667.67 P
(vice: it will be our core technology as well.) 90 654.67 T
(There are three problems related to the use of UofA\325s network name server:) 108 635.67 T
(\245) 108 616.67 T
0.41 (It relies upon UNIX services. Thus, a UNIX personality as to be up and running before the) 117 616.67 P
-0.52 (NNS can be spawn. In more detail, the UNIX services are calls related to addresses resolution) 117 603.67 P
0.35 (\050like) 117 590.67 P
3 10 Q
0.76 (gethostbyname\050\051) 140.23 590.67 P
0 11 Q
0.35 (\051. Given that in our architecture address resolution is exploited by) 230.18 590.67 P
-0.65 (the configuration server, we must convert the UNIX calls into RPCs to the configuration serv-) 117 577.67 P
(er.) 117 564.67 T
(\245) 108 540.67 T
0.25 (It is bound to the rest of the MachNetIPC protocols. In other words, the NNS interacts with) 117 540.67 P
-0.21 (the inner protocols of MachNetIPC using a non-standard interface \050i.e. it is not MACH IPC\051.) 117 527.67 P
0.01 (We must evict the protocols that exploit name service from the rest of the MachNetIPC pro-) 117 514.67 P
0.69 (tocols \050in that remote IPC functionalities are already provided by the in-kernel Distributed) 117 501.67 P
(IPC subsystem\051.) 117 488.67 T
(\245) 108 464.67 T
-0.03 (For the NNS-to-NNS communication, it accesses communication services directly \050SPRITE) 117 464.67 P
-0.4 (RPC\051. We propose to use MACH IPC instead. The MACH IPC semantics may seem an over-) 117 451.67 P
0.27 (kill for this kind of traffic; however, the use of MACH IPC semantics let us take advantage) 117 438.67 P
0.41 (of the multiple failure domain support, namely the membership protocols \050to be introduced) 117 425.67 P
0.35 (in Section 4\051: for instance, the notification of the failure of an IPC connection is notified to) 117 412.67 P
0.01 (the NNS as soon as several nodes reach a majority consensus upon the failure of a node \050the) 117 399.67 P
(same for the availability of a new node\051.) 117 386.67 T
-0.35 (In Distributed IPC , the NNS port is considered as a special port: the microkernel is responsible) 108 362.67 P
-0.65 (for establishing an IPC connection between nodes, and for surfacing the send right to the application) 90 349.67 P
0.35 (that has requested it \050as the reply to a) 90 336.67 P
3 10 Q
0.77 (norma_get_nameserver_port\050\051) 259.46 336.67 P
0 11 Q
0.35 (call\051. We do not plan) 428.14 336.67 P
0.19 (on changing the handling of Distributed IPC special ports: this applies to MAX_SPECIAL_KER-) 90 323.67 P
0.04 (NEL_ID ports as well as MAX_SPECIAL_ID ports \050the NNS port is among the latter\051. The exist-) 90 310.67 P
0.78 (ence of a NNS should discourage the creation of MAX_SPECIAL_ID ports other than the NNS) 90 297.67 P
0.22 (port. Eventually, the NNS plans on receiving dead name notifications any time a send right to an-) 90 284.67 P
(other NNS becomes invalid.) 90 271.67 T
-0.11 (In the future, service location transparency will become an attractive goal. There are two alter-) 108 252.67 P
(natives to enhance the name server to provide location transparency:) 90 239.67 T
(\245) 108 220.67 T
-0.11 (Various instances of name servers compare and swap their databases. A bi-level hierarchy is) 117 220.67 P
(sufficient to minimize the traffic.) 117 207.67 T
(\245) 108 183.67 T
0.62 (Name servers will be transparently replicated, using the forthcoming notion of port groups) 117 183.67 P
0.25 (\050in practice, receive rights are mirrored\051. This alternative would not have any impact on the) 117 170.67 P
(name server protocol.) 117 157.67 T
0.36 (Once location transparency is available, the standard) 108 133.67 P
3 10 Q
0.79 (netname_look_up\050\051) 344.84 133.67 P
0 11 Q
0.36 ( interface will be) 446.78 133.67 P
(enhanced to accept wildcarded) 90 120.67 T
3 10 Q
(host_name) 227.89 120.67 T
0 11 Q
(s.) 281.86 120.67 T
0.06 (The network name server is not meant to be a time-critical component: a real-time application) 108 101.67 P
(is supposed to query the name server at startup time only.) 90 88.67 T
FMENDPAGE
%%EndPage: "40" 41
%%Page: "41" 41
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(41) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
(Standard name services \050e.g., CCITT X.500\051 are beyond the scope of this project.) 108 712.67 T
1 14 Q
(3.7 T) 90 683.67 T
(ime server) 120.07 683.67 T
0 11 Q
-0.16 (A real-time distributed system requires the abstraction of a clock which is totally available and) 108 664.67 P
0.11 (consistent within the computing domain. Such a clock may be used for event time stamps, and for) 90 651.67 P
-0.22 (scheduling time constraints, as well as for internal needs. This new clock abstraction represents the) 90 638.67 P
0.02 (adaptation of the OSF RI clock and timers framework [Te92] to a distributed environment. [Te92]) 90 625.67 P
0.09 (already supports the notion of multiple types of clock that are made available by the kernel; in ad-) 90 612.67 P
(dition, the interface to clocks supports a service-mode and a control-mode. This implies that:) 90 599.67 T
(\245) 108 580.67 T
-0.2 (Using [Te92], it is possible to implement a time server as a privileged user-space server. The) 117 580.67 P
(time server may read a type of clock and set another type of clock accordingly.) 117 567.67 T
(\245) 108 543.67 T
0.86 (The [Te92] interface will not be changed. To a real-time developer, the access to the new) 117 543.67 P
(clock abstraction is seamless.) 117 530.67 T
-0.25 (Quartz clock are known to be a stable and reliable technology \050MTBF ranges from tens to hun-) 108 506.67 P
0.55 (dreds of years\051. In a computing domain, however, the physical clock of every node tends to drift) 90 493.67 P
-0.46 (apart from one another. This behavior prompts for the creation of a per-node logical clock, that runs) 90 480.67 P
0.45 (at some offset from the local physical clock, and that is known to be within some bound of other) 90 467.67 P
0.15 (logical clocks. The time server is a distributed service instantiated on every node, with the goal of) 90 454.67 P
(providing such a logical clock.) 90 441.67 T
(Distributed time servers fall into three categories, depending on the mechanism used:) 108 422.67 T
(\245) 108 403.67 T
-0.5 (Network time servers. Some well know ones are the DCE time service \050DTS\051 and the Internet) 117 403.67 P
0.09 (NTP \050or the simplified version SNTP\051 time service and probably many others. The intent of) 117 390.67 P
0.95 (these protocols are to provide a global distribution of UTC \050Coordinated Universal Time\051) 117 377.67 P
0.31 (time across a wide variety of network topologies, all the while attempting to provide an ac-) 117 364.67 P
-0.58 (curacy sufficient for certain types of distributed computing activities. Accuracy is in the order) 117 351.67 P
(of tens to hundreds of milliseconds.) 117 338.67 T
(\245) 108 314.67 T
0.21 (Deterministic time servers. It is possible to demonstrate that no clock synchronization algo-) 117 314.67 P
-0.28 (rithm can guarantee with) 117 301.67 P
1 F
-0.28 (certainty) 228.18 301.67 P
0 F
-0.28 ( a skew between clocks that is smaller than some function) 270.28 301.67 P
0.89 (of maximum and minimum transmission delay of synchronization messages \050lower bound) 117 288.67 P
(only\051.) 117 275.67 T
(\245) 108 251.67 T
0.5 (Probabilistic time servers. It turns out that the deviation provided by the deterministic time) 117 251.67 P
-0.03 (servers is unsuitable for most of the real-time operations. To get an upper bound to the max-) 117 238.67 P
0.23 (imum deviation \050in the order of a millisecond, thus one or two order of magnitude less than) 117 225.67 P
0.36 (any algorithm above may deliver\051, it is accepted to achieve a probabilistic guarantee on the) 117 212.67 P
-0.45 (maximum deviation. In other words, the algorithm may fail to hold, sometimes, with a failure) 117 199.67 P
(probability that is known or has a known bound.) 117 186.67 T
0.1 (The latter category is the most attractive. In literature it is possible to find demonstrations that) 108 162.67 P
(prove the following two properties [Cr89][Ar91]:) 90 149.67 T
FMENDPAGE
%%EndPage: "41" 42
%%Page: "42" 42
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(42) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
2.71 (Flaviu Cristian has proposed a rather simple probabilistic clock synchronization schema) 108 593.33 P
-0.02 ([Cr89]. A node send a time query to a master time provider; the node measures the round trip time) 90 580.33 P
-0.29 (\0502D\051 of the query, using its local time. If T is the time measured at the master, the node can approx-) 90 567.33 P
-0.33 (imate the time at the master to be T+D \050it is the middle point of the interval [T+dmin, T+2D-dmin],) 90 554.33 P
0.06 (dmin being the minimum delay between nodes\051. Thus, the maximum error that the node can make) 90 541.33 P
0.44 (is E = D - dmin. If the maximum error specified is EMAX = U - dmin, the node repeats the time) 90 528.33 P
-0.11 (query until D <= U \050once the condition has been met, the node is said to have reached rapport with) 90 515.33 P
0.04 (the master\051. There is a formula which relates the maximum clock deviation to the maximum clock) 90 502.33 P
0.18 (drift specified by the vendor \050) 90 489.33 P
7 F
0.18 (r) 221.8 489.33 P
0 F
0.18 (\051, the clock units between two time queries \050W\051 and the number of) 227.83 489.33 P
(attempts allowed to reach rapport \050k\051:) 90 476.33 T
-0.61 (There is no guarantee that the a node can reach rapport with a master clock provider. In practice,) 108 423.33 P
0.26 (from the media specification and usage patterns it is possible to determine the probability p that a) 90 410.33 P
-0.09 (round trip does not complete in 2U. From p, the number of attempt k is related to the rapport prob-) 90 397.33 P
(ability R by the following relation:) 90 384.33 T
-0.38 (It is a specific objective of the time server not to use broadcast transmissions over Ethernet. We) 108 337.33 P
-0.05 (disagree with some literature [Ar91] that proposes to use master-initiated broadcasts, to reduce the) 90 324.33 P
-0.19 (traffic. In our experience, broadcast transmissions show pattern very peculiar, that do not represent) 90 311.33 P
(any of the standard behaviors to be found in a typical use of Ethernet.) 90 298.33 T
0.11 (It has been proven that the time server can tolerate omission failures and performance failures) 108 279.34 P
-0.29 (of the communication media \050even though the rapport probability may be affected\051. When multiple) 90 266.34 P
-0.35 (failure domains will be considered \050see section 4\051, master time server failures need to be addressed.) 90 253.34 P
0.54 (The configuration server is responsible for supporting the time server with the information about) 90 240.34 P
(the master time server\050s\051.) 90 227.34 T
-0.06 (The time server is implemented as a portion of x-kernel protocol graph that is executed in user) 108 208.34 P
0.13 (space. Similarly to the name server, the time server uses the communication facilities to exchange) 90 195.34 P
-0.23 (synchronization messages. Note that the time server is a real-time application by itself; as such, the) 90 182.34 P
(x-kernel shepherd threads have to take advantage of fixed-priority scheduling.) 90 169.34 T
1 14 Q
(3.8 Pr) 90 140.34 T
(edictability) 125.5 140.34 T
0 11 Q
0.39 (Although today we do not have maximum latency guarantees from the media, still we expect) 108 121.34 P
(our results to have a favorable distribution.) 90 108.34 T
138.21 88.14 108 88.14 2 L
V
0.54 H
0 Z
N
(T.B.D.) 108 89.34 T
90 72 522 720 C
172.8 608.67 439.2 709 C
0 11 Q
0 X
0 K
(t : | C \050 t \051 - C \050 t \051 | < DRIFT) 277.28 652.33 T
(E) 0 -180 223.95 658.33 TF
(A) 0 -180 275.95 658.33 TF
(:) 263.95 651.67 T
(DRIFT) 229.95 652.33 T
(p) 299.95 648.33 T
(q) 336.61 649 T
(X + \050 1 +) 271.95 621 T
7 F
(b) 315.16 621 T
0 F
( \051 t < C \050 t \051 < X + \050 1 +) 321.19 621 T
7 F
(b) 425.92 621 T
0 F
( \051 t) 431.95 621 T
(-1) 321.28 627.67 T
(E) 0 -180 223.95 628.33 TF
7 F
(b) 228.62 622.33 T
0 F
(p) 349.95 617 T
(:) 266.61 620.33 T
7 F
(,) 392.61 628.33 T
(,) 236.62 621.67 T
0 F
(X,) 242.11 621.67 T
(X) 255.95 621.67 T
(,) 264.61 627.67 T
(\0501\051) 190.8 652.67 T
(\0502\051) 190.8 621.67 T
(C) 216 683 T
(y) 223.33 678.33 T
(\050t\051 = Clock value at time t according to node y) 230 682.33 T
90 72 522 720 C
0 0 612 792 C
90 72 522 720 C
201.67 438.67 410.33 472.67 C
0 11 Q
0 X
0 K
(= U - min +) 285.33 454.33 T
7 F
(r) 340.14 454.33 T
0 F
( k \050 1 +) 346.18 454.33 T
7 F
(r) 380.75 454.33 T
0 F
( \051 W) 386.78 454.33 T
(DEV) 257.33 454.33 T
(\0503\051) 227.33 453.67 T
90 72 522 720 C
0 0 612 792 C
90 72 522 720 C
252.67 352.67 359.33 380.67 C
0 11 Q
0 X
0 K
(\050p\051) 301 363 T
(k) 317 368.33 T
(< R) 331 362.33 T
(\0504\051) 269.33 362.33 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "42" 43
%%Page: "43" 43
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:32 pm) 90 46.67 T
(43) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(3.9 Characterization) 90 710.67 T
0 11 Q
0.06 (A successful use of the same tools as in 2.12 will prove that MACH IPC has been extended to) 108 691.67 P
0.03 (the remote case in a seamless way. The sole addition to the tools will be the dialogue with the net-) 90 678.67 P
(work name server \050as opposed to the local name server\051.) 90 665.67 T
(The set of tools will also be used for latency tests.) 108 646.67 T
FMENDPAGE
%%EndPage: "43" 44
%%Page: "44" 44
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(44) 486 46.67 T
87.33 64 519.33 712 R
7 X
V
1 14 Q
0 X
(4. Remote IPC: fault isolation, fault management) 87.33 702.67 T
(4.1 Overview) 87.33 672.67 T
0 11 Q
-0.39 (Systems are said to be \322fault tolerant\323 if they either provide non-stop operation, or provide well) 105.33 653.67 P
-0.29 (defined behavior in the presence of component failures. One of the goals of Real-time Mach is pro-) 87.33 640.67 P
-0.11 (vide well defined behavior for distributed Mach abstractions in the presence of partial failures. We) 87.33 627.67 P
0.28 (constrain the problem by limiting these guarantees to the confines of a Mach networking domain.) 87.33 614.67 P
-0.05 (The collection of distributed, cooperating Mach kernels within which these guarantees are made is) 87.33 601.67 P
-0.15 (referred to, for historical reasons, as a NORMA domain \050uniquely defined by a) 87.33 588.67 P
3 10 Q
-0.32 (norma_domain_-) 435.38 588.67 P
(name) 87.33 575.67 T
0 11 Q
(\051.) 111.32 575.67 T
-0.27 (Both NORMA IPC Version 1 and Distributed IPC [La94] assume a single failure domain. This) 105.33 556.67 P
0.11 (is insufficient for our customers who cannot tolerate networks that fail if any node on the network) 87.33 543.67 P
0.24 (fails. The NetMsgServer is more robust in the face of failures but has architecturally induced cor-) 87.33 530.67 P
0.58 (rectness and performance problems. The user task architecture is expensive and reduces network) 87.33 517.67 P
0.53 (performance. The local enqueueing of messages limits the network transparency of certain Mach) 87.33 504.67 P
-0.49 (IPC semantics and more importantly reduces the strength of the reliability guarantees. It is also pos-) 87.33 491.67 P
0.32 (sible to lose message order when migrating receive rights. Our approach is to begin with the Dis-) 87.33 478.67 P
2.92 (tributed IPC code and the use the more robust protocols of the NetMsgServer where ever) 87.33 465.67 P
(appropriate. In this way we hope to take advantage of the best of both.) 87.33 452.67 T
0.37 (We introduce two fundamental changes to the Mach microkernel to address fault tolerance: a) 105.33 433.67 P
0.21 (definition of partial failures and the semantics of IPC in the presence of failures. Our treatment of) 87.33 420.67 P
0.76 (partial failures includes the introduction of the notion of \322node-liveness\323. This is needed to map) 87.33 407.67 P
(timing failures into crash failures.) 87.33 394.67 T
1 14 Q
(4.2 Partial Failur) 87.33 365.67 T
(es) 190.08 365.67 T
(4.2.1 Asynchr) 87.33 335.67 T
(onous networks) 169.09 335.67 T
0 11 Q
-0.16 (Though synchronous networks have properties that greatly simplify the creation of robust, dis-) 105.33 316.67 P
0.02 (tributed real-time applications, they do this by making simplifying assumptions and requiring spe-) 87.33 303.67 P
1.01 (cial hardware. Most commercial of the shelf network hardware, such as Ethernet, and software,) 87.33 290.67 P
-0.18 (including the Internet, is asynchronous. Therefore, we assume that the network interconnecting the) 87.33 277.67 P
-0.13 (NORMA domain is subject to message loss and unbounded delay, i.e., that it is asynchronous. The) 87.33 264.67 P
-0.63 (network is also assumed to have a very, very low probability of undetected message data corruption.) 87.33 251.67 P
0.26 (If the physical network is insufficiently reliable then a reliable network transport protocol layer is) 87.33 238.67 P
0.3 (assumed and has the responsibility for reducing the likelihood of data corruption to an acceptable) 87.33 225.67 P
(level.) 87.33 212.67 T
-0.29 (It has been shown by Fischer et al. [Fi86] that unlike synchronous networks, it is impossible on) 105.33 193.67 P
-0.02 (an asynchronous network to accurately differentiate between a failed processor and a slow proces-) 87.33 180.67 P
0.02 (sor, an inability to communicate \050partition\051, or just communication delays. This unfortunately also) 87.33 167.67 P
-0.45 (means that the processor group can not deterministically achieve consensus and a consistent system) 87.33 154.67 P
-0.29 (view in the presence of a single failure given unbounded communication delays. This is not a prob-) 87.33 141.67 P
0.1 (lem for today\325s Mach IPC which has no timing failure semantics except time-outs on message en-) 87.33 128.67 P
(queue operations.) 87.33 115.67 T
FMENDPAGE
%%EndPage: "44" 45
%%Page: "45" 45
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(45) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(4.2.2 T) 90 710.67 T
(iming Failur) 130.56 710.67 T
(es and \322Node-alive\323) 205.34 710.67 T
0 11 Q
1.37 (Real-time systems, however, have timing failures. To deal with the timeliness problems of) 108 691.67 P
0.18 (asynchronous systems we introduce the notion of node liveness and declare an upper bound to re-) 90 678.67 P
0.01 (sponse latencies. Nodes that fail to respond in time are treated as if they have crashed. This allows) 90 665.67 P
(us to mask timing failures as crash failures.) 90 652.67 T
-0.55 (Node failures are reliably detected with a hello world protocol used to identify failed processors) 108 633.67 P
-0.36 (when and if they reboot, a node group protocol that evicts nodes from the group based on their abil-) 90 620.67 P
0.26 (ity to meet the responsiveness requirements of the group or by means of an operator management) 90 607.67 P
0.75 (process which legislates, omnipotently, that a processor has failed. The node group protocol can) 90 594.67 P
0.57 (achieve liveness but at the loss of accuracy. A processor which has been declared to have failed,) 90 581.67 P
0.26 (due to an artificially imposed timing failure, doesn\325t mean that it has in fact actually failed. Other) 90 568.67 P
-0.45 (processors within the group may in fact, still be interacting with this processor which exhibited tim-) 90 555.67 P
0.18 (ing failures. To avoid inconsistency and the resulting loss of safety, the entire group must achieve) 90 542.67 P
1.3 (consensus that the processor has been declared dead and is no longer interoperating within the) 90 529.67 P
-0.51 (group. To prevent still further inconsistency due to the group being partitioned by a network failure,) 90 516.67 P
-0.42 (a simple quorum mechanism is proposed such that in the absence of majority consensus, processors) 90 503.67 P
(cease further group interactions.) 90 490.67 T
1 14 Q
(4.2.3 Connection T) 90 461.67 T
(ransitivity and Consistency) 201.69 461.67 T
0 11 Q
0.12 (Within a single failure domain, Mach IPC provides a consistent view of failures. As an exam-) 108 442.67 P
-0.1 (ple, if two tasks A and B hold send rights to a port owned by task C, both tasks A and B will either) 90 429.67 P
-0.2 (be able to send messages to the port or neither will be able to send messages to the port. The kernel) 90 416.67 P
-0.18 (will only fail to deliver a message if the port becomes dead and the kernel will report that failure to) 90 403.67 P
0.49 (all of the tasks holding send rights. Extending this behavior to a network where each task is on a) 90 390.67 P
(different node requires communication transitivity between all the nodes.) 90 377.67 T
-0.31 (Interconnected networks can have very complex and very dynamic topologies. Even within the) 108 358.67 P
0.85 (limited world of supercomputers and NORMA domains complex routing and gateway problems) 90 345.67 P
(can arise.) 90 332.67 T
0.08 (Though we believe these problems must be dealt with eventually we have chosen to defer any) 108 170.33 P
0.86 (but most simple of solutions. The current plan is to treat any loss of connection transitivity as a) 90 157.33 P
0.49 (crash. This is described in more detail in the detailed description of the node-alive \050census taker\051) 90 144.33 P
(protocol.) 90 131.33 T
90 72 522 720 C
151.67 185.67 460.33 310 C
163.47 271.33 189.78 280.33 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
163.47 253.33 189.78 262.33 R
7 X
V
0 X
N
202.94 253.33 229.26 262.33 R
7 X
V
0 X
N
202.94 271.33 229.26 280.33 R
7 X
V
0 X
N
176.62 271.33 176.62 262.33 2 L
N
216.1 271.33 216.1 262.33 2 L
N
153.33 266.33 245.44 266.33 2 L
N
155.18 242 457.33 242 2 L
N
155.18 294 457.33 294 2 L
N
176.62 280.67 176.62 294 2 L
N
215.61 241.33 215.61 252.67 2 L
N
365.22 271.33 391.54 280.33 R
7 X
V
0 X
N
365.22 253.33 391.54 262.33 R
7 X
V
0 X
N
404.7 253.33 431.02 262.33 R
7 X
V
0 X
N
404.7 271.33 431.02 280.33 R
7 X
V
0 X
N
378.38 271.33 378.38 262.33 2 L
N
417.86 271.33 417.86 262.33 2 L
N
351.09 266.33 443.2 266.33 2 L
N
378.38 280.67 378.38 294 2 L
N
417.37 241.33 417.37 252.67 2 L
N
8 8 Q
(node 2) 204 272.67 T
(node 1) 165.33 272.67 T
(node 3) 165.33 256 T
(node 4) 204 256 T
(node 8) 366 256 T
(node 9) 406 256 T
(node 7) 406 274 T
(node 6) 366.67 274 T
282.27 237.33 308.59 246.33 R
7 X
V
0 X
N
(node 5) 283.33 240 T
251.33 248 260.67 235.33 2 L
N
252 234.67 262 249.33 2 L
N
216 193.17 396 220.17 R
7 X
V
0 11 Q
0 X
(Figure 7. Example of complex topology) 225 203.17 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "45" 46
%%Page: "46" 46
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(46) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(4.3 Mach IPC Guarantees) 90 710.67 T
0 11 Q
0.09 (Mach currently provides rather strong failure consistency semantics to applications. Our goal is to) 90 691.67 P
0.42 (maintain those semantics in the presence of partial failures and timing failures with the least new) 90 678.67 P
(kernel functionality possible.) 90 665.67 T
(1.) 108 646.67 T
(In the absence of sender or receiver failure, MACH IPC messages are reliably delivered.) 126 646.67 T
(2.) 108 622.67 T
0.22 (The order of messages sent by a single thread to a single receive-right is preserved. Thus,) 126 622.67 P
-0.61 (if message N is delivered then it must be true that message N-1 has been or will be delivered) 126 609.67 P
(regardless of sender failures.) 126 596.67 T
(3.) 108 572.67 T
-0.54 (The failure of a task that is not the sender or the receiver cannot affect the reliability of mes-) 126 572.67 P
(sages sent from A to B.) 126 559.67 T
(4.) 108 535.67 T
(RPC delivery semantics are \322at most once\323.) 126 535.67 T
(5.) 108 511.67 T
(Port rights do not persist across task or port termination.) 126 511.67 T
(6.) 108 487.67 T
(A NORMA domain has connection transitivity.) 126 487.67 T
(7.) 108 463.67 T
(A NORMA domain has a consistent view of failures.) 126 463.67 T
(8.) 108 439.67 T
(All notifications are reliably delivered.) 126 439.67 T
(9.) 108 415.67 T
-0.35 (Return from msg_send\050\051 is a promise that the msg data has been moved to the destination\325s) 126 415.67 P
(failure domain.) 126 402.67 T
(10.) 108 378.67 T
(Other IPC semantics such as NO_MORE_SENDERS and queue limits are preserved.) 126 378.67 T
1 14 Q
(4.4 Initial implementation constraints) 90 349.67 T
0 11 Q
-0.39 (We do not intend to provide real-time end-to-end guarantees over the network at this time. This) 108 330.67 P
-0.53 (is an area of active distributed systems research which we hope to take advantage in the near future.) 90 317.67 P
-0.16 (We are not proposing, at this time, any mechanism which exposes transient failures to applica-) 108 298.67 P
(tions since these trade-offs are highly application dependent and alternatives are numerous.) 90 285.67 T
0.41 (The failure semantics of MACH ports will continue to be \322omission\323 failures that have crash) 108 266.67 P
0.28 (or fail-safe/fail-stop semantics rather than timing or arbitrary failures. To achieve these strong se-) 90 253.67 P
-0.1 (mantics, late responses can not be delivered because by definition, either the sender or the receiver) 90 240.67 P
(or both cease to exist. In reality, either the port or the send right is destroyed.) 90 227.67 T
(The reference platform will be a collection of Intel x86 boxes on an Ethernet.) 108 208.67 T
0.53 (One obvious constraint is that of scalability. If liveness is maintained on a per port basis and) 108 189.67 P
-0.25 (there are 100\325s to 1000\325s of ports per node and 1000\325s of nodes, the overhead of passing and agree-) 90 176.67 P
0.51 (ing on port right state becomes impractical. There may also be implicit dependency relationships) 90 163.67 P
-0.02 (such that if a port on a particular processor fails then other ports on that node fail as well. We con-) 90 150.67 P
-0.56 (strain the first implementation to only maintain liveness to the granularity of a Mach processor node) 90 137.67 P
(\050kernel instance\051.) 90 124.67 T
0.91 (The interconnecting topology between Mach nodes is assumed, as an initial implementation) 108 105.67 P
0.81 (constraint, to not include routing. Routing introduces the need for stronger liveness mechanisms) 90 92.67 P
FMENDPAGE
%%EndPage: "46" 47
%%Page: "47" 47
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(47) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.62 (which, for instance, ensure transitive connectivity. Mach assumes that transitivity is present in order) 90 712.67 P
(to provide consistent failure observation.) 90 699.67 T
1 14 Q
(4.5 Related work) 90 670.67 T
0 11 Q
-0.61 (Youcef Laribi at OSF RI Grenoble has explored some cases of fault isolation and fault tolerance) 108 651.67 P
(in MACH based clusters \050using NORMA IPC Version 1\051 [Lar94].) 90 638.67 T
-0.49 (The x-kernel team at University of Arizona has produced a set of protocols that implements Re-) 108 619.67 P
0.32 (mote IPC in user space: MachNetIPC [Or93]. Node-liveness is limited to a rebirth protocol \050\322I\325m) 90 606.67 P
-0.55 (seeing a new incarnation of this node, thus I can infer that this node has died before\323\051. The protocols) 90 593.67 P
-0.61 (for moving send right and receive rights are able to detect the rebirth of one or more parties involved) 90 580.67 P
-0.45 (in the distributed port right management \050resources are reclaimed too\051. Although we can not use the) 90 567.67 P
-0.1 (user-space MachNetIPC, for correctness and performance issues, their protocol work is relevant to) 90 554.67 P
(our project.) 90 541.67 T
1 14 Q
(4.6 Failur) 90 512.67 T
(e dependency graph) 148.05 512.67 T
0 11 Q
-0.6 (We start identifying all the agents involved in fault isolation: some of the agents come from sec-) 108 493.67 P
0.09 (tion 3, others are new to this design. Then, we relate the agents one another, through the \322depends) 90 480.67 P
-0.58 (on\323 relation. With the \322depends on\323 relation we mean the following: an agent S depends on an agent) 90 467.67 P
(T if S relies on the correctness of T\325s behavior to correctly provide its own service.) 90 454.67 T
FMENDPAGE
%%EndPage: "47" 48
%%Page: "48" 48
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(48) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.34 (If the set of all the \322depends on\323 relations \050graphically, arrows\051 generates a DAG) 108 712.67 P
0 9 Q
-0.28 (1) 459.91 717.07 P
0 11 Q
-0.34 (, the problem) 464.4 712.67 P
-0.27 (of fault isolation can be solved in our specific context. Figure 8 shows the agents, the \322depends on\323) 90 699.67 P
(relations and the DAG that comes out from the combination of the two.) 90 686.67 T
90 83 522 94.98 C
90 87.49 270 87.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
(1) 108 80.6 T
0 9 Q
(Directed Acyclic Graph.) 111.49 77 T
90 72 522 720 C
105.44 104.33 506.56 683 C
1 14 Q
0 X
0 K
(Application) 270.1 653 T
(Distributed) 312 418 T
(Reliable) 376.67 318.67 T
(T) 376.67 304.67 T
(ransport) 384.96 304.67 T
(Unr) 239.33 266 T
(eliable) 263.18 266 T
(Comm.) 241.33 252.67 T
(Membership) 282 376.67 T
(Node-liveness) 282 362.67 T
(Hardwar) 190.67 161.33 T
(e) 245.6 161.33 T
(Addr) 240.67 240 T
(ess) 272.29 240 T
(Resolution) 240.67 228.67 T
(/) 288.33 252.67 T
(Network Name) 117.67 609.33 T
(Server) 117.67 595.33 T
(Con\336guration) 116.33 444.67 T
(Server) 116.33 430.67 T
(T) 251.33 610 T
(ime) 260.41 610 T
(Server) 251.33 596 T
285.24 278.54 273.33 280 284.21 285.08 284.73 281.81 4 Y
V
400.67 300 284.73 281.8 2 L
1 H
2 Z
N
280.7 292.93 271.99 284.68 275.01 296.29 277.86 294.61 4 Y
V
316 360 277.86 294.6 2 L
N
(Clock &) 158 258 T
(T) 158.67 245.67 T
(imers) 167.75 245.67 T
229.32 180.86 218.66 175.34 224.77 185.67 227.05 183.26 4 Y
V
271.33 225.33 227.05 183.26 2 L
N
(IPC) 379.67 462.67 T
(RPC) 458.33 462.67 T
325.21 389.93 313.66 386.68 321.73 395.56 323.47 392.74 4 Y
V
358.33 414 323.48 392.73 2 L
N
371.18 435.8 360.32 430.68 366.82 440.77 369 438.28 4 Y
V
392.33 458.67 369.01 438.27 2 L
N
378.32 431.72 366.32 432.01 376.65 438.12 377.48 434.92 4 Y
V
473.67 459.33 377.5 434.91 2 L
N
(Resour) 429 418 T
(ces) 471.49 418 T
(A) 428.33 405.33 T
(vailable) 437.4 405.33 T
455.36 439.83 464.99 432.67 453.03 433.64 454.19 436.73 4 Y
V
393.67 459.33 454.2 436.73 2 L
N
471.57 442.9 464.33 433.34 465.4 445.29 468.49 444.1 4 Y
V
474.33 459.33 468.5 444.09 2 L
N
172.61 619.59 160.66 620.67 171.37 626.09 171.99 622.84 4 Y
V
305.33 648 172 622.83 2 L
N
279.77 623.87 268.66 619.34 275.68 629.07 277.72 626.47 4 Y
V
305.33 648 277.73 626.47 2 L
N
215.33 112.5 395.33 139.5 R
7 X
V
0 11 Q
0 X
(Figure 8. Failure dependency graph) 224.33 122.5 T
195.92 284.46 184.33 281.35 192.51 290.13 194.21 287.29 4 Y
V
316.33 360 194.22 287.28 2 L
N
458.33 488.98 466.66 480.34 455.02 483.26 456.68 486.12 4 Y
V
271.33 592.33 456.68 486.11 2 L
N
389.11 486.61 395.32 476.34 384.61 481.77 386.86 484.19 4 Y
V
271.33 591.67 386.88 484.18 2 L
N
273.97 297.87 270.67 286.33 267.36 297.87 270.67 297.87 4 Y
V
270.67 592.33 270.67 297.87 2 L
N
187.15 293.78 180.66 283.68 180.81 295.68 183.98 294.73 4 Y
V
270.67 592.33 183.98 294.71 2 L
N
448.45 483.61 457.99 476.34 446.04 477.45 447.24 480.53 4 Y
V
160.67 591.67 447.26 480.53 2 L
N
378.63 483.26 387.33 475 375.58 477.39 377.1 480.33 4 Y
V
161.33 591.67 377.1 480.33 2 L
N
399.87 486.01 402.66 474.34 394.11 482.75 396.99 484.38 4 Y
V
305.33 648.33 396.99 484.38 2 L
N
471.39 488.78 477.32 478.34 466.76 484.05 469.08 486.42 4 Y
V
305.33 648.33 469.1 486.41 2 L
N
164.64 467.2 161.33 455.67 158.03 467.2 161.33 467.2 4 Y
V
161.33 591.67 161.33 467.2 2 L
N
175.7 464.07 166 457.01 170.48 468.14 173.09 466.11 4 Y
V
270.67 592.33 173.09 466.1 2 L
N
301.95 394.25 311.99 387.68 299.99 387.93 300.97 391.09 4 Y
V
163.33 432.33 300.98 391.08 2 L
N
1 14 Q
(Local) 158.67 269 T
212.84 188.08 215.33 176.34 207 184.98 209.92 186.53 4 Y
V
182 239.67 209.92 186.52 2 L
N
397.37 339.2 399.32 327.35 391.39 336.37 394.38 337.78 4 Y
V
358.67 414 394.4 337.76 2 L
N
(IPC) 387.33 418 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "48" 49
%%Page: "49" 49
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(49) 486 46.67 T
89.33 72.67 521.33 720.67 R
7 X
V
1 14 Q
0 X
(4.7 The fault isolation ar) 89.33 711.33 T
(chitectur) 235.62 711.33 T
(e) 288.99 711.33 T
0 11 Q
-0.09 (To honor the \322depend on\323 relations of Figure 8, our architecture results to be the one of Figure) 107.33 692.33 P
(9:) 89.33 679.33 T
89.33 72.67 521.33 720.67 C
119.67 77.33 491 656.67 C
9 10 Q
0 X
0 K
(Group) 158.33 313 T
(Membership) 158.33 303 T
(XK-KKT) 246.67 314.33 T
154.67 278.33 217.67 332.33 R
0.5 H
0 Z
N
237.67 305.33 291.67 332.33 R
N
239.67 188 294.33 247.67 R
N
(Server) 158.33 293 T
(Con\336guration) 157.33 620 T
(Server) 157.33 610 T
148.33 602 229.33 638 R
N
150.87 152.69 139.33 156 150.87 159.31 150.87 156 4 Y
V
280.8 150.31 292.33 147 280.8 143.69 280.8 147 4 Y
V
150.87 156 184.33 156 175.33 147 280.8 147 4 L
N
268.64 163.53 265.33 152 262.03 163.53 265.33 163.53 4 Y
V
262.03 176.47 265.33 188 268.64 176.47 265.33 176.47 4 Y
V
265.33 163.53 265.33 176.47 2 L
N
184.33 323 184.33 602 2 L
2 Z
4 X
N
158.65 205 199.32 232.33 R
0 Z
0 X
N
(IPC) 257.24 536.84 T
238.33 503.67 292.33 566 R
N
268.64 478.54 265.33 467 262.03 478.54 265.33 478.54 4 Y
V
262.03 491.46 265.33 503 268.64 491.46 265.33 491.46 4 Y
V
265.33 478.54 265.33 491.46 2 L
N
268.31 578.2 265 566.67 261.69 578.2 265 578.2 4 Y
V
261.69 591.13 265 602.67 268.31 591.13 265 591.13 4 Y
V
265 578.2 265 591.13 2 L
N
400.33 278 460.33 332 R
N
(Sequencer) 406.18 303.97 T
388.87 308.6 400.32 305.01 388.71 301.98 388.79 305.29 4 Y
V
372.46 305.67 388.8 305.28 2 L
2 Z
N
310.33 278 373.33 332 R
0 Z
N
(T) 324.32 296.64 T
(aker) 329.68 296.64 T
(Census) 324 309.97 T
1 8 Q
(a\051 Census taker solicitation and join) 329.12 525.67 T
(b\051 Solicitation, Join, Fault suspects) 329.12 517.67 T
(c\051 Atomic Broadcasts, pos ACKs) 329.12 509.67 T
(d\051 Distributed IPC, KKT) 329.12 501.67 T
9 10 Q
(e) 190.46 345.67 T
1 8 Q
(e\051 add/delete node) 329.12 493.67 T
(f\051 quorum wait, node rev) 329.12 485.67 T
(only one sequencer) 399.79 347.67 T
(LAN\050s\051) 187.12 136.33 T
401.51 188.33 459.94 225.95 R
N
9 10 Q
(Fault) 407.22 210.47 T
(suspector) 407.22 200.47 T
(Hello) 164.33 221 T
1 8 Q
(per group with quorum) 399.79 339.67 T
155.67 369 465.67 368.33 2 L
1 H
2 Z
N
155.67 585 465.67 584.33 2 L
N
0 11 Q
(MACH API) 408.33 589 T
9 10 Q
(Comm.) 251 221 T
(Services) 249 209 T
208.54 216.36 197 219.67 208.54 222.97 208.54 219.67 4 Y
V
228.13 222.97 239.67 219.67 228.13 216.36 228.13 219.67 4 Y
V
208.54 219.67 228.13 219.67 2 L
0.5 H
0 Z
N
(a) 217 209.67 T
338.4 266.31 342.99 278.34 345.48 265.71 341.94 266.01 4 Y
V
307.12 217.45 295 219.01 306.1 224.11 306.61 220.78 4 Y
V
284 348 48 59.33 295 278.33 A
(b) 327.67 265.67 T
425.56 266.75 431.65 278.35 432.63 265.29 429.09 266.02 4 Y
V
306.36 210.5 294.33 213.68 306.22 217.36 306.3 213.93 4 Y
V
275 349 137.33 64.67 294.33 278.33 A
(c) 416.33 265.67 T
229.48 238.21 241 233.67 228.82 231.42 229.15 234.82 4 Y
V
186.83 266.26 188.33 278.34 193.46 267.3 190.14 266.78 4 Y
V
195 257 52.67 44.67 241 278.33 A
(c) 178.33 266.33 T
181.69 591.46 185 603 188.31 591.46 185 591.46 4 Y
4 X
V
185 332.33 185 591.46 2 L
2 Z
N
0 X
(f) 222.33 265 T
237.67 405 291.67 467.33 R
0 Z
N
(Distributed) 238.33 433 T
225.06 435.75 237.66 435.01 226.59 428.96 225.82 432.35 4 Y
4 X
V
2 Z
103 180 52.67 102 237.67 333 A
306.54 203.69 295 207 306.54 210.31 306.54 207 4 Y
0 X
V
402.33 207 306.54 207 2 L
N
(b) 311.67 195 T
0 11 Q
(Extended KKT Interface) 354.33 373.67 T
215.67 90.5 395.67 117.5 R
7 X
V
0 X
(Figure 9. Fault isolation architecture) 224.67 100.5 T
9 10 Q
(Extended) 242.67 441.67 T
(IPC) 255 421.67 T
(W) 163 210.33 T
(orld) 172.26 210.33 T
1 8 Q
(/) 276.67 536.33 T
9 10 Q
(RPC) 256.67 527 T
251.33 266.33 281.33 285.67 R
N
(BID) 259.33 273 T
260.69 394.13 264 405.67 267.31 394.13 264 394.13 4 Y
V
267.31 343.87 264 332.33 260.69 343.87 264 343.87 4 Y
V
264 394.13 264 343.87 2 L
0 Z
N
264.67 305.67 264.67 285.67 2 L
2 Z
N
265.33 266.33 265.33 247.67 2 L
N
236.4 276.39 251.33 271.67 236.17 267.76 236.28 272.08 4 Y
4 X
V
180 250 44 6.67 251.33 278.33 A
89.33 72.67 521.33 720.67 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "49" 50
%%Page: "50" 50
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(50) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(4.8 Data type de\336nitions) 90 710.67 T
0 11 Q
0.31 (We introduce a new data type, the) 108 691.67 P
3 10 Q
0.69 (instance) 262.74 691.67 P
0 11 Q
0.31 (.The) 310.72 691.67 P
3 10 Q
0.69 (instance) 333.61 691.67 P
0 11 Q
0.31 ( is meant to provide uniqueness) 381.58 691.67 P
-0.29 (to other identifiers, in the presence of node reboots. The) 90 678.67 P
3 10 Q
-0.64 (instance) 336.04 678.67 P
0 11 Q
-0.29 ( of a node typically comes from) 384.01 678.67 P
-0.15 (reading the local clock, when the node is booted: the local clock is supposed to model a monotonic) 90 665.67 P
(counter. Thus,) 90 652.67 T
3 10 Q
(instance) 155.91 652.67 T
0 11 Q
(is defined to be:) 209.88 652.67 T
3 10 Q
(typedef) 108 634.33 T
(time_value_t) 162 634.33 T
(instance;) 270 634.33 T
0 11 Q
0.11 (The) 108 600.67 P
3 10 Q
0.23 (instance) 127.94 600.67 P
0 11 Q
0.11 (s of other nodes are solicited and collected through the protocols introduced in) 175.91 600.67 P
(the following chapters.) 90 587.67 T
1.04 (We need to complement) 108 568.67 P
3 10 Q
2.28 (node_name) 222.02 568.67 P
0 11 Q
1.04 ( with a new node identifier: the new node identifier is) 275.99 568.67 P
0.09 (meant to be unique in the lifetime of a computing domain. It is called) 90 555.67 P
3 10 Q
0.2 (precise_node_name) 398.6 555.67 P
0 11 Q
0.09 (, and) 500.55 555.67 P
(it is defined to be:) 90 542.67 T
3 10 Q
(typedef struct {) 108 524.33 T
(node_name) 162 512.33 T
(origin;) 270 512.33 T
(instance) 162 500.33 T
( incarnation;) 266 500.33 T
(} precise_node_name;) 108 488.33 T
0 11 Q
0.61 (In our new addressing model, the 32-bit standard) 108 461.67 P
3 10 Q
1.33 (node_name) 331.04 461.67 P
0 11 Q
0.61 ( is used any time we address a) 385.01 461.67 P
-0.44 (node without any temporal connotation: for instance, the configuration server uses invariant node_-) 90 448.67 P
0.09 (names to maintain RARP-like table. The KKT interface still uses) 90 435.67 P
3 10 Q
0.19 (a node_name) 379.84 435.67 P
0 11 Q
0.09 ( to specify an ad-) 445.99 435.67 P
(dress to be consumed by the protocol services.) 90 422.67 T
0.56 (Conversely,) 108 403.67 P
3 10 Q
1.22 (precise_node_name) 164.1 403.67 P
0 11 Q
0.56 (is used) 273.26 403.67 P
0.56 (to build other identifiers that need to be unique) 311.25 403.67 P
-0.17 (during the lifetime of the computing domain. An example is the UID. Distributed IPC uses a 64 bit) 90 390.67 P
-0.46 (UID as a port identifier: it consist of a 32-bit node identifier \050) 90 377.67 P
3 10 Q
-1 (node_name) 354.23 377.67 P
0 11 Q
-0.46 (\051 and of a 32-bit port iden-) 408.2 377.67 P
0.21 (tifier \050) 90 364.67 P
3 10 Q
0.46 (port_id) 117.97 364.67 P
0 11 Q
0.21 (\051. We require the UID to be unique in the presence of node reboots) 159.95 364.67 P
0 9 Q
0.17 (2) 456.17 369.07 P
0 11 Q
0.21 (. Thus, we re-) 460.66 364.67 P
(define it as follows:) 90 351.67 T
3 10 Q
(typedef struct uid {) 108 333.33 T
(precise_node_name) 162 321.33 T
(name;) 270 321.33 T
(/* unique constructor */) 323.97 321.33 T
(port_id) 162 309.33 T
(identif) 270 309.33 T
(ier;) 311.98 309.33 T
(/* node-relative id */) 335.96 309.33 T
(} uid_t;) 108 297.33 T
0 11 Q
0.19 (The use of a 128-bit UID imposes changes to the network representation of messages \050expan-) 108 282.67 P
(sion of) 90 269.67 T
3 10 Q
(mach_port_t) 122.96 269.67 T
0 11 Q
(s\051.) 188.92 269.67 T
1 14 Q
(4.9 Gr) 90 240.67 T
(oup membership) 127.83 240.67 T
0 11 Q
0.58 (A NORMA domain has strong group membership requirements. This is necessary so that all) 108 221.67 P
-0.29 (nodes within the group have a consistent view of failures. This strong consistency ensures coherent) 90 208.67 P
-0.15 (distributed system and application state. Given strong group consistency, failure compensation op-) 90 195.67 P
(eratons, garbage collection and lock reclamation can safely occur.) 90 182.67 T
-0.26 (While there are numerous mechanisms to implementing group membership protocols, we have) 108 163.67 P
-0.03 (chosen an asymmetric, centralized approach similar to that explored by [Ri93]. The initial motiva-) 90 150.67 P
-0.12 (tion was that the number of messages are O\050n\051 rather than O\050n) 90 137.67 P
0 9 Q
-0.1 (2) 362.92 142.07 P
0 11 Q
-0.12 (\051, and the two assumptions that this) 367.41 137.67 P
-0.07 (approach would have 1\051 lower consensus latencies and 2\051 a simpler implementation. To isolate the) 90 124.67 P
90 105 522 116.98 C
90 109.49 270 109.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
-0.18 (2) 108 102.6 P
0 9 Q
-0.23 (Consider the following example: node A boots, creates a receive right and moves the receive right to node B \050UIDs) 111.49 99 P
0.17 (are preserved while moving receive right\051. Later, node A reboots, creates a receive right \050same UID!\051 and tries to move) 90 88 P
(it again to another node.) 90 77 T
FMENDPAGE
%%EndPage: "50" 51
%%Page: "51" 51
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(51) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.64 (group membership, maintenance mechanism, we define a membership server and a) 90 712.67 P
2 F
-0.64 (hello world pro-) 451.25 712.67 P
-0.11 (tocol) 90 699.67 P
0 F
-0.11 (on each node. These two entities form the basic interface between mechanism dependent and) 114.61 699.67 P
(mechanism independent portions of the membership service.) 90 686.67 T
0.02 (In the first implementation, we use a centralized census taker to process group join and failure) 108 667.67 P
0.63 (requests. The census taker, in conjunction with a group atomic broadcast facility, dubbed the) 90 654.67 P
2 F
0.63 (se-) 509.19 654.67 P
0.77 (quencer) 90 641.67 P
0 F
0.77 (, reliably distribute knowledge of the group population, naming, etc. The census taker is) 125.39 641.67 P
-0.09 (also used to detect when a simple majority quorum is present. This is necessary when communica-) 90 628.67 P
-0.13 (tion network partitions might otherwise permit duplicate, independent, and ambiguously identified) 90 615.67 P
(groups.) 90 602.67 T
0.51 (One of the costs of not have O\050n) 108 583.67 P
0 9 Q
0.42 (2) 254.67 588.07 P
0 11 Q
0.51 (\051 node liveness messages tracing all possible paths through) 259.16 583.67 P
0.03 (the interconnecting mesh is that transitivity might not be present. This is detected with failure sus-) 90 570.67 P
-0.52 (pectors local to each node in the group. The failure suspicions are communicated to the census taker) 90 557.67 P
(which in turn determines whether and which nodes should be removed from the group.) 90 544.67 T
-0.09 (Two additional costs associated with the designated census taker node approach, is the need to) 108 525.67 P
0.51 (elect a new census taker as a result of census taker node failure and the requirement for a census) 90 512.67 P
(taker to cede to another when two partitions merge.) 90 499.67 T
1 14 Q
(4.9.1 Gr) 90 470.67 T
(oup membership characteristics) 138.33 470.67 T
0 11 Q
(As defined by [Bi93], failure reporting mechanisms are:) 108 451.67 T
(\245) 108 432.67 T
2 F
(Accurate) 117 432.67 T
0 F
(, if only real failures are reported,) 156.66 432.67 T
(\245) 108 408.67 T
2 F
(Live) 117 408.67 T
0 F
(, if failure reports are bounded in time, and) 135.92 408.67 T
(\245) 108 384.67 T
2 F
(Safe) 117 384.67 T
0 F
(, if all members of the group agree at some time on the failure state.) 135.92 384.67 T
(We further add the completeness property defined by [Ch91]. A fault detector is:) 90 360.67 T
(\245) 108 341.67 T
2 F
(Complete) 117 341.67 T
0 F
(, if every failed node is eventually detected as failed.) 159.11 341.67 T
-0.47 (Unlike existing attempts to provide safe and accurate group membership views within a distrib-) 108 317.67 P
0.3 (uted MACH implementation [Or93], we are specifically introducing the notion of group liveness.) 90 304.67 P
-0.38 (This is necessary to accommodate real-time processes whose execution and state span nodes. How-) 90 291.67 P
0.18 (ever, we do so at the expense of accuracy in the presence of asynchronous network and node exe-) 90 278.67 P
1.22 (cution characteristics. Safety is required if existing Mach message delivery semantics are to be) 90 265.67 P
(preserved.) 90 252.67 T
0.14 (The degree of inaccuracy tolerable is a trade-off between how responsive the failure detectors) 108 233.67 P
-0.27 (are and the cost to the application of an inaccurate suspicion. In our first implementation, this time-) 90 220.67 P
0.08 (out value is global to the group and omnipotently specified. This is clearly insufficient and further) 90 207.67 P
-0.43 (investigation will be needed in terms of both adaptability and the scope of the liveness specification) 90 194.67 P
(\050e.g.: group, node, port, etc.\051.) 90 181.67 T
1 14 Q
(4.9.2 Node failur) 90 152.67 T
(e characteristics) 189.25 152.67 T
0 11 Q
-0.46 (In the first implementation, nodes within the operating domain will have crash, fail stop seman-) 108 133.67 P
-0.13 (tics. In particular, this means that when a node is removed from the group, it must minimally, have) 90 120.67 P
-0.21 (no further group activities. It may, if coupled by state maintained external to the group, be required) 90 107.67 P
-0.1 (to reliably stop. This is particularly true of distributed real-time process control applications where) 90 94.67 P
(the external state is the external \322controlled process\323.) 90 81.67 T
FMENDPAGE
%%EndPage: "51" 52
%%Page: "52" 52
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(52) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
0.66 (Nodes within the group may not interact with nodes outside of the group in order to prevent) 108 712.67 P
0.58 (inconsistencies. Note that this restriction does not apply to loosely coupled network communica-) 90 699.67 P
(tions between independent nodes.) 90 686.67 T
-0.23 (Further investigations will explore less restrictive node failure semantics and more sophisticat-) 108 667.67 P
(ed group merge strategies.) 90 654.67 T
1 12 Q
(4.10 Membership mechanism overview) 90 627 T
0 11 Q
0.65 (Referring to the Figure 9, the following table briefly describes each component and the high) 108 608.67 P
(level interaction between components:) 90 595.67 T
0 12 Q
(Component) 116.01 545 T
(Description) 314.02 545 T
0 11 Q
(Hello W) 116.82 521.67 T
(orld) 153.48 521.67 T
(This process determines the) 213 521.67 T
3 10 Q
( precise_node_name) 335.36 521.67 T
0 11 Q
( and) 443.3 521.67 T
(addressing \050the entire address stack de\336ned in Figure 6\051) 213 508.67 T
(from the con\336guration server) 213 495.67 T
(, if known a priori. Else, a) 341.01 495.67 T
(RARP like process is used to determine the node\325) 213 482.67 T
(s) 430.88 482.67 T
2 F
(node_-) 437.9 482.67 T
(name) 213 469.67 T
0 F
( identity given its 48 bit hardware identity) 236.8 469.67 T
(. The) 420.71 469.67 T
3 10 Q
(pre-) 446.03 469.67 T
(cise_node_name) 213 456.67 T
0 11 Q
( is subsequently computed.) 296.95 456.67 T
-0.29 (Using the) 213 430.67 P
3 10 Q
-0.62 (precise_node_name) 257.59 430.67 P
0 11 Q
-0.29 ( identity information, the) 359.54 430.67 P
-0.25 (census taker associated with the node\325) 213 417.67 P
-0.25 (s domain is solicited) 379.24 417.67 P
(and an attempt is made to join the group.) 213 404.67 T
(In the single failure domain con\336guration, there is no cen-) 213 378.67 T
(sus taker) 213 365.67 T
(. The hello world process advertises the node\325) 251.15 365.67 T
(s) 452.52 365.67 T
(existence and listens for other node advertisements. The) 213 352.67 T
-0.14 (hello world process may also be polled by hello world pro-) 213 339.67 P
(cesses on other nodes.) 213 326.67 T
(Census T) 114.33 292.67 T
(aker) 154.76 292.67 T
(This process maintains a consistent group membership) 213 292.67 T
(view and, by means of the sequencer) 213 279.67 T
(, reliably distributes) 374.57 279.67 T
(this state to the group. It also maintains group liveness,) 213 266.67 T
-0.28 (handles amnesia group joins, and the census-taker election) 213 253.67 P
(and failover protocol.) 213 240.67 T
(Failure suspicions are also reported to the census taker by) 213 214.67 T
(the membership servers. Suspicions are then processed) 213 201.67 T
(and the group view is updated.) 213 188.67 T
90 560.75 90 181.25 2 L
V
0.5 H
0 Z
N
198 561.25 198 180.75 2 L
V
N
486 560.75 486 181.25 2 L
V
N
89.75 561 486.25 561 2 L
V
N
90.25 536.25 485.75 536.25 2 L
V
N
90.25 533.75 485.75 533.75 2 L
V
N
89.75 306 486.25 306 2 L
V
N
89.75 181 486.25 181 2 L
V
N
FMENDPAGE
%%EndPage: "52" 53
%%Page: "53" 53
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(53) 486 46.67 T
90 72 522 720 R
7 X
V
1 12 Q
0 X
(4.11 The Hello World process) 90 265 T
0 11 Q
0.1 (The hello world process first determines the node\325s precise_node_name identity. Usually, this) 108 246.67 P
-0.18 (information is provided by the configuration server, however we make provision for implementing) 90 233.67 P
-0.03 (an RARP like process which would solicit the node and group identity. Details of this optional ex-) 90 220.67 P
(tension are TBS.) 90 207.67 T
-0.31 (Once the hello world process has determined the group to which the node should join, the hello) 108 188.67 P
1.22 (world process solicits the group\325s census taker. This is accomplished by periodically sending a) 90 175.67 P
0.05 (broadcast message, over some specified period of time \322solicit_period\323. The message contains the) 90 162.67 P
3 10 Q
(precise_node_name) 90 149.67 T
0 11 Q
( and addressing information in addition to the group name.) 191.94 149.67 T
-0.57 (Upon expiry of \322solicit_period\323 without a response from the census taker, the local census taker) 108 130.67 P
-0.41 (is started and an election process is begun. If a response was received from the current census taker,) 90 117.67 P
0.36 (it will either reject or accept the join request. The acceptance message contains a summary of the) 90 104.67 P
-0.57 (current group population and the group\325s current sequence number. This message must be acknowl-) 90 91.67 P
-0.35 (edged by the hello world process after initializing the group sequence number used by the member-) 90 78.67 P
(Membership) 116.23 680.67 T
(server) 130.58 667.67 T
(This server) 213 680.67 T
(, resident on each node in the group, is used by) 261.68 680.67 T
-0.09 (the census taker to reliably detect the presence of the node) 213 667.67 P
(and to pass it group population knowledge.) 213 654.67 T
(The membership server updates group membership and) 213 628.67 T
(NORMA addressing information by calling the con\336gura-) 213 615.67 T
(tion server) 213 602.67 T
(, Distributed IPC, the communication protocols) 259.24 602.67 T
(and the address resolution tables.) 213 589.67 T
(The membership server is also used to report failure suspi-) 213 563.67 T
(cions to the census taker) 213 550.67 T
(.) 319.8 550.67 T
(Sequencer) 121.12 529.67 T
(The sequencer reliably delivers messages to the current) 213 529.67 T
-0.01 (group by means of an atomic broadcast protocol. This pro-) 213 516.67 P
(tocol is initially implemented as a set of positively) 213 503.67 T
(acknowledged point to point messages sharing a single) 213 490.67 T
(group wide sequence.) 213 477.67 T
-0.19 (Upon delivery timer expiry) 213 451.67 P
-0.19 (, the sequencer reports delivery) 331.62 451.67 P
(failures to census taker) 213 438.67 T
(.) 313.38 438.67 T
(Fault suspector) 110.58 417.67 T
(This process is present on every node and it collects fault) 213 417.67 T
(suspicions from various sources including XK-KKT and) 213 404.67 T
(comm. interfaces used by XK-KKT) 213 391.67 T
(.) 369.31 391.67 T
(Boot Identi\336er) 111.81 357.67 T
(\050BID\051) 130.88 344.67 T
-0.24 (This process \336lters KKT traf) 213 357.67 P
-0.24 (\336c which originates from or it) 338.17 357.67 P
(is destined to a node which is not in the group. T) 213 344.67 T
(raf) 426.84 344.67 T
(\336c is) 438.83 344.67 T
(also \336ltered if majority quorum is not present.) 213 331.67 T
-0.32 (The local Group Membership Server causes BID to update) 213 305.67 P
(the \336lter) 213 292.67 T
(\325) 250.33 292.67 T
(s node database appropriately) 253.39 292.67 T
(.) 382.95 292.67 T
0 12 Q
(Component) 116.01 704 T
(Description) 314.02 704 T
90 719.75 90 285.25 2 L
V
0.5 H
0 Z
N
198 720.25 198 284.75 2 L
V
N
486 719.75 486 285.25 2 L
V
N
89.75 720 486.25 720 2 L
V
N
90.25 695.25 485.75 695.25 2 L
V
N
90.25 692.75 485.75 692.75 2 L
V
N
89.75 543 486.25 543 2 L
V
N
89.75 431 486.25 431 2 L
V
N
89.75 371 486.25 371 2 L
V
N
89.75 285 486.25 285 2 L
V
N
FMENDPAGE
%%EndPage: "53" 54
%%Page: "54" 54
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(54) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
1.58 (ship server to acknowledge the sequencer. The node will complete the group join and will be) 90 712.67 P
-0.11 (capable of group communication when the census taker updates the group, including the new node) 90 699.67 P
(now, with the update census containing the new node.) 90 686.67 T
1 12 Q
(4.12 Sequencer/Census Taker) 90 306.67 T
0 11 Q
1.32 (In the first implementation, there is one and only one census taker given a non partitioned) 108 288.33 P
-0.07 (group. Associated with every active census taker, a group distribution mechanism is present. A se-) 90 275.33 P
(quencer is used to provide group atomic broadcast services.) 90 262.33 T
0.03 (Not all nodes need to have the ability to host the census taker but doing so, simplifies the con-) 108 243.33 P
0.38 (figuration rules. The census taker starts at the point in time in which the identity of the host node) 90 230.33 P
0.66 (becomes known. This is made known to the census taker when the hello world process runs and) 90 217.33 P
-0.68 (begins its solicitation broadcast phase. Before, a census taker can become active, an election process) 90 204.33 P
0.36 (must occur. The protocol used is conceptually the same as the protocol used to elect a designated) 90 191.33 P
0.61 (root bridge in the IEEE 802.1d protocol. While in the \322inactive\323 state, each census taker process) 90 178.33 P
0.93 (continuously monitors the liveness state of the current designated census taker. This monitoring) 90 165.33 P
0.02 (process also tracks the global state needed to fail-over the sequencer. This is most notably the \322se-) 90 152.33 P
(quence number\323.) 90 139.33 T
0.18 (While active, the census taker performs four actions. It maintains group liveness and majority) 108 120.33 P
0.89 (quorum state by ensuring periodic group communications via the sequencer. It processes failure) 90 107.33 P
0.44 (suspicions reported through each membership server and by the sequencer and updates the group) 90 94.33 P
(membership. It handles group join requests and as needed participates in the election process.) 90 81.33 T
90 72 522 720 C
102.94 330.67 509.06 664 C
195.88 563.64 201.93 574 202.29 562.01 199.08 562.83 4 Y
0 X
0 K
V
174.94 466 199.08 562.82 2 L
0.5 H
2 Z
N
222.27 477.78 219.93 466.01 215.68 477.23 218.97 477.51 4 Y
V
210.94 574 218.98 477.49 2 L
N
249.88 563.64 255.93 574 256.29 562.01 253.08 562.83 4 Y
V
228.94 466 253.08 562.82 2 L
N
283.28 550 282.93 538 276.87 548.36 280.08 549.18 4 Y
V
273.94 574 280.08 549.18 2 L
N
284.78 513.86 282.93 502 278.21 513.04 281.49 513.45 4 Y
V
281.5 513.45 273.94 574 2 L
N
285.26 477.78 282.93 466.01 278.67 477.23 281.97 477.51 4 Y
V
281.98 477.49 273.94 574 2 L
N
285.87 563.64 291.93 574 292.28 562.01 289.08 562.83 4 Y
V
289.08 562.82 282.94 538 2 L
N
294.87 563.64 300.93 574 301.28 562.01 298.08 562.83 4 Y
V
298.08 562.82 282.94 502 2 L
N
303.87 563.64 309.93 574 310.28 562.01 307.08 562.83 4 Y
V
307.08 562.82 282.94 466 2 L
N
0 11 Q
(solicit) 147.94 448 T
(accept) 192.94 602.51 T
(join, send) 192.94 591.51 T
(summary) 192.94 580.51 T
174.94 574 462.94 574 2 L
N
(acknowledge) 210.94 448 T
(summary) 210.94 437 T
(group broadcast) 273.94 593.51 T
(add member) 273.94 582.51 T
(census taker) 417.94 566.51 T
(group member 1) 408.32 530.51 T
(group member 2) 408.32 494.51 T
(new group member) 404.51 459.38 T
174.94 537 462.94 537 2 L
N
174.94 502 462.94 502 2 L
N
174.94 466 462.94 466 2 L
N
(T) 192.94 403 T
227.07 408.31 238.6 405 227.07 401.69 227.07 405 4 Y
V
211.6 405 227.07 405 2 L
N
216 355.17 396 382.17 R
7 X
V
0 X
(Figure 10. Join mechanism) 225 365.17 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "54" 55
%%Page: "55" 55
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(55) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(4.12.1 Census taker selection and election) 90 710.67 T
0 11 Q
-0.29 (In response to this solicitation, any active census taker associated with the group responds. The) 108 691.67 P
0.18 (response contains information needed to complete the join process. This includes the specific net-) 90 678.67 P
-0.44 (work address of the sequencer, the current group population being maintained by the sequencer, the) 90 665.67 P
0.02 (management specified quorum value, the priority of the sequencer and the 802.2 address used as a) 90 652.67 P
-0.27 (tiebreaker. Since it is possible that multiple census takers respond, obstensibly due to some form of) 90 639.67 P
(partitioning, the next step in the process is to uniquely elect a census taker.) 90 626.67 T
0.1 (Once the election process begins, every potential census taker broadcasts its presence periodi-) 108 607.67 P
-0.54 (cally for a constant time period. During this period, each census taker compares its priority with that) 90 594.67 P
-0.49 (of each received message. The effective priority is constructed from the number of live group mem-) 90 581.67 P
0.34 (bers, a management specified priority, and the 802.2 identity of the census taker\325s node. The first) 90 568.67 P
-0.31 (criteria is that the census taker with the most live members \322wins\323. After that the priority and 802.2) 90 555.67 P
(address is checked.) 90 542.67 T
-0.22 (Given that one or more sequencer responded within the solicit_period time, an attempt is made) 108 523.67 P
-0.61 (to join with the highest priority census taker. This is effected by acknowledging the appropriate cen-) 90 510.67 P
-0.04 (sus taker. Note that by definition if more than one census taker has achieved quorum then the quo-) 90 497.67 P
(rum value has been misconfigured and inconsistency is possible. This is most undesirable.) 90 484.67 T
1 14 Q
(4.12.2 Join) 90 455.67 T
0 11 Q
1.11 (The process of joining a NORMA domain begins when the hello world process solicits the) 108 436.67 P
0.02 (group census taker. The solicitation message identifies the candidate group member in terms of its) 90 423.67 P
0.77 (name and addressing. Depending on what join constraints are present, such as authentication re-) 90 410.67 P
0.04 (quirements, the census taker determines whether to accept the request to join the group. It also en-) 90 397.67 P
-0.11 (sures that no name or address collisions would result from accepting the join request. For instance,) 90 384.67 P
(a join is rejected if the node\325s) 90 371.67 T
3 10 Q
(precise_node_name) 222.73 371.67 T
0 11 Q
( has been previously seen by the group.) 324.67 371.67 T
0.49 (If the census taker accepts the join request, the candidate group member will be sent a group) 108 352.67 P
-0.24 (summary state message. Receipt acknowledgment of the summary message is then sent back to the) 90 339.67 P
0.15 (census taker. At this point, the candidate node will be sent atomic group messages from the group) 90 326.67 P
0.15 (sequencer. The candidate will become a group member only when announced by the sequencer to) 90 313.67 P
(the entire group.) 90 300.67 T
-0.65 (The initial join process is then completed by adding the current census to the configuration serv-) 108 281.67 P
0.09 (er and checking if majority quorum is present upon the next broadcast from the sequencer. If quo-) 90 268.67 P
-0.64 (rum is present, then the BID filter is set to enable group \050aka KKT/Distributed IPC\051 communication.) 90 255.67 P
(Otherwise, group communication remains disabled.) 90 242.67 T
-0.61 (If for some reason, the sequencer did not receive an acknowledgment from the new joined node,) 108 223.67 P
0.7 (of the complete census report, the sequencer suspects that the new node is faulty and removes it) 90 210.67 P
(from the next incremental census report periodically atomically broadcast.) 90 197.67 T
0.4 (It is possible, and necessary, for two or more group partitions to join given that the partitions) 108 178.67 P
-0.37 (have been historically mutually exclusive and unaware of each other. The group partition repair be-) 90 165.67 P
0.57 (gins when one or more of the census takers become aware of each other. At that point, an active) 90 152.67 P
0.19 (election process, associated with each census taker, chooses a new designated group census taker.) 90 139.67 P
-0.56 (The actual merging of the group occurs when the \322no longer active\323 census takers \322cede\323 to the new) 90 126.67 P
-0.4 (designated census taker. This succession protocol consists of the ceding census taker requesting, on) 90 113.67 P
-0.1 (behalf of each of it\325s members, group membership. The summary state message from the new des-) 90 100.67 P
FMENDPAGE
%%EndPage: "55" 56
%%Page: "56" 56
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(56) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.28 (ignated census taker is then used to bring every member of the old partition up to date with the new) 90 712.67 P
(group state.) 90 699.67 T
1 14 Q
(4.12.3 Maintaining liveness) 90 670.67 T
0 11 Q
0 (On going liveness is maintained by the census taker and the membership servers on each node) 108 651.67 P
0.1 (in the group by means of periodic group atomic broadcasts. Each broadcast is positively acknowl-) 90 638.67 P
0.11 (edged. If a node to which the broadcast was directed has not responded in some time d, where d <) 90 625.67 P
-0.59 (node liveness period-worst case round trip time, the sequencer retransmits the broadcast to all nodes) 90 612.67 P
0.28 (which have not acknowledged. If a node has not acknowledged the broadcast by the beginning of) 90 599.67 P
(the next liveness period, the census taker removes it from the current population.) 90 586.67 T
-0.53 ( When incremental census reports are processed by each node in the group, nodes are added and) 108 567.67 P
-0.59 (removed from the configuration servers database. In addition, an incarnation is associated with each) 90 554.67 P
-0.06 (node in the group which is managed by the census taker/ sequencer. To ensure that further interac-) 90 541.67 P
0.25 (tions and communications with a node which has been determined, possibly erroneously so, to be) 90 528.67 P
0.42 (dead and for which state consensus has been reached, Mach messages containing the precise_no-) 90 515.67 P
-0.32 (de_name identifier are discarded. This is also true of any UID and port right associated with the ex-) 90 502.67 P
(pired node.) 90 489.67 T
0.52 (An operational node, with perhaps performance failures being present in the node or the net-) 108 470.67 P
-0.04 (work, discovers it has been removed from the group by a local timer expiry indicating loss of live-) 90 457.67 P
-0.27 (ness with the census taker. There are two possibilities here. Either the node on which the sequencer) 90 444.67 P
1.46 (is present has crashed, or a performance/ omission failure occur in the atomic broadcast inter-) 90 431.67 P
0.08 (change. If it is found that the original sequencer is still live as a result of a subsequent join failure,) 90 418.67 P
-0.31 (the node must reincarnate itself by means of losing any group state or rebooting prior to any further) 90 405.67 P
0.42 (rejoin attempt. If the sequencer and census taker have failed, a new census taker is designated by) 90 392.67 P
(means of the election process.) 90 379.67 T
1 14 Q
(4.13 Fault suspector) 90 350.67 T
0 11 Q
-0.33 (Failures are suspect as a result of a node not timely acknowledging a broadcast from the census) 108 331.67 P
-0.23 (taker. They can also occur as a result of a lost virtual circuit or other hints that group members may) 90 318.67 P
-0.17 (have from the network transport. To prevent reciprocity of failure suspicions, we serialize process-) 90 305.67 P
-0.18 (ing of the suspected failures. Failure suspicions from nodes thought to have already failed, perhaps) 90 292.67 P
(due to their removal from the group as a result of earlier suspicions, are discarded.) 90 279.67 T
1 14 Q
(4.14 Extended Distributed IPC) 90 250.67 T
(4.14.1 Message delivery and \337ow contr) 90 220.67 T
(ol) 320.21 220.67 T
0 11 Q
(The) 108 201.67 T
3 10 Q
(meta-kmsg) 127.83 201.67 T
0 11 Q
( protocol proves to be inadequate across multiple failure domains.) 181.8 201.67 T
-0.05 (To honor the MACH IPC semantics \050namely reliability and ordering\051, we must guarantee that,) 108 182.67 P
0.19 (upon) 90 169.67 P
3 10 Q
0.42 (mach_msg\050\051) 114.91 169.67 P
0 11 Q
0.19 (return, the entire message has been copied to the target failure domain. Thus,) 181.3 169.67 P
0.45 (the message transmission has to performed by the sending thread in a synchronous way. Further-) 90 156.67 P
-0.22 (more, we can not queue anything to the message queue of the target port until the whole data trans-) 90 143.67 P
(fer has successfully completed \050to avoid the N-1 syndrome, see 3.3.4\051) 90 130.67 T
0 9 Q
(3) 396.64 135.07 T
0 11 Q
(.) 401.13 130.67 T
-0.58 (These requirements prevent us from using) 108 111.67 P
3 10 Q
-1.28 (meta-kmsg) 292.44 111.67 P
0 11 Q
-0.58 (s. Note that our requirements are orthog-) 346.41 111.67 P
0.3 (onal to the kind of congestion control policies that will replace the receiver-pull model in [La94]:) 90 98.67 P
FMENDPAGE
%%EndPage: "56" 57
%%Page: "57" 57
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(57) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.33 (without meta-kmsgs, we can still have either receiver-pull \050i.e., turn a) 90 712.67 P
3 10 Q
-0.71 (meta-kmsg) 394.88 712.67 P
0 11 Q
-0.33 ( into a simple re-) 448.85 712.67 P
(quest-to-send\051, or sender-push and early-drop. What we ask is that:) 90 699.67 T
(1.) 108 680.67 T
-0.52 (Sending threads are blocked while congestion control, data transfer and queueing to the tar-) 126 680.67 P
(get message queue take place.) 126 667.67 T
(2.) 108 643.67 T
-0.06 (Queueing to the target message queue can happen only if the entire message has been suc-) 126 643.67 P
(cessfully received.) 126 630.67 T
0.25 (Obviously, these requirements have a serious impact on performances: anything must be syn-) 108 606.67 P
0.49 (chronous with respect to the sending thread. Thus, the sending thread may experience significant) 90 593.67 P
0.11 (latencies, in case of resource crisis at the receiver side and/or large messages. To mitigate the per-) 90 580.67 P
0.55 (formance impact, we may consider a relaxed form of MACH IPC semantics, whereby we do not) 90 567.67 P
0.89 (guarantee reliability and ordering at the presence of failures \050e.g., we would preserve the use of) 90 554.67 P
3 10 Q
0.66 (meta-kmsg) 90 541.67 P
0 11 Q
0.3 (s and partially asynchronous data transfers\051. The strict MACH IPC semantics and the) 143.97 541.67 P
-0.61 (relaxed MACH IPC semantics would be selected through a per message new qualifier \050dubbed) 90 528.67 P
2 F
-0.61 (flush) 500.63 528.67 P
(bit) 90 515.67 T
0 F
(\051.) 101.6 515.67 T
1 14 Q
(4.14.2 Message r) 90 486.67 T
(epr) 188.45 486.67 T
(esentation) 208.4 486.67 T
0 11 Q
0.05 (The use of 128-bit NORMA UID implies that port rights have to be manipulated to translate a) 108 467.67 P
-0.15 (kmsg to the network format. This applies to source and destination port rights in the header as well) 90 454.67 P
(as the port rights \050in-line or out-of-line\051 which are defined in the message body.) 90 441.67 T
0.04 (Extended Distributed IPC must prepare a port rights translation table. The table is a discontin-) 108 422.67 P
(uous portion of the) 90 409.67 T
3 10 Q
(kmsg) 176.06 409.67 T
0 11 Q
(.) 200.04 409.67 T
1 14 Q
(4.14.3 Message transmission) 90 380.67 T
0 11 Q
-0.26 (To satisfy the requirements introduced in 4.10.2, we model the transmission mechanism as fol-) 108 361.67 P
(lows:) 90 348.67 T
(1.) 108 329.67 T
(The sending thread operates the data transfer in a synchronous way.) 126 329.67 T
(2.) 108 305.67 T
-0.02 (At the receiver node, the message is assembled and staged until all data has arrived. Noth-) 126 305.67 P
(ing is queued to the message queue until the data transfer comes to a successful end.) 126 292.67 T
(3.) 108 268.67 T
(Once the message has been queued to the remote queue, the \322last ACK\323 is sent.) 126 268.67 T
(4.) 108 244.67 T
(Upon receipt of the \322last ACK\323, the sending thread is unlocked.) 126 244.67 T
-0.45 (Figure 9 presents the different states at the sender and receiver sides. Obviously, the new mech-) 108 220.67 P
(anism has a significant impact on Distributed IPC and on the KKT interface.) 90 207.67 T
0.25 (We can analyze now the impact of node failures. Once a node has been declared as dead, and) 108 188.67 P
-0.25 (majority consensus has been reached upon its death, all the message transmissions in progress with) 90 175.67 P
-0.04 (the node must be aborted. Different cases apply, depending on the states at the sender and receiver) 90 162.67 P
(side.) 90 149.67 T
90 116 522 127.98 C
90 120.49 270 120.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
0.27 (3) 108 113.6 P
0 9 Q
0.35 (An alternative would be to queue incomplete kmsgs, and use a dequeueing policy more sophisticated than FIFO.) 111.49 110 P
-0.36 (For instance, we could recognize strictly ordered traffic \050originated by the same thread; a thread identifier should be used\051) 90 99 P
-0.27 (and unordered traffic \050various senders\051. However, we may introduce problems related to starvation; it is also unclear how) 90 88 P
(the new dequeueing policy would coexist with other dequeueing policies dictated by real-time and type of ports.) 90 77 T
FMENDPAGE
%%EndPage: "57" 58
%%Page: "58" 58
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(58) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
0.89 (If a failure is declared at T1, resources are reclaimed, Distributed IPC revokes the SAP and) 108 447.67 P
3 10 Q
0.83 (mach_msg\050\051) 90 434.67 P
0 11 Q
0.38 ( returns an error to the sender thread; the sender application knows that the receiver) 149.97 434.67 P
0.24 (application has not received any message. If a failure is declared at T2, the TX node can not infer) 90 421.67 P
-0.57 (whether the receiver application got the message or not \050only a transmission mechanism based upon) 90 408.67 P
0.63 (transactions and multi-phase commits would provide deterministic knowledge. To honor MACH) 90 395.67 P
-0.51 (IPC semantics, \322at most once\323 is sufficient\051.) 90 382.67 P
3 10 Q
-1.11 (Mach_msg\050\051) 283.86 382.67 P
0 11 Q
-0.51 ( must return an error as well to the sender) 343.83 382.67 P
(thread.) 90 369.67 T
0.09 (If a failure is declared at R1 and R2, resources are reclaimed, and Distributed IPC revokes the) 108 350.67 P
-0.2 (SAP \050with the ultimate effect that the protocol reassembly queues will be emptied, in case R1\051. If a) 90 337.67 P
0.27 (failure is declared at R3, the whole message has already been removed from the staging area, and) 90 324.67 P
-0.05 (queued to the port message queue: message delivery does take place \050Distributed IPC must revoke) 90 311.67 P
(the SAP, as before\051.) 90 298.67 T
1.77 (The use of send-once rights or of the) 108 280.33 P
3 10 Q
3.87 (MACH_SEND_ALWAYS) 286.32 280.33 P
0 11 Q
1.77 ( qualifier \050the latter for kernel) 382.26 280.33 P
-0.14 (threads only\051 offers slightly different MACH IPC semantics: the message has to be queued regard-) 90 268.33 P
0 (less of the number of messages already present in the message queue \050thus, in spite of the) 90 256.33 P
3 10 Q
0 (qlimit) 486.02 256.33 P
0 11 Q
0.17 (value\051. It is a mistake to attribute other semantics to send-once rights and to the) 90 244.33 P
3 10 Q
0.37 (MACH_SEND_AL-) 444.04 244.33 P
-0.9 (WAYS) 90 232.33 P
0 11 Q
-0.41 ( qualifier: for instance, queueing a) 113.99 232.33 P
3 10 Q
-0.9 (MACH_SEND_ALWAYS) 264.98 232.33 P
0 11 Q
-0.41 ( message must be a non-blocking op-) 360.92 232.33 P
-0.18 (eration. Rather, this and other behaviors are artifacts of the current implementation of MACH IPC:) 90 220.33 P
0.03 (we state that we may block, as long as our blocking is not related to the population of the message) 90 208.33 P
(queue and to) 90 196.33 T
3 10 Q
(qlimit) 148.89 196.33 T
0 11 Q
(.) 184.87 196.33 T
0.64 (Implementation wise, the use of) 108 177.67 P
3 10 Q
1.4 ( MACH_SEND_ALWAYS) 251.23 177.67 P
0 11 Q
0.64 ( is the following one. Once the target) 354.58 177.67 P
0.04 (node has been declared as dead, and majority consensus has been reached upon its death, the mes-) 90 164.67 P
-0.31 (sage send with) 90 151.67 P
3 10 Q
-0.67 (MACH_SEND_ALWAYS) 156.52 151.67 P
0 11 Q
-0.31 ( must return a) 252.47 151.67 P
3 10 Q
-0.67 (MACH_SEND_INVALID_DEST) 314.72 151.67 P
0 11 Q
-0.31 ( error code, to in-) 446.64 151.67 P
0.04 (dicate that the sender has still the possession of the) 90 138.67 P
3 10 Q
0.09 (kmsg) 316.82 138.67 P
0 11 Q
0.04 (. The sender thread will typically dispose) 340.81 138.67 P
0.56 (of the) 90 125.67 P
3 10 Q
1.23 (kmsg) 119.2 125.67 P
0 11 Q
0.56 ( \050and it will drop the references to the kernel object that holds\051: other actions are not) 143.18 125.67 P
-0.63 (likely to take place, in that the message has lost its value \050i.e. in case of a notification or an exception) 90 112.67 P
(to a failed node\051.) 90 99.67 T
90 72 522 720 C
131.67 463 480.33 709 C
0 11 Q
0 X
0 K
(TX side) 189 672.67 T
(RX side) 354.33 673.33 T
147.67 604 185 631.33 13.67 RR
0.5 H
2 Z
N
2 F
(nth) 153.67 620.67 T
0 F
( -1) 167.71 620.67 T
(TX) 158.33 611 T
227.67 603.33 265 630.67 13.67 RR
N
2 F
(nth) 238.33 621.33 T
0 F
(TX) 238.33 610.33 T
215.67 545.33 268.33 573.33 14 RR
N
(unlock) 226.33 562.67 T
(sender) 226.33 551.67 T
219.25 633.5 235 629.34 219.43 624.52 219.34 629.01 4 Y
V
108 180 50.67 6.67 235 622.67 A
195.26 602.08 180.33 606 195.07 610.58 195.16 606.33 4 Y
V
288 360 48 6.67 180.33 612.67 A
(time-out) 189.67 593.33 T
269.2 579.82 267 568 262.61 579.19 265.91 579.5 4 Y
V
19 90 20 35.33 247 568 A
391.33 606.67 428 629.33 11.33 RR
N
385.51 634.59 400.66 630.67 385.73 625.96 385.62 630.28 4 Y
V
108 180 48.67 8 400.67 622.67 A
2 F
(nth) 400.67 621.33 T
0 F
(RX) 401.33 610.67 T
388 550 434 573.33 11.67 RR
N
(enqueue) 393.33 558.67 T
424.27 587.54 421.32 574.01 416.65 587.04 420.46 587.29 4 Y
V
24 90 10 32.67 411.33 574 A
314.67 536.67 354 574.67 18 RR
N
(last) 326.67 565.33 T
(ACK) 321.33 554.67 T
364.68 549.66 351.32 552.67 364.25 557.2 364.46 553.43 4 Y
V
291 360 36.67 11.33 351.33 564 A
(last) 264 598.67 T
(ACK) 264 587.67 T
(ACK) 189.33 631.33 T
212.67 658.67 212.67 582 2 L
4 H
5 X
N
227.33 580.67 282 580 2 L
N
364.67 660 364.67 582.67 2 L
N
394 588.67 442.67 588.67 2 L
N
375.33 575.33 375.33 528.67 2 L
N
221 480.5 401 508.17 R
7 X
V
0 X
(Figure 9. TX and RX states) 230 491.17 T
(T1) 217.67 655.33 T
(T2) 277 568 T
(R1) 370.33 656.67 T
(R2) 393 593.33 T
(R3) 381.67 529.33 T
307 690 307 510.67 2 L
N
(last PDU) 420.67 604 T
(received) 420.67 597.67 T
359.31 610.27 352.66 620.67 363.81 615.38 361.56 612.82 4 Y
V
0.5 H
216 270 46.67 13.33 399.33 620.67 A
(sent) 326 544.67 T
(rcv\325) 290 588 T
(rcv\325d) 218 632.67 T
(PDU) 325.33 626 T
(rcv\325d) 326 620.33 T
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "58" 59
%%Page: "59" 59
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(59) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(4.14.4 Distributed port right management) 90 710.67 T
0 11 Q
-0.14 (We need to replace the port right management protocols in [La94] with new protocols, that are) 108 691.67 P
0.86 (effective across multiple failure domains. First, the protocols must produce and preserve correct) 90 678.67 P
-0.04 (MACH IPC semantics, in case one or more parties with protocol state fail. Second, it must be pos-) 90 665.67 P
0 (sible to have resource reclamation triggered by failures: the parties that are part of the quorum and) 90 652.67 P
0.68 (that have some protocol state related to nodes outside the quorum must be able to clean-up their) 90 639.67 P
(protocol state.) 90 626.67 T
1.25 (The MachNeTIPC protocols from University of Arizona [Or93] address these issues. Their) 108 607.67 P
(state diagram for send right transfer and receive right transfer will be our starting point.) 90 594.67 T
143.71 574.47 108 574.47 2 L
2 K
V
0.54 H
0 Z
N
(T. B. D.) 108 575.67 T
1 14 Q
0 K
(4.14.5 MACH IPC time-outs) 90 546.67 T
0 11 Q
0.58 (As part of the MACH IPC interface, it is possible to issue a) 108 527.67 P
3 10 Q
1.26 (mach_msg\050\051) 379.18 527.67 P
0 11 Q
0.58 (with the) 446.41 527.67 P
3 10 Q
1.26 (MACH_-) 486.02 527.67 P
-0.85 (SEND_TIMEOUT) 90 514.67 P
0 11 Q
-0.39 ( qualifier and a time-out value. In case of a port message queue with) 161.96 514.67 P
3 10 Q
-0.85 (qlimit) 459.51 514.67 P
0 11 Q
-0.39 (mes-) 500.64 514.67 P
(sages, the sending thread may block for the specified number of ticks, before giving up.) 90 501.67 T
-0.23 (This behavior is seamlessly extended to the remote case in the following way. The time-out in-) 108 482.67 P
0.34 (formation is inserted in the network format of the message \050together with the translation table for) 90 469.67 P
0.82 (UIDs\051. Thus, the time-out is turned into a message attribute, and it is propagated to the receiver) 90 456.67 P
-0.46 (node) 90 443.67 P
0 9 Q
-0.38 (4) 111.36 448.07 P
0 11 Q
-0.46 (. If the time-out expires before the message can be successfully queued to the remote message) 115.85 443.67 P
0.51 (queue \050in that the queue happens to have more than qlimit entries\051, the receiver node notifies the) 90 430.67 P
0.71 (sender node that the time-out has expired, and that a) 90 417.67 P
3 10 Q
1.56 (MACH_SEND_TIMED_OUT) 329.33 417.67 P
0 11 Q
0.71 ( must be returned) 443.27 417.67 P
-0.57 (\050Optionally, depending on the congestion control strategy in use, the receiver node may also declare) 90 404.67 P
(the channel as busy, and set up a callback entry for that node.\051) 90 391.67 T
0.49 (Given the latencies of the inter-node communication, and the logic to detect time-out expira-) 108 372.67 P
-0.11 (tions at the receiver node, we can not expect that the time-out value will be honored with precision) 90 359.67 P
(\050as if we were to use local IPC\051.) 90 346.67 T
1 14 Q
(4.15 Extended KKT Interface) 90 317.67 T
0 11 Q
-0.56 (The KKT interface must be enhanced with an upcall to be used by the Group Membership Serv-) 108 298.67 P
0.4 (er to notify Distributed IPC of changes in the population of the group, once a majority consensus) 90 285.67 P
-0.27 (has been reached \050See 5 in Figure 8\051.) 90 272.67 P
0 9 Q
-0.22 (5) 251.04 277.07 P
0 11 Q
-0.27 ( Given that membership events are handled on a per node ba-) 255.54 272.67 P
0 (sis, the new upcall can not be restricted to a single KKT channel \050a KKT channel being equivalent) 90 259.67 P
(to a single class of service from the communication services\051.) 90 246.67 T
0.44 (The new upcall \050) 108 227.67 P
3 10 Q
0.96 (norma_group_notify\050\051) 183.46 227.67 P
0 11 Q
0.44 (\051 specifies the nature of the event \050node removal,) 303.39 227.67 P
-0.1 (node join, quorum changes\051 and the parties involved \050in terms of) 90 214.67 P
3 10 Q
-0.21 (node_name) 376.38 214.67 P
0 11 Q
-0.1 (s\051. When Distributed) 430.35 214.67 P
0.13 (IPC receives the upcall, it is responsible for reclaiming resources \050i.e., it deallocates KKT handles) 90 201.67 P
0.2 (upon node removal\051 or for expanding tables \050i.e., it creates new NORMA special ports upon node) 90 188.67 P
(joins\051.) 90 175.67 T
-0.29 (The introduction of a translation table for UIDs raises the issue of Distributed IPC dealing with) 108 156.67 P
0.98 (discontinuous) 90 143.67 P
3 10 Q
2.13 (kmsgs) 154.76 143.67 P
0 11 Q
0.98 (. The Extended KKT interface must be able to pass discontinuous areas of) 184.74 143.67 P
90 127 522 138.98 C
90 131.49 270 131.49 2 L
7 X
0 K
V
0 H
2 Z
0 X
N
0 0 612 792 C
0 7 Q
0 X
0 K
-0.11 (4) 108 124.6 P
0 9 Q
-0.14 (Unless the remote message queue has already been declared as full, and the sending thread blocks without contact-) 111.49 121 P
(ing the receiver node.) 90 110 T
0 7 Q
-0.21 (5) 108 102.6 P
0 9 Q
-0.27 (Note that the existing KKT verbs KKT_ADD_NODE\050\051 and KKT_REMOVE_NODE\050\051 cannot be used for this pur-) 111.49 99 P
-0.16 (pose. They are directed from Distributed IPC towards the communication services \050to maintain a transport dependent list) 90 88 P
(of the nodes that have been temporary flow-controlled out.\051) 90 77 T
FMENDPAGE
%%EndPage: "59" 60
%%Page: "60" 60
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(60) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
-0.44 (memory with a single KKT invocation; then, XK-KKT will conceive an x-kernel message, by gath-) 90 712.67 P
(ering the translation table and the real) 90 699.67 T
3 10 Q
(kmsg) 258.73 699.67 T
0 11 Q
( into a single message acyclic graph.) 282.71 699.67 T
1 14 Q
(4.16 Implementation) 90 670.67 T
0 11 Q
0.63 (The x-kernel protocol graph presented in Section 3, Figure 3 is expanded to include the new) 108 651.67 P
0.55 (agents, and to take in account the new dependencies among them. Figure 11 shows the complete) 90 638.67 P
(protocol graph.) 90 625.67 T
FMENDPAGE
%%EndPage: "60" 61
%%Page: "61" 61
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(61) 486 46.67 T
90 72 522 720 R
7 X
V
90 72 522 720 C
90 89.86 522 720 C
448 431.33 499.33 455.33 R
13 X
0 K
V
0.5 H
0 Z
0 X
N
292.07 458.83 328.07 476.83 R
13 X
V
2 Z
0 X
N
328.42 448.83 M
 297.06 443.31 259.47 448.95 230.09 429.17 D
 210.72 416.12 209.87 378 233.42 369.75 D
 270.49 356.76 309.1 365.02 346.75 360.34 D
 381.7 356 385.73 397.23 376.72 421.17 D
 369.85 439.41 348.51 444.45 330.75 448.5 D
6 X
V
0 X
N
308.9 558 326.9 540.28 308.9 522.56 290.9 540.28 4 Y
7 X
V
0 X
N
288.57 329.65 329.07 344.83 R
7 X
V
0 X
N
0 8 Q
(VSIZE) 297.34 538.07 T
(ETHERNET) 289.09 333.74 T
220.57 108 400.57 144 R
7 X
V
0 11 Q
0 X
(Distributed IPC) 276.57 678 T
236.9 657 380.9 711 R
N
164.9 648 452.9 648 2 L
1 H
N
0 8 Q
(IP) 263.46 378.57 T
307.23 408.5 271.23 390.5 2 L
0.5 H
N
280.23 390.5 289.23 390.5 244.24 390.5 244.24 372.5 289.23 372.5 289.23 390.5 6 L
N
(BLAST) 255.57 492.33 T
308.9 522 272.9 504 2 L
N
308.9 522 308.9 477 2 L
N
281.9 504 290.9 504 245.9 504 245.9 486 290.9 486 290.9 504 6 L
N
(VMUX) 295.57 424.23 T
308.07 442.67 290.07 424.67 308.07 406.67 326.07 424.67 4 Y
N
(PACKET) 293.23 316.05 T
(FILTER) 293.23 308.05 T
162.57 266.22 450.57 266.22 2 L
1 H
N
0 11 Q
(KKT) 389.07 627 T
(Ethernet) 171.57 257.22 T
220.57 117 400.57 144 R
7 X
V
0 X
(Figure 11. The new protocol graph) 229.57 127 T
(Optional) 382.23 407.83 T
0 8 Q
(XK-KKT) 296.26 623.38 T
288.57 272.83 329.07 290.83 R
7 X
V
0.5 H
0 X
N
(DRIVER) 295.07 280.5 T
306.57 272.83 306.57 263.83 2 L
N
263.9 612 353.9 639 R
0 Z
N
308.9 657 308.9 639 2 L
2 Z
N
320.1 554.69 308.57 558 320.1 561.31 320.1 558 4 Y
V
476.26 672.46 479.57 684 482.88 672.46 479.57 672.46 4 Y
V
320.1 558 479.57 558 479.57 672.46 3 L
0 Z
N
308.9 576 353.9 594 R
N
263.9 576 299.9 594 R
N
(DATAGRAM) 308.9 582.33 T
(CHAN) 270.23 583 T
335.9 576 335.9 567 308.9 558 3 L
2 Z
N
281.9 576 281.9 567 308.9 558 3 L
N
281.9 612 281.9 594 2 L
N
335.9 612 335.9 594 2 L
N
468.93 672.46 472.23 684 475.54 672.46 472.23 672.46 4 Y
V
472.23 672.46 472.23 603 2 L
N
272.9 594 272.9 594 2 L
0 Z
N
348.44 599.69 336.9 603 348.44 606.31 348.44 603 4 Y
V
471.9 603 348.44 603 2 L
2 Z
N
294.44 599.69 282.9 603 294.44 606.31 294.44 603 4 Y
V
327.9 603 294.44 603 2 L
N
0 11 Q
(sync) 272.9 612 T
(async) 326.9 612 T
288.57 291.17 329.23 329.83 R
N
1 14 Q
(/) 319.9 306.79 T
0 8 Q
(VCI) 293.23 300.17 T
307.23 409.17 307.23 345.17 2 L
N
271.23 372.5 307.23 345.17 2 L
N
208.07 473.83 217.07 473.83 172.07 473.83 172.07 455.83 217.07 455.83 217.07 473.83 6 L
N
(HELLO) 181.74 461.83 T
404.4 503.67 460.9 535.17 R
13 X
V
0 X
N
0 10 Q
(Census) 417.57 520.5 T
( T) 417.57 510.5 T
(aker) 425.47 510.5 T
459.9 503.33 513.9 530.33 R
13 X
V
0 X
N
(Sequencer) 466.73 515.5 T
148.74 503.67 212.57 533.83 R
13 X
V
0 X
N
(Membership) 157.74 521.65 T
(Server) 157.74 511.65 T
0 8 Q
(BID) 299.36 465.18 T
272.9 486.33 308.73 477.17 2 L
N
308.73 458.83 308.73 443 2 L
N
126.43 672.8 129.74 684.33 133.04 672.8 129.74 672.8 4 Y
V
171.62 541.61 182.23 536.01 170.26 535.14 170.94 538.37 4 Y
V
129.74 672.8 129.74 546.83 170.95 538.36 3 L
0 Z
N
180.4 533.83 180.4 678 2 L
4 H
2 Z
4 X
N
214 684.61 237.07 678 214 671.38 214 678 4 Y
V
180.4 678 214 678 2 L
N
240.66 632.95 263.73 626.33 240.66 619.72 240.66 626.33 4 Y
V
181.24 626.33 240.66 626.33 2 L
N
126.65 189.66 198.32 216.33 R
13 X
V
0.5 H
0 X
N
0 11 Q
(New protocols related to fault isolation) 233.32 189.66 T
148.89 158.05 125.82 164.66 148.89 171.28 148.89 164.66 4 Y
4 X
V
175.25 171.28 198.32 164.66 175.25 158.05 175.25 164.66 4 Y
V
148.89 164.66 175.25 164.66 2 L
4 H
0 Z
N
0 X
(Non-standard x-kernel interface) 234.99 162.16 T
(Interface) 389.73 617 T
(Extended) 389.07 638 T
(To time server, etc ...) 423.18 687.28 T
(Configuration) 116.65 697.33 T
(Server) 116.65 686.33 T
212.65 316.7 280.65 344.7 R
0.5 H
2 Z
N
0 8 Q
(ADDRESS) 223.32 333.7 T
(RESOLUTION) 222.65 323.7 T
433.32 503.67 433.32 465 308.65 442.33 3 L
N
485.32 503.67 485.32 460.33 307.98 442.33 3 L
N
222.95 362.56 239.32 345 216.13 351.21 219.54 356.89 4 Y
4 X
V
161.99 503.67 161.99 391 219.54 356.88 3 L
4 H
N
270.14 478.95 291.98 469.01 268.19 465.86 269.16 472.41 4 Y
V
197.32 503.67 197.32 483 269.17 472.4 3 L
N
195.32 455.67 308.65 442.33 2 L
0.5 H
0 X
N
387.32 483.67 522.65 555 R
1 X
N
0 10 Q
0 X
(Designated node only) 403.32 542.33 T
0 11 Q
(Extended) 288.65 687.67 T
0 10 Q
(Update) 155.32 370.33 T
179.04 480.56 189.31 474.35 177.31 474.17 178.18 477.36 4 Y
V
121.32 684.33 121.32 492.33 178.18 477.35 3 L
N
0 11 Q
(Fault) 450.67 446.67 T
(Suspector) 450.67 435.67 T
308.67 442.67 448 442.67 2 L
N
90 72 522 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "61" 62
%%Page: "62" 62
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(62) 486 46.67 T
90 72 522 720 R
7 X
V
1 14 Q
0 X
(5. Bibliography) 90 710.67 T
0 11 Q
([Ar91]) 108 691.67 T
1.68 (K. Arvind. Protocols for Distributed Real-Time Systems. PhD thesis, May) 180 691.67 P
(1991.) 180 678.67 T
([Be93]) 108 661.67 T
0.91 (Philippe Bernadat. \322Microkernel benchmarking techniques\323. Slides. OSF RI) 180 661.67 P
(Symposium \32493.) 180 648.67 T
([Bi93]) 108 631.67 T
(K. Birman and Glade. Cornell, TR 93-1349.) 180 631.67 T
([Bj93]) 108 614.67 T
-0.18 (M. Bjorkman and P. Gunningberg. \322Locking Effects in Multiprocessor Imple-) 180 614.67 P
0.19 (mentations of Protocols\323, Proc. 14th Symp. on Operating Systems Principals,) 180 601.67 P
(1993.) 180 588.67 T
([Br93]) 108 571.67 T
0.06 (Bill Bryant, Alan Langerman, Steve Sears and David Black. \322A Task-to-Task) 180 571.67 P
0.75 (Communication System for Multicomputer Systems\323. OSF RI Collected Pa-) 180 558.67 P
(pers Vol. 2., 1993.) 180 545.67 T
([Bu94]) 108 528.67 T
1.01 (Ed Burke, Michael Condict, David Mitchell, Franklin Reynolds, Peter Wat-) 180 528.67 P
0.35 (kins, Bill Willcox. RPC Design for Real-Time MACH. Forthcoming OSF RI) 180 515.67 P
(TR.) 180 502.67 T
([Ca94]) 108 485.67 T
-0.08 (Joe Caradonna, Franklin Reynolds, Rob Haydt. New synchronization services) 180 485.67 P
(for Real-Time MACH. Forthcoming OSF RI TR.) 180 472.67 T
([Ch91]) 108 455.67 T
0.4 (T.D. Chandra and S. Toueg. \322Unreliable Failure Detectors for Asynchronous) 180 455.67 P
-0.56 (Systems\323. Proceedings of the Tenth ACM Annual Symposium on Principles of) 180 442.67 P
(Distributed Computing. ACM Press, 325-340.) 180 429.67 T
([CD93]) 108 412.67 T
(Common Data Link Interface. IBM TR, 1993.) 180 412.67 T
([Co93]) 108 395.67 T
0.09 (M. Condict, D. Mitchell, F. Reynolds. \322Server Co-location Project Proposal\323,) 180 395.67 P
(OSF RI TR, 1993.) 180 382.67 T
([Cr89]) 108 365.67 T
-0.23 (F. Cristian. Probabilistic clock synchronization. Distributed computing \0501989\051) 180 365.67 P
(3:146-158.) 180 352.67 T
([Dr93a]) 108 335.67 T
0.88 (P.Druschel, M. B. Abbott, M. A. Pagels and L. L. Peterson. \322Network Sub-) 180 335.67 P
(system Design\323, IEEE Network 7\0504\051:8-17, July 1993) 180 322.67 T
([Dr93b]) 108 305.67 T
1.62 (P. Druschel and L. L. Peterson. \322Fbufs: A High-Bandwidth Cross-Domain) 180 305.67 P
(Transfer Facility\323, Proc 14th Symp. on Operating Systems Principals, 1993.) 180 292.67 T
([Fi86]) 108 275.67 T
0.3 (M. Fischer, N. Lynch and M. Merritt. \322Easy Impossibility Proofs for Distrib-) 180 275.67 P
(uted Consensus Problems\323, Distributed Computing 1, 26-39.) 180 262.67 T
([Fo93]) 108 245.67 T
2.65 (Bryan Ford, Jay Lepreau. Evolving Mach 3.0 to use Migrating Threads.) 180 245.67 P
(UUCS-93-022.) 180 232.67 T
([Ha94]) 108 215.67 T
(Rob Haydt. Scheduling framework. Forthcoming OSF RI TR.) 180 215.67 T
([Hu91]) 108 198.67 T
0.56 (N. C. Hutchinson and L. L. Peterson. \322The x-kernel: an Architecture for Im-) 180 198.67 P
-0.28 (plementing Network Protocols\323, IEEE Trans. on Software Eng., vol. 17, no. 1,) 180 185.67 P
(pp 64-76, Jan 1991.) 180 172.67 T
([Ki93]) 108 155.67 T
1.52 (T. Kitayama, T. Nakajima and H. Tokuda. RT-IPC: An IPC Extension for) 180 155.67 P
(Real-Time MACH. CMU and JAIST TR \32493.) 180 142.67 T
([La94]) 108 125.67 T
1.02 (Alan Langerman, David Black, Michelle Dominijanni, Steve Sears, Randall) 180 125.67 P
0.98 (Dean, Dejan Milojicic. NOMA IPC Version Two: Architecture and Design.) 180 112.67 P
(Forthcoming OSF TR.) 180 99.67 T
FMENDPAGE
%%EndPage: "62" 63
%%Page: "63" 63
612 792 0 FMBEGINPAGE
90 36 522 54 R
7 X
0 K
V
0 11 Q
0 X
(April 13, 1994 3:33 pm) 90 46.67 T
(63) 486 46.67 T
90 72 522 720 R
7 X
V
0 X
([Lar94]) 108 712.67 T
0.68 (Youcef Laribi. \322Detailed report on designing and implementing Fault-Toler-) 180 712.67 P
(ance using Mach\323. DRAFT 2/1/94) 180 699.67 T
([Lo93a]) 108 682.67 T
-0.27 (K. Loepere, editor. MACH3 Server Writer\325s Guide, Draft Proposed Specifica-) 180 682.67 P
(tion, OSF and CMU, 1993.) 180 669.67 T
([Lo93b]) 108 652.67 T
0.07 (K. Loepere, editor. MACH3 Server Writer\325s Interfaces, Draft Proposed Spec-) 180 652.67 P
(ification, OSF and CMU, 1993.) 180 639.67 T
([Ma92]) 108 622.67 T
0.85 (S. O\325Malley and L. L. Peterson. \322A Dynamic Network Architecture\323, ACM) 180 622.67 P
(Transactions on Computer Systems, 10\0502\051, May, 1992.) 180 609.67 T
([Ma93a]) 108 592.67 T
-0.43 (C. Maeda, B. Bershad. Protocol Service Decomposition for High-Performance) 180 592.67 P
(Networking. SOSP, 1993.) 180 579.67 T
([Na94]) 108 562.67 T
(E. Nahum. Private communication. UMass.) 180 562.67 T
([Or93]) 108 545.67 T
0.43 (H. Orman, E. Menze, S. O\325Malley, and L. L. Peterson.  \322A Fast and General) 180 545.67 P
(Implementation of Mach IPC in a Network\323, Mach Usenix, 1993.) 180 532.67 T
([OS91]) 108 515.67 T
(OSF DCE 1.0. Open Software Foundation, 1991.) 180 515.67 T
([Pa93]) 108 498.67 T
(E. Paire. A proposal for cluster configuration. OSF RI \32493.) 180 498.67 T
([Pe94]) 108 481.67 T
1.13 (L. Peterson. \323Resource Allocation in the x-kernel \050Working Draft\051. Feb 23,) 180 481.67 P
(1994.) 180 468.67 T
([Re93]) 108 451.67 T
0.3 (F. Reynolds, F. Travostino, R. MacDonald, D. Elliston and K. Loepere. \322De-) 180 451.67 P
0.65 (sign for a New Untyped IPC for MACH\323. OSF RI Collected Papers Vol. 2.,) 180 438.67 P
(1993.) 180 425.67 T
([Ri93]) 108 408.67 T
1.86 (A. Ricciardi, K. Birman. \322Process Membership in Asynchronous Environ-) 180 408.67 P
(ments\323. Cornell, TR 93-1328.) 180 395.67 T
([Se94]) 108 378.67 T
-0.41 (Steve Sears, Michelle Dominijanni, Alan Langerman, David Black. \322Kernel to) 180 378.67 P
(Kernel Transport Interface for the MACH Kernel\323. Forthcoming OSF TR.) 180 365.67 T
([Sl90]) 108 348.67 T
(Sleator and Tarjan, Splay trees. JACM vol. 32, no. 3, pp 652-686.) 180 348.67 T
([Sw94]) 108 331.67 T
(Dan Swartzendruber. A preemptible MACH kernel. OSF RI TR.) 180 331.67 T
([Te92]) 108 314.67 T
(J. Test. Clock and timers. OSF RI TR, 1992.) 180 314.67 T
([Tr93a]) 108 297.67 T
-0.31 (F. Travostino, F. Reynolds. \322X-kernel evaluation at the OSF RI\323. OSF RI Col-) 180 297.67 P
(lected Papers Vol. 2., 1993.) 180 284.67 T
([Tr93b]) 108 267.67 T
-0.28 (F. Travostino. Experiments with the x-kernel on a multicomputer. Slides. OSF) 180 267.67 P
(RI Symposium, 1993.) 180 254.67 T
([Tr93c]) 108 237.67 T
0.75 (F. Travostino. MACH3 Locking Protocol. OSF RI Collected Papers Vol. 2.,) 180 237.67 P
(1993.) 180 224.67 T
([Tr93d]) 108 207.67 T
(F. Travostino. Emails to) 180 207.67 T
2 F
(xkernel@cs.arizona.edu) 289.26 207.67 T
0 F
(.) 395.78 207.67 T
([Yu94]) 108 190.67 T
0.3 (M. Yuhara, B. Bershad, C. Maeda, E.B. Moss. Efficient Packet Demultiplex-) 180 190.67 P
(ing for Multiple Endpoints and Large Messages. Usenix Winter \32494.) 180 177.67 T
FMENDPAGE
%%EndPage: "63" 64
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 63 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier
%%+ Courier-Bold
%%+ Times-BoldItalic
%%+ Courier-Oblique
%%+ Symbol
%%+ Helvetica
%%+ Helvetica-Bold
